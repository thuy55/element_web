{"version":3,"file":"element-web-plugin-engine.js","sources":["../node_modules/semver/internal/constants.js","../node_modules/semver/internal/debug.js","../node_modules/semver/internal/re.js","../node_modules/semver/internal/parse-options.js","../node_modules/semver/internal/identifiers.js","../node_modules/semver/classes/semver.js","../node_modules/semver/functions/parse.js","../node_modules/semver/functions/valid.js","../node_modules/semver/functions/clean.js","../node_modules/semver/functions/inc.js","../node_modules/semver/functions/diff.js","../node_modules/semver/functions/major.js","../node_modules/semver/functions/minor.js","../node_modules/semver/functions/patch.js","../node_modules/semver/functions/prerelease.js","../node_modules/semver/functions/compare.js","../node_modules/semver/functions/rcompare.js","../node_modules/semver/functions/compare-loose.js","../node_modules/semver/functions/compare-build.js","../node_modules/semver/functions/sort.js","../node_modules/semver/functions/rsort.js","../node_modules/semver/functions/gt.js","../node_modules/semver/functions/lt.js","../node_modules/semver/functions/eq.js","../node_modules/semver/functions/neq.js","../node_modules/semver/functions/gte.js","../node_modules/semver/functions/lte.js","../node_modules/semver/functions/cmp.js","../node_modules/semver/functions/coerce.js","../node_modules/semver/internal/lrucache.js","../node_modules/semver/classes/range.js","../node_modules/semver/classes/comparator.js","../node_modules/semver/functions/satisfies.js","../node_modules/semver/ranges/to-comparators.js","../node_modules/semver/ranges/max-satisfying.js","../node_modules/semver/ranges/min-satisfying.js","../node_modules/semver/ranges/min-version.js","../node_modules/semver/ranges/valid.js","../node_modules/semver/ranges/outside.js","../node_modules/semver/ranges/gtr.js","../node_modules/semver/ranges/ltr.js","../node_modules/semver/ranges/intersects.js","../node_modules/semver/ranges/simplify.js","../node_modules/semver/ranges/subset.js","../node_modules/semver/index.js","../src/api/index.ts","../src/loader.ts","../src/api/watchable.ts"],"sourcesContent":["// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\n// Max safe length for a build identifier. The max length minus 6 characters for\n// the shortest version with a build 0.0.0+BUILD.\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\nconst RELEASE_TYPES = [\n  'major',\n  'premajor',\n  'minor',\n  'preminor',\n  'patch',\n  'prepatch',\n  'prerelease',\n]\n\nmodule.exports = {\n  MAX_LENGTH,\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_SAFE_INTEGER,\n  RELEASE_TYPES,\n  SEMVER_SPEC_VERSION,\n  FLAG_INCLUDE_PRERELEASE: 0b001,\n  FLAG_LOOSE: 0b010,\n}\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n              `(?:${src[t.PRERELEASE]})?` +\n              `(?:${src[t.BUILD]})?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n","// parse out just the options we care about\nconst looseOption = Object.freeze({ loose: true })\nconst emptyOpts = Object.freeze({ })\nconst parseOptions = options => {\n  if (!options) {\n    return emptyOpts\n  }\n\n  if (typeof options !== 'object') {\n    return looseOption\n  }\n\n  return options\n}\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('build compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier, identifierBase) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier, identifierBase)\n        this.inc('pre', identifier, identifierBase)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase)\n        }\n        this.inc('pre', identifier, identifierBase)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre': {\n        const base = Number(identifierBase) ? 1 : 0\n\n        if (!identifier && identifierBase === false) {\n          throw new Error('invalid increment argument: identifier is empty')\n        }\n\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\n              throw new Error('invalid increment argument: identifier already exists')\n            }\n            this.prerelease.push(base)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          let prerelease = [identifier, base]\n          if (identifierBase === false) {\n            prerelease = [identifier]\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease\n            }\n          } else {\n            this.prerelease = prerelease\n          }\n        }\n        break\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.raw = this.format()\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`\n    }\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const SemVer = require('../classes/semver')\nconst parse = (version, options, throwErrors = false) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    if (!throwErrors) {\n      return null\n    }\n    throw er\n  }\n}\n\nmodule.exports = parse\n","const parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","const parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","const SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier, identifierBase) => {\n  if (typeof (options) === 'string') {\n    identifierBase = identifier\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier, identifierBase).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","const parse = require('./parse.js')\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n  const lowHasPre = !!lowVersion.prerelease.length\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major'\n    }\n\n    // Otherwise it can be determined by checking the high version\n\n    if (highVersion.patch) {\n      // anything higher than a patch bump would result in the wrong version\n      return 'patch'\n    }\n\n    if (highVersion.minor) {\n      // anything higher than a minor bump would result in the wrong version\n      return 'minor'\n    }\n\n    // bumping major/minor/patch all have same result\n    return 'major'\n  }\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // high and low are preleases\n  return 'prerelease'\n}\n\nmodule.exports = diff\n","const SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","const SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","const SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","const parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","const compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","const SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","const compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","const compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","const compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","const compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","const compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","const compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","const compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","const compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\n    let next\n    while ((next = coerceRtlRegex.exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  const major = match[2]\n  const minor = match[3] || '0'\n  const patch = match[4] || '0'\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\n\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n}\nmodule.exports = coerce\n","class LRUCache {\n  constructor () {\n    this.max = 1000\n    this.map = new Map()\n  }\n\n  get (key) {\n    const value = this.map.get(key)\n    if (value === undefined) {\n      return undefined\n    } else {\n      // Remove the key from the map and add it to the end\n      this.map.delete(key)\n      this.map.set(key, value)\n      return value\n    }\n  }\n\n  delete (key) {\n    return this.map.delete(key)\n  }\n\n  set (key, value) {\n    const deleted = this.delete(key)\n\n    if (!deleted && value !== undefined) {\n      // If cache is full, delete the least recently used item\n      if (this.map.size >= this.max) {\n        const firstKey = this.map.keys().next().value\n        this.delete(firstKey)\n      }\n\n      this.map.set(key, value)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = LRUCache\n","const SPACE_CHARACTERS = /\\s+/g\n\n// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.formatted = undefined\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')\n\n    // First, split on ||\n    this.set = this.raw\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.formatted = undefined\n  }\n\n  get range () {\n    if (this.formatted === undefined) {\n      this.formatted = ''\n      for (let i = 0; i < this.set.length; i++) {\n        if (i > 0) {\n          this.formatted += '||'\n        }\n        const comps = this.set[i]\n        for (let k = 0; k < comps.length; k++) {\n          if (k > 0) {\n            this.formatted += ' '\n          }\n          this.formatted += comps[k].toString().trim()\n        }\n      }\n    }\n    return this.formatted\n  }\n\n  format () {\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n    debug('tilde trim', range)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n    debug('caret trim', range)\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = require('../internal/lrucache')\nconst cache = new LRU()\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  safeRe: re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceTilde(c, options))\n    .join(' ')\n}\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceCaret(c, options))\n    .join(' ')\n}\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp\n    .split(/\\s+/)\n    .map((c) => replaceXRange(c, options))\n    .join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp\n    .trim()\n    .replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp\n    .trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n// TODO build?\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return `${from} ${to}`.trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ')\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { safeRe: re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","const Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","const Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","const Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","const outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","const Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2, options)\n}\nmodule.exports = intersects\n","// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nconst constants = require('./internal/constants')\nconst SemVer = require('./classes/semver')\nconst identifiers = require('./internal/identifiers')\nconst parse = require('./functions/parse')\nconst valid = require('./functions/valid')\nconst clean = require('./functions/clean')\nconst inc = require('./functions/inc')\nconst diff = require('./functions/diff')\nconst major = require('./functions/major')\nconst minor = require('./functions/minor')\nconst patch = require('./functions/patch')\nconst prerelease = require('./functions/prerelease')\nconst compare = require('./functions/compare')\nconst rcompare = require('./functions/rcompare')\nconst compareLoose = require('./functions/compare-loose')\nconst compareBuild = require('./functions/compare-build')\nconst sort = require('./functions/sort')\nconst rsort = require('./functions/rsort')\nconst gt = require('./functions/gt')\nconst lt = require('./functions/lt')\nconst eq = require('./functions/eq')\nconst neq = require('./functions/neq')\nconst gte = require('./functions/gte')\nconst lte = require('./functions/lte')\nconst cmp = require('./functions/cmp')\nconst coerce = require('./functions/coerce')\nconst Comparator = require('./classes/comparator')\nconst Range = require('./classes/range')\nconst satisfies = require('./functions/satisfies')\nconst toComparators = require('./ranges/to-comparators')\nconst maxSatisfying = require('./ranges/max-satisfying')\nconst minSatisfying = require('./ranges/min-satisfying')\nconst minVersion = require('./ranges/min-version')\nconst validRange = require('./ranges/valid')\nconst outside = require('./ranges/outside')\nconst gtr = require('./ranges/gtr')\nconst ltr = require('./ranges/ltr')\nconst intersects = require('./ranges/intersects')\nconst simplifyRange = require('./ranges/simplify')\nconst subset = require('./ranges/subset')\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  RELEASE_TYPES: constants.RELEASE_TYPES,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n","/*\nCopyright 2025 New Vector Ltd.\n\nSPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport type { Root } from \"react-dom/client\";\nimport { LegacyModuleApiExtension } from \"./legacy-modules\";\nimport { LegacyCustomisationsApiExtension } from \"./legacy-customisations\";\nimport { ConfigApi } from \"./config\";\nimport { I18nApi } from \"./i18n\";\nimport { CustomComponentsApi } from \"./custom-components\";\nimport { NavigationApi } from \"./navigation.ts\";\nimport { DialogApiExtension } from \"./dialog.ts\";\nimport { AccountAuthApiExtension } from \"./auth.ts\";\nimport { ProfileApiExtension } from \"./profile.ts\";\n\n/**\n * Module interface for modules to implement.\n * @public\n */\nexport interface Module {\n    load(): Promise<void>;\n}\n\nconst moduleSignature: Record<keyof Module, Type> = {\n    load: \"function\",\n};\n\n/**\n * Module interface for modules to export as the default export.\n * @public\n */\nexport interface ModuleFactory {\n    readonly moduleApiVersion: string;\n    new (api: Api): Module;\n    readonly prototype: Module;\n}\n\nconst moduleFactorySignature: Record<keyof ModuleFactory, Type> = {\n    moduleApiVersion: \"string\",\n    prototype: \"object\",\n};\n\nexport interface ModuleExport {\n    default: ModuleFactory;\n}\n\nconst moduleExportSignature: Record<keyof ModuleExport, Type> = {\n    default: \"function\",\n};\n\ntype Type = \"function\" | \"string\" | \"number\" | \"boolean\" | \"object\";\n\nfunction isInterface<T>(obj: unknown, type: \"object\" | \"function\", keys: Record<keyof T, Type>): obj is T {\n    if (obj === null || typeof obj !== type) return false;\n    for (const key in keys) {\n        if (typeof (obj as Record<keyof T, unknown>)[key] !== keys[key]) return false;\n    }\n    return true;\n}\n\nexport function isModule(module: unknown): module is ModuleExport {\n    return (\n        isInterface(module, \"object\", moduleExportSignature) &&\n        isInterface(module.default, \"function\", moduleFactorySignature) &&\n        isInterface(module.default.prototype, \"object\", moduleSignature)\n    );\n}\n\n/**\n * The API for modules to interact with the application.\n * @public\n */\nexport interface Api\n    extends LegacyModuleApiExtension,\n        LegacyCustomisationsApiExtension,\n        DialogApiExtension,\n        AccountAuthApiExtension,\n        ProfileApiExtension {\n    /**\n     * The API to read config.json values.\n     * Keys should be scoped to the module in reverse domain name notation.\n     * @public\n     */\n    readonly config: ConfigApi;\n    /**\n     * The internationalisation API.\n     * @public\n     */\n    readonly i18n: I18nApi;\n    /**\n     * The root node the main application is rendered to.\n     * Intended for rendering sibling React trees.\n     * @public\n     */\n    readonly rootNode: HTMLElement;\n\n    /**\n     * The custom message component API.\n     * @alpha\n     */\n    readonly customComponents: CustomComponentsApi;\n\n    /**\n     * API to navigate the application.\n     * @public\n     */\n    readonly navigation: NavigationApi;\n\n    /**\n     * Create a ReactDOM root for rendering React components.\n     * Exposed to allow modules to avoid needing to bundle their own ReactDOM.\n     * @param element - the element to render use as the root.\n     * @public\n     */\n    createRoot(element: Element): Root;\n}\n","/*\nCopyright 2025 New Vector Ltd.\n\nSPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport { satisfies } from \"semver\";\n\nimport { Api, isModule, Module, ModuleExport } from \"./api\";\n\n/**\n * Error thrown when a module is incompatible with the engine version.\n * @public\n */\nexport class ModuleIncompatibleError extends Error {\n    public constructor(pluginVersion: string) {\n        super(`Plugin version ${pluginVersion} is incompatible with engine version ${__VERSION__}`);\n    }\n}\n\n/**\n * A module loader for loading and starting modules.\n * @public\n */\nexport class ModuleLoader {\n    private modules: Module[] = [];\n    private started = false;\n\n    public constructor(private api: Api) {}\n\n    public async load(moduleExport: ModuleExport): Promise<void> {\n        if (this.started) {\n            throw new Error(\"PluginEngine.start() has already been called\");\n        }\n\n        if (!isModule(moduleExport)) {\n            throw new Error(\"Invalid plugin\");\n        }\n        if (!satisfies(__VERSION__, moduleExport.default.moduleApiVersion)) {\n            throw new ModuleIncompatibleError(moduleExport.default.moduleApiVersion);\n        }\n        const { default: Module } = moduleExport;\n        this.modules.push(new Module(this.api));\n    }\n\n    public async start(): Promise<void> {\n        if (this.started) {\n            throw new Error(\"PluginEngine.start() has already been called\");\n        }\n        this.started = true;\n\n        await Promise.all(this.modules.map((plugin) => plugin.load()));\n    }\n}\n","/*\nCopyright 2025 New Vector Ltd.\n\nSPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport { useEffect, useState } from \"react\";\n\ntype WatchFn<T> = (value: T) => void;\n\nfunction shallowCompare<T extends object>(obj1: T, obj2: T): boolean {\n    return (\n        Object.keys(obj1).length === Object.keys(obj2).length &&\n        Object.keys(obj1).every((key) => obj1[key as keyof T] === obj2[key as keyof T])\n    );\n}\n\nfunction isObject(value: unknown): value is object {\n    return value !== null && typeof value === \"object\";\n}\n\n/**\n * Utility class to wrap a value and allow listeners to be notified when the value changes.\n * If T is an object, it will use a shallow comparison to determine if the value has changed.\n * @public\n */\nexport class Watchable<T> {\n    private readonly listeners = new Set<WatchFn<T>>();\n\n    public constructor(private currentValue: T) {}\n\n    public get value(): T {\n        return this.currentValue;\n    }\n\n    public set value(value: T) {\n        // If the value hasn't changed, do nothing.\n        if (value === this.currentValue) {\n            return;\n        }\n        if (isObject(value) && isObject(this.currentValue) && shallowCompare(this.currentValue as object, value)) {\n            return;\n        }\n\n        this.currentValue = value;\n        for (const listener of this.listeners) {\n            listener(this.currentValue);\n        }\n    }\n\n    public watch(listener: (value: T) => void): void {\n        this.listeners.add(listener);\n    }\n\n    public unwatch(listener: (value: T) => void): void {\n        this.listeners.delete(listener);\n    }\n}\n\n/**\n * A React hook to use an updated Watchable value.\n * @param watchable - The Watchable instance to watch.\n * @returns The live value of the Watchable.\n * @public\n */\nexport function useWatchable<T>(watchable: Watchable<T>): T {\n    const [value, setValue] = useState<T>(watchable.value);\n    useEffect(() => {\n        setValue(watchable.value);\n        watchable.watch(setValue);\n        return (): void => {\n            watchable.unwatch(setValue);\n        };\n    }, [watchable]);\n    return value;\n}\n"],"names":["SEMVER_SPEC_VERSION","MAX_LENGTH","MAX_SAFE_INTEGER","MAX_SAFE_COMPONENT_LENGTH","MAX_SAFE_BUILD_LENGTH","constants","debug_1","define_process_default","args","require$$0","debug","require$$1","exports","module","re","safeRe","src","t","R","LETTERDASHNUMBER","safeRegexReplacements","makeSafeRegex","value","token","max","createToken","name","isGlobal","safe","index","looseOption","emptyOpts","parseOptions_1","options","numeric","compareIdentifiers","a","b","anum","bnum","identifiers","require$$2","parseOptions","require$$3","require$$4","SemVer","version","m","id","num","other","i","release","identifier","identifierBase","base","prerelease","semver","parse_1","throwErrors","er","parse","valid_1","v","clean_1","s","inc_1","diff_1","version1","version2","v1","v2","comparison","v1Higher","highVersion","lowVersion","highHasPre","prefix","major_1","loose","minor_1","patch_1","prerelease_1","parsed","compare_1","compare","rcompare_1","compareLoose_1","compareBuild_1","versionA","versionB","compareBuild","sort_1","list","rsort_1","gt_1","lt_1","eq_1","neq_1","gte_1","lte_1","eq","neq","gt","gte","lt","lte","require$$5","cmp_1","op","coerce_1","match","coerceRtlRegex","next","major","minor","patch","build","LRUCache","key","firstKey","lrucache","SPACE_CHARACTERS","Range","range","Comparator","r","c","first","isNullSet","isAny","comps","k","memoKey","FLAG_INCLUDE_PRERELEASE","FLAG_LOOSE","cached","cache","hr","hyphenReplace","comparatorTrimReplace","tildeTrimReplace","caretTrimReplace","rangeList","comp","parseComparator","replaceGTE0","rangeMap","comparators","result","thisComparators","isSatisfiable","rangeComparators","thisComparator","rangeComparator","testSet","LRU","require$$6","remainingComparators","testComparator","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","replaceTilde","_","M","p","pr","ret","replaceCaret","z","replaceXRange","gtlt","xM","xm","xp","anyX","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","set","allowed","ANY","cmp","comparator","satisfies_1","toComparators_1","maxSatisfying_1","versions","maxSV","rangeObj","minSatisfying_1","min","minSV","minVersion_1","minver","setMin","compver","valid","satisfies","require$$7","outside_1","hilo","gtfn","ltefn","ltfn","ecomp","high","low","outside","gtr_1","ltr_1","intersects_1","r1","r2","simplify","prev","ranges","simplified","original","subset","sub","dom","sawNonNull","OUTER","simpleSub","simpleDom","isSub","simpleSubset","minimumVersionWithPreRelease","minimumVersion","eqSet","higherGT","lowerLT","gtltComp","higher","lower","hasDomLT","hasDomGT","needDomLTPre","needDomGTPre","subset_1","internalRe","clean","inc","diff","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","rcompare","require$$14","compareLoose","require$$15","require$$16","sort","require$$17","rsort","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","coerce","require$$26","require$$27","require$$28","require$$29","toComparators","require$$30","maxSatisfying","require$$31","minSatisfying","require$$32","minVersion","require$$33","validRange","require$$34","require$$35","gtr","require$$36","ltr","require$$37","intersects","require$$38","simplifyRange","require$$39","require$$40","moduleSignature","moduleFactorySignature","moduleExportSignature","isInterface","obj","type","keys","isModule","ModuleIncompatibleError","pluginVersion","ModuleLoader","api","moduleExport","Module","plugin","shallowCompare","obj1","obj2","isObject","Watchable","currentValue","listener","useWatchable","watchable","setValue"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]}