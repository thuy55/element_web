{"version":3,"file":"matrix-sdk-crypto-wasm-DlvlUyhf.js","sources":["../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js","../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/index.mjs"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_62(arg0, arg1, arg2) {\n    const ret = wasm.closure38_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_65(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h9a610c366a7f0d0a(arg0, arg1);\n}\n\nfunction __wbg_adapter_68(arg0, arg1, arg2) {\n    wasm.closure751_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_71(arg0, arg1, arg2) {\n    wasm.closure434_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_74(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha55834deaaca03e1(arg0, arg1);\n}\n\nfunction __wbg_adapter_832(arg0, arg1, arg2, arg3) {\n    wasm.closure450_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n    /**\n     * The `sender` field on the event does not match the owner of the device\n     * that established the Megolm session.\n     */\n    MismatchedSender: 7, \"7\": \"MismatchedSender\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The type of a {@link ProcessedToDeviceEvent}.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const ProcessedToDeviceEventType = Object.freeze({\n    /**\n     * A successfully-decrypted encrypted to-device message.\n     */\n    Decrypted: 0, \"0\": \"Decrypted\",\n    /**\n     * An encrypted to-device message which could not be decrypted.\n     */\n    UnableToDecrypt: 1, \"1\": \"UnableToDecrypt\",\n    /**\n     * An unencrypted to-device message (sent in clear).\n     */\n    PlainText: 2, \"2\": \"PlainText\",\n    /**\n     * An invalid to-device message that was ignored because it is missing some\n     * required information to be processed (like no event `type` for\n     * example)\n     */\n    Invalid: 3, \"3\": \"Invalid\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n    /**\n     * The `sender` field on the event does not match the owner of the device\n     * that established the Megolm session.\n     */\n    MismatchedSender: 6, \"6\": \"MismatchedSender\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Base64EncodedPkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_base64encodedpkmessage_free(ptr >>> 0, 1));\n/**\n * The base64-encoded variant of a {@link PkMessage}.\n *\n * This can be useful if the encrypted message should be put into JSON.\n */\nexport class Base64EncodedPkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Base64EncodedPkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        Base64EncodedPkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Base64EncodedPkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_base64encodedpkmessage_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @returns {string}\n     */\n    get ciphertext() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ciphertext(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @param {string} arg0\n     */\n    set ciphertext(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @returns {string}\n     */\n    get mac() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_mac(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @param {string} arg0\n     */\n    set mac(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @returns {string}\n     */\n    get ephemeralKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @param {string} arg0\n     */\n    set ephemeralKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Creates a new base64-encoded encrypted message from its parts.\n     * @param {string} ciphertext\n     * @param {string} mac\n     * @param {string} ephemeral_key\n     */\n    constructor(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.base64encodedpkmessage_new(ptr0, len0, ptr1, len1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        Base64EncodedPkMessageFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Curve25519SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519secretkey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 secret key.\n */\nexport class Curve25519SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519secretkey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random Curve25519 secret key.\n     * @returns {Curve25519SecretKey}\n     */\n    static new() {\n        const ret = wasm.curve25519secretkey_new();\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a base64-encoded representation of\n     * the key.\n     * @param {string} string\n     * @returns {Curve25519SecretKey}\n     */\n    static fromBase64(string) {\n        const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n    /**\n     * Encodes the secret key into a base64 string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519secretkey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Converts the secret key into a raw byte vector.\n     * @returns {Uint8Array}\n     */\n    toUint8Array() {\n        const ret = wasm.curve25519secretkey_toUint8Array(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a raw byte slice.\n     * @param {Uint8Array} slice\n     * @returns {Curve25519SecretKey}\n     */\n    static fromUint8Array(slice) {\n        const ptr0 = passArray8ToWasm0(slice, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromUint8Array(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptedToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an encrypted to-device event, after it has been decrypted.\n */\nexport class DecryptedToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The decrypted event, as if it had been sent in the clear, encoded as\n     * JSON.\n     *\n     * Typically contains properties `type`, `sender` and `content`.\n     *\n     * (For room keys or secrets, some part of the content might have been\n     * zeroized).\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_decryptedtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption information for the event.\n     * @returns {ToDeviceEncryptionInfo}\n     */\n    get encryptionInfo() {\n        const ret = wasm.__wbg_get_decryptedtodeviceevent_encryptionInfo(this.__wbg_ptr);\n        return ToDeviceEncryptionInfo.__wrap(ret);\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.Decrypted} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.decryptedtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded object.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded object. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how a room event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.__wbg_get_encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @param {UserId} arg0\n     */\n    set sender(arg0) {\n        _assertClass(arg0, UserId);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptioninfo_sender(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the device that sent us the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.__wbg_get_encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @param {DeviceId | null} [arg0]\n     */\n    set senderDevice(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_encryptioninfo_senderDevice(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that created the\n     * megolm decryption key originally.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that created the\n     * megolm decryption key originally.\n     * @param {string} arg0\n     */\n    set senderCurve25519Key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.__wbg_get_encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @param {string | null} [arg0]\n     */\n    set senderClaimedEd25519Key(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst InvalidToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_invalidtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an invalid to-device event that was ignored (because it is\n * missing some mandatory fields, for example).\n */\nexport class InvalidToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InvalidToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        InvalidToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InvalidToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_invalidtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The original message as received from sync, encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_invalidtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.Invalid} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.invalidtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the migration operation. An instance of `JsLogger`.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<void>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle, logger) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the migration operation. An instance of `JsLogger`.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<void>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle, logger) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the migration operation. An instance of `JsLogger`.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<void>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle, logger) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     * `Promise` from a constructor is not idiomatic in JavaScript.\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     *\n     * * `logger` - Optional logger to use for all operations on this machine.\n     *   An instance of `JsLogger`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @param {any | null} [logger]\n     * @returns {Promise<OlmMachine>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase, logger) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     *\n     * * `logger` - Optional logger to use for all operations on this machine.\n     *   An instance of `JsLogger`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<OlmMachine>}\n     */\n    static initFromStore(user_id, device_id, store_handle, logger) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of values, each of which can be any of:\n     *   * {@link DecryptedToDeviceEvent}\n     *   * {@link PlainTextToDeviceEvent}\n     *   * {@link UTDToDeviceEvent}\n     *   * {@link InvalidToDeviceEvent}\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerDevicesUpdatedCallback(callback) {\n        wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     */\n    registerReceiveSecretCallback(callback) {\n        wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<any>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<any>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<any>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<RoomSettings|undefined>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Assemble, and encrypt, a room key bundle for sharing encrypted history,\n     * as per {@link https://github.com/matrix-org/matrix-spec-proposals/pull/4268|MSC4268}.\n     *\n     * Returns `undefined` if there are no keys to share in the given room,\n     * otherwise an {@link EncryptedAttachment}.\n     *\n     * The data should be uploaded to the media server, and the details then\n     * passed to {@link shareRoomKeyBundleData}.\n     *\n     * @experimental\n     * @param {RoomId} room_id\n     * @returns {Promise<EncryptedAttachment | undefined>}\n     */\n    buildRoomKeyBundle(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_buildRoomKeyBundle(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Collect the devices belonging to the given user, and send the details\n     * of a room key bundle to those devices.\n     *\n     * Returns a list of to-device requests which must be sent.\n     *\n     * @experimental\n     * @param {UserId} user\n     * @param {RoomId} room\n     * @param {string} url\n     * @param {string | null | undefined} media_encryption_info\n     * @param {CollectStrategy} sharing_strategy\n     * @returns {Promise<ToDeviceRequest[]>}\n     */\n    shareRoomKeyBundleData(user, room, url, media_encryption_info, sharing_strategy) {\n        _assertClass(user, UserId);\n        _assertClass(room, RoomId);\n        const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(media_encryption_info) ? 0 : passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        _assertClass(sharing_strategy, CollectStrategy);\n        var ptr2 = sharing_strategy.__destroy_into_raw();\n        const ret = wasm.olmmachine_shareRoomKeyBundleData(this.__wbg_ptr, user.__wbg_ptr, room.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * See if we have received an {@link https://github.com/matrix-org/matrix-spec-proposals/pull/4268|MSC4268}\n     * room key bundle for the given room from the given user.\n     *\n     * Returns either `undefined` if no suitable bundle has been received,\n     * or an {@link StoredRoomKeyBundleData}, in which case, the bundle\n     * should be downloaded, and then passed to {@link\n     * receiveRoomKeyBundle}.\n     *\n     * @experimental\n     * @param {RoomId} room_id\n     * @param {UserId} inviter\n     * @returns {Promise<StoredRoomKeyBundleData | undefined>}\n     */\n    getReceivedRoomKeyBundleData(room_id, inviter) {\n        _assertClass(room_id, RoomId);\n        _assertClass(inviter, UserId);\n        const ret = wasm.olmmachine_getReceivedRoomKeyBundleData(this.__wbg_ptr, room_id.__wbg_ptr, inviter.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import the message keys from a downloaded room key bundle.\n     *\n     * After {@link getReceivedRoomKeyBundleData} returns a truthy result, the\n     * media file should be downloaded and then passed into this method to\n     * actually do the import.\n     *\n     * @experimental\n     * @param {StoredRoomKeyBundleData} bundle_data\n     * @param {Uint8Array} encrypted_bundle\n     * @returns {Promise<undefined>}\n     */\n    receiveRoomKeyBundle(bundle_data, encrypted_bundle) {\n        _assertClass(bundle_data, StoredRoomKeyBundleData);\n        const ptr0 = passArray8ToWasm0(encrypted_bundle, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_receiveRoomKeyBundle(this.__wbg_ptr, bundle_data.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PkDecryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkdecryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key decryption instance.\n *\n * This implements the decryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkEncryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkDecryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkDecryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkDecryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkDecryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkdecryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkDecryption` instance with a newly generated key pair.\n     */\n    constructor() {\n        const ret = wasm.pkdecryption_new();\n        this.__wbg_ptr = ret >>> 0;\n        PkDecryptionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Creates a `PkDecryption` instance from a secret key.\n     * @param {Curve25519SecretKey} key\n     * @returns {PkDecryption}\n     */\n    static fromKey(key) {\n        _assertClass(key, Curve25519SecretKey);\n        const ret = wasm.pkdecryption_fromKey(key.__wbg_ptr);\n        return PkDecryption.__wrap(ret);\n    }\n    /**\n     * Returns the secret key associated with this `PkDecryption` instance.\n     * @returns {Curve25519SecretKey}\n     */\n    secretKey() {\n        const ret = wasm.pkdecryption_secretKey(this.__wbg_ptr);\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Returns the public key associated with this decryption instance.\n     *\n     * This can be used to construct a {@link PkEncryption} object to encrypt a\n     * message for this `PkDecryption` object.\n     * @returns {Curve25519PublicKey}\n     */\n    publicKey() {\n        const ret = wasm.pkdecryption_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Decrypts an encrypted message and returns the plaintext as a UTF-8\n     * string.\n     * @param {PkMessage} message\n     * @returns {string}\n     */\n    decryptString(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            _assertClass(message, PkMessage);\n            const ret = wasm.pkdecryption_decryptString(this.__wbg_ptr, message.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypts an encrypted message and returns the raw `Uint8Array`.\n     * @param {PkMessage} message\n     * @returns {Uint8Array}\n     */\n    decrypt(message) {\n        _assertClass(message, PkMessage);\n        const ret = wasm.pkdecryption_decrypt(this.__wbg_ptr, message.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst PkEncryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkencryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key encryption instance.\n *\n * This implements the encryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkDecryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkEncryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkEncryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkEncryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkencryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkEncryption` instance from a public key.\n     * @param {Curve25519PublicKey} public_key\n     * @returns {PkEncryption}\n     */\n    static fromKey(public_key) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ret = wasm.pkencryption_fromKey(public_key.__wbg_ptr);\n        return PkEncryption.__wrap(ret);\n    }\n    /**\n     * Encrypts a byte message and returns an encrypted {@link PkMessage}.\n     * @param {Uint8Array} message\n     * @returns {PkMessage}\n     */\n    encrypt(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Encrypts a string message and returns an encrypted {@link PkMessage}.\n     * @param {string} message\n     * @returns {PkMessage}\n     */\n    encryptString(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n}\n\nconst PkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkmessage_free(ptr >>> 0, 1));\n/**\n * A class representing an encrypted message using {@link PkEncryption}.\n */\nexport class PkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        PkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkmessage_free(ptr, 0);\n    }\n    /**\n     * Returns the raw ciphertext as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    ciphertext() {\n        const ret = wasm.pkmessage_ciphertext(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the raw message authentication code (MAC) as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    mac() {\n        const ret = wasm.pkmessage_mac(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the ephemeral public key used during encryption.\n     * @returns {Curve25519PublicKey}\n     */\n    ephemeralKey() {\n        const ret = wasm.pkmessage_ephemeralKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from its parts: ciphertext, MAC, and ephemeral\n     * key.\n     * @param {Uint8Array} ciphertext\n     * @param {Uint8Array} mac\n     * @param {Curve25519PublicKey} ephemeral_key\n     * @returns {PkMessage}\n     */\n    static fromParts(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(ephemeral_key, Curve25519PublicKey);\n        const ret = wasm.pkmessage_fromParts(ptr0, len0, ptr1, len1, ephemeral_key.__wbg_ptr);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from a base64-encoded representation.\n     * @param {Base64EncodedPkMessage} message\n     * @returns {PkMessage}\n     */\n    static fromBase64(message) {\n        _assertClass(message, Base64EncodedPkMessage);\n        const ret = wasm.pkmessage_fromBase64(message.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return PkMessage.__wrap(ret[0]);\n    }\n    /**\n     * Converts the `PkMessage` into a base64-encoded representation.\n     * @returns {Base64EncodedPkMessage}\n     */\n    toBase64() {\n        const ret = wasm.pkmessage_toBase64(this.__wbg_ptr);\n        return Base64EncodedPkMessage.__wrap(ret);\n    }\n}\n\nconst PlainTextToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_plaintexttodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents a to-device event sent in the clear.\n */\nexport class PlainTextToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PlainTextToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        PlainTextToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PlainTextToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plaintexttodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The to-device message, containing `type`, `sender` and `content` fields,\n     * encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_plaintexttodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.PlainText} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.plaintexttodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 7 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 7 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     *\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the open operation. An instance of `JsLogger`.\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @param {any | null} [logger]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase, logger) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     *\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the open operation. An instance of `JsLogger`.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @param {any | null} [logger]\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key, logger) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n}\n\nconst StoredRoomKeyBundleDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storedroomkeybundledata_free(ptr >>> 0, 1));\n/**\n * Information on a stored room key bundle data event.\n */\nexport class StoredRoomKeyBundleData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoredRoomKeyBundleData.prototype);\n        obj.__wbg_ptr = ptr;\n        StoredRoomKeyBundleDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoredRoomKeyBundleDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storedroomkeybundledata_free(ptr, 0);\n    }\n    /**\n     * The user that sent us this data.\n     * @returns {UserId}\n     */\n    get senderUser() {\n        const ret = wasm.__wbg_get_storedroomkeybundledata_senderUser(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The room that these keys are for.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_storedroomkeybundledata_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The location of the bundle.\n     * @returns {string}\n     */\n    get url() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_storedroomkeybundledata_url(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The JSON-encoded encryption info for the key bundle.\n     * @returns {string}\n     */\n    get encryptionInfo() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_storedroomkeybundledata_encryptionInfo(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ToDeviceEncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todeviceencryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how a to-device message was decrypted.\n */\nexport class ToDeviceEncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceEncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceEncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceEncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todeviceencryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that encrypted\n     * the message.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_todeviceencryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that encrypted\n     * the message.\n     * @param {string} arg0\n     */\n    set senderCurve25519Key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.__wbg_get_todeviceencryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @param {UserId} arg0\n     */\n    set sender(arg0) {\n        _assertClass(arg0, UserId);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_todeviceencryptioninfo_sender(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the device that sent us the to-device message.\n     *\n     * Could be `undefined` in the case where the to-device message sender\n     * checks are delayed. There is no delay for to-device messages other\n     * than `m.room_key`, so this will always be truthy for other\n     * message types (the decryption would fail if the sender device keys\n     * cannot be found).\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.__wbg_get_todeviceencryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the to-device message.\n     *\n     * Could be `undefined` in the case where the to-device message sender\n     * checks are delayed. There is no delay for to-device messages other\n     * than `m.room_key`, so this will always be truthy for other\n     * message types (the decryption would fail if the sender device keys\n     * cannot be found).\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @param {DeviceId | null} [arg0]\n     */\n    set senderDevice(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_todeviceencryptioninfo_senderDevice(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Returns whether the sender device is in a verified state.\n     * This reflects the state at the time of decryption.\n     * @returns {boolean}\n     */\n    isSenderVerified() {\n        const ret = wasm.todeviceencryptioninfo_isSenderVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UTDToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_utdtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an encrypted to-device event that could not be decrypted.\n */\nexport class UTDToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UTDToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        UTDToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UTDToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_utdtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The original message (of type `m.room.encrypted`) that failed to be\n     * decrypted, encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_utdtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.UnableToDecrypt} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.utdtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_883d9432f9188ef2(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_9338901b80183e0f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_7d852dd9f194d43e(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_55a8d08e0491e17a() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_f2afc3766d4545cf() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_f450db7eeb71163f() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_26fc2e6856d8567a(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_cfd8f6868bdaed9b(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_c46c11d3dbe1b030() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_613cb921d67a4f26() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_ea1a2987dff7759e() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_873ac48adc772309() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_fcfd513cf4581834() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_e566459f7161f82f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_574e78ad8b13b65f(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_3cb59063b29f58c1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_5f2014cb259e3fd1(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_decryptedtodeviceevent_new(arg0) {\n    const ret = DecryptedToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_3f08ae00cd288224() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_200677093b4cf756() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_2ecf7cf20900b3a2() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptedattachment_new(arg0) {\n    const ret = EncryptedAttachment.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c8a90a7ed73e84ce(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_64e73d9e9f03e8a4(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_ff4ddaabdfc5dbb3() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_from_2a5d3e218e67aa85(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_b11d8835dc4be0e8() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_304e868beec2021f() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_d1e60c13c0073374() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_e6903c610babcd42() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_3d90134a348e46b3() { return handleError(function (arg0, arg1) {\n    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));\n}, arguments) };\n\nexport function __wbg_getRandomValues_b8f5dbd5f3995a9e() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_46267b1c24877e30(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_8da03f81f6a1111e() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_93e54e8e166fbcab() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_e00ca5fff206ee3e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_b1f49280282046f8() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_f6b47b0dc333fd2f() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_3daf2e093e091b66(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_info_9dbb68f6a8dca153(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_f3469ce2244d2430(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_935168b8f4b49db3(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_invalidtodeviceevent_new(arg0) {\n    const ret = InvalidToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_c3c26b4103ad5aaf(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_29fefecef430db96() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_238152a0aedbb6e7(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_1872d19f5bcf83c6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_5c5d919204d42400(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_a61aeb35a24c1329(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_f2d27098bfd843e7(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_832(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_31a97dac4f10fab7(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_7a91e41fe43b3c92(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a239edaa1dc2968f(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_6d34787141015158(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_ee8e1b95dea9d37c(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_baedba94f03976fd() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_905d3e251edff8a2(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_807e54c39636c349() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_9bb1ab04a7012aaf(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_21878d46d25b64b6() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_e8337811e52861c6(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_1adef2266972fb45() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_238e247d18bde2cd() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_f4b061aa6d804b93() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_88b1390d99a7c691() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_e0c0b2993eb596e1() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_def2e24ef1252aff() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_plaintexttodeviceevent_new(arg0) {\n    const ret = PlainTextToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_dc0fbacc7c1c06f7(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_066faa31a6a88f5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ac0988aba3254290() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_4013cfdf4f22afb0(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_60cc747a6bc5215a() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_f29afabdf2c05826() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_6775f73144c2ef27(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_setonabort_3bf4db6614fa98e9(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_aebf64bd39f1eca8(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_4d19df0dadb7c4d4(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_b0d9d723b8fddbbb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_d7e3056cc6e56085(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_afa464ee777a396d(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_6ee07fa49ee1e3a5(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_dd24c422aa05df89(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storedroomkeybundledata_new(arg0) {\n    const ret = StoredRoomKeyBundleData.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_0a62d9d79a2a1ede(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_babc423936946a37() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d6d07c3c9963c49e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_e713aa7b07ccaedd(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_update_acd72607f506872a() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_utdtodeviceevent_new(arg0) {\n    const ret = UTDToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_68c4e9a54bb7fd5e() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_53465c57fc8cd691(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_a70a33e5bbc6d6db(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c01dfd4722a88165(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_4ca3906c248c47c4(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_c3cc2bbed3f9c3c0(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_array_new() {\n    const ret = [];\n    return ret;\n};\n\nexport function __wbindgen_array_push(arg0, arg1) {\n    arg0.push(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1145(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 39, __wbg_adapter_62);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2371(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 429, __wbg_adapter_65);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5561(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 429, __wbg_adapter_68);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7047(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 435, __wbg_adapter_71);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7052(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 435, __wbg_adapter_74);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n","// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entrypoint on non-node ESM environments.\n * `asyncLoad` will load the WASM module using a `fetch` call.\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\nconst defaultURL = new URL(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\", import.meta.url);\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @param {URL | string} url - The URL to fetch the WebAssembly module from\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync(url) {\n    const { instance } = await WebAssembly.instantiateStreaming(fetch(url), {\n        // @ts-expect-error: The bindings don't exactly match the 'ExportValue' type\n        \"./matrix_sdk_crypto_wasm_bg.js\": bindings,\n    });\n\n    bindings.__wbg_set_wasm(instance.exports);\n    // @ts-expect-error: Typescript doesn't know what the module exports are\n    instance.exports.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @param {URL | string} [url] - The URL to fetch the WebAssembly module from. If not provided, a default URL will be used.\n * @returns {Promise<void>}\n */\nexport async function initAsync(url = defaultURL) {\n    if (!modPromise) modPromise = loadModuleAsync(url);\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n"],"names":["wasm","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","lTextEncoder","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","ptr","len","mem","offset","code","ret","cachedDataViewMemory0","getDataViewMemory0","addToExternrefTable0","obj","idx","handleError","f","args","e","lTextDecoder","cachedTextDecoder","getStringFromWasm0","isLikeNone","x","getArrayU8FromWasm0","CLOSURE_DTORS","state","makeMutClosure","arg0","arg1","dtor","real","a","makeClosure","debugString","type","description","name","length","debug","i","builtInMatches","className","passArray8ToWasm0","takeFromExternrefTable0","value","_assertClass","instance","klass","passArrayJsValueToWasm0","array","add","getArrayJsValueFromWasm0","result","cachedUint16ArrayMemory0","getUint16ArrayMemory0","getArrayU16FromWasm0","getVersions","Versions","start","__wbg_adapter_62","arg2","__wbg_adapter_65","__wbg_adapter_68","__wbg_adapter_71","__wbg_adapter_74","__wbg_adapter_832","arg3","DecryptionErrorCode","DeviceKeyAlgorithmName","DeviceKeyName","EncryptionAlgorithm","HistoryVisibility","LocalTrust","LoggerLevel","ProcessedToDeviceEventType","QrCodeMode","QrState","RequestType","ShieldColor","ShieldStateCode","SignatureState","TrustRequirement","VerificationMethod","VerificationRequestPhase","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","AttachmentFinalization","Attachment","ptr0","len0","EncryptedAttachment","attachment","v1","BackupDecryptionKeyFinalization","BackupDecryptionKey","key","MegolmV1BackupKey","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","ptr4","len4","BackupKeysFinalization","BackupKeys","BackupSecretsBundleFinalization","BackupSecretsBundle","deferred1_0","deferred1_1","Base64EncodedPkMessageFinalization","Base64EncodedPkMessage","BaseMigrationDataFinalization","BaseMigrationData","UserId","DeviceId","CancelInfoFinalization","CancelInfo","CheckCodeFinalization","CheckCode","CollectStrategyFinalization","CollectStrategy","other","only_allow_trusted_devices","error_on_verified_user_problem","CrossSigningBootstrapRequestsFinalization","CrossSigningBootstrapRequests","UploadSigningKeysRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","CrossSigningKeyExport","CrossSigningStatusFinalization","CrossSigningStatus","Curve25519PublicKeyFinalization","Curve25519PublicKey","Curve25519SecretKeyFinalization","Curve25519SecretKey","string","slice","DecryptedRoomEventFinalization","DecryptedRoomEvent","strict","ShieldState","DecryptedToDeviceEventFinalization","DecryptedToDeviceEvent","ToDeviceEncryptionInfo","DecryptionSettingsFinalization","DecryptionSettings","sender_device_trust_requirement","DehydratedDeviceFinalization","DehydratedDevice","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","DehydratedDeviceKeyFinalization","DehydratedDevicesFinalization","DehydratedDevices","device_id","device_data","DeviceFinalization","Device","methods","event_type","content","local_state","algorithm","DeviceKey","Ed25519PublicKey","Signatures","DeviceIdFinalization","id","DeviceKeyFinalization","DeviceKeyAlgorithmFinalization","DeviceKeyAlgorithm","DeviceKeyIdFinalization","DeviceKeyId","DeviceListsFinalization","DeviceLists","changed","left","EciesFinalization","Ecies","initial_message","InboundCreationResult","public_key","OutboundCreationResult","Ed25519PublicKeyFinalization","Ed25519SignatureFinalization","Ed25519Signature","signature","EmojiFinalization","Emoji","EncryptedAttachmentFinalization","encrypted_data","media_encryption_info","EncryptionInfoFinalization","EncryptionInfo","EncryptionSettingsFinalization","EncryptionSettings","EstablishedEciesFinalization","EstablishedEcies","message","deferred2_0","deferred2_1","deferred3_0","deferred3_1","EventIdFinalization","EventId","ServerName","IdentityKeysFinalization","IdentityKeys","InboundCreationResultFinalization","InboundGroupSessionFinalization","InboundGroupSession","RoomId","InvalidToDeviceEventFinalization","InvalidToDeviceEvent","KeysBackupRequestFinalization","KeysBackupRequest","body","version","KeysClaimRequestFinalization","KeysClaimRequest","KeysQueryRequestFinalization","KeysQueryRequest","KeysUploadRequestFinalization","KeysUploadRequest","MaybeSignatureFinalization","MaybeSignature","Signature","MegolmDecryptionErrorFinalization","MegolmDecryptionError","MegolmV1BackupKeyFinalization","MigrationFinalization","Migration","data","pickle_key","store_handle","logger","StoreHandle","sessions","OlmMachineFinalization","OlmMachine","user_id","store_name","store_passphrase","enabled","users","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","request_id","request_type","response","room_id","event","decryption_settings","bundle","SecretsBundle","master_key","self_signing_key","user_signing_key","reset","encryption_settings","timeout_secs","flow_id","VerificationRequest","predicate","exported_room_keys","progress_listener","backed_up_room_keys","backup_version","decryption_key","backup_info","public_key_base_64","passphrase","rounds","deferred4_0","deferred4_1","ptr3","len3","encrypted_exported_room_keys","callback","secret_name","room_settings","RoomSettings","user","room","url","sharing_strategy","inviter","bundle_data","encrypted_bundle","StoredRoomKeyBundleData","OtherUserIdentityFinalization","OtherUserIdentity","request_event_id","OutboundCreationResultFinalization","OwnUserIdentityFinalization","OwnUserIdentity","PickledInboundGroupSessionFinalization","PickledInboundGroupSession","jsValue","PickledSessionFinalization","PickledSession","PkDecryptionFinalization","PkDecryption","PkMessage","PkEncryptionFinalization","PkEncryption","PkMessageFinalization","PlainTextToDeviceEventFinalization","PlainTextToDeviceEvent","PutDehydratedDeviceRequestFinalization","PutDehydratedDeviceRequest","QrFinalization","Qr","QrCode","QrCodeFinalization","QrCodeDataFinalization","QrCodeData","rendezvous_url","server_name","bytes","QrCodeScanFinalization","QrCodeScan","buffer","RehydratedDeviceFinalization","RehydratedDevice","RoomIdFinalization","RoomKeyCountsFinalization","RoomKeyCounts","RoomKeyImportResultFinalization","RoomKeyImportResult","RoomKeyInfoFinalization","RoomKeyInfo","RoomKeyWithheldInfoFinalization","RoomKeyWithheldInfo","RoomMessageRequestFinalization","RoomMessageRequest","txn_id","RoomSettingsFinalization","SasFinalization","Sas","SecretsBundleFinalization","json","ServerNameFinalization","ShieldStateFinalization","SignatureFinalization","SignatureUploadRequestFinalization","signed_keys","SignatureVerificationFinalization","SignatureVerification","SignaturesFinalization","signer","key_id","StoreHandleFinalization","store_key","StoredRoomKeyBundleDataFinalization","ToDeviceEncryptionInfoFinalization","ToDeviceRequestFinalization","ToDeviceRequest","TracingFinalization","Tracing","min_level","UTDToDeviceEventFinalization","UTDToDeviceEvent","UploadSigningKeysRequestFinalization","UserDevicesFinalization","UserDevices","UserIdFinalization","VerificationRequestFinalization","own_user_id","own_device_id","other_user_id","VersionsFinalization","__wbg_String_8f0eb39a4a4c2f66","__wbg_Window_b0044ac7db258535","__wbg_WorkerGlobalScope_b74cefefc62a37da","__wbg_add_883d9432f9188ef2","__wbg_add_9338901b80183e0f","__wbg_at_7d852dd9f194d43e","__wbg_backupkeys_new","__wbg_bound_55a8d08e0491e17a","__wbg_bound_f2afc3766d4545cf","__wbg_buffer_609cc3eee51ed158","__wbg_call_672a4d21634d4a24","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_clearTimeout_5a54f8841c30079a","__wbg_clear_f450db7eeb71163f","__wbg_close_26fc2e6856d8567a","__wbg_code_cfd8f6868bdaed9b","__wbg_continue_c46c11d3dbe1b030","__wbg_count_613cb921d67a4f26","__wbg_count_ea1a2987dff7759e","__wbg_createIndex_873ac48adc772309","__wbg_createIndex_fcfd513cf4581834","__wbg_createObjectStore_e566459f7161f82f","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_574e78ad8b13b65f","__wbg_debug_3cb59063b29f58c1","__wbg_debug_5f2014cb259e3fd1","__wbg_decryptedroomevent_new","__wbg_decryptedtodeviceevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_3f08ae00cd288224","__wbg_delete_200677093b4cf756","__wbg_delete_2ecf7cf20900b3a2","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_769e5ede4b31c67b","__wbg_emoji_new","__wbg_encryptedattachment_new","__wbg_encryptioninfo_new","__wbg_entries_3265d4158b33e5dc","__wbg_entries_c8a90a7ed73e84ce","__wbg_error_524f506f44df1645","__wbg_error_64e73d9e9f03e8a4","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_ff4ddaabdfc5dbb3","__wbg_from_2a5d3e218e67aa85","__wbg_getAllKeys_b11d8835dc4be0e8","__wbg_getAll_304e868beec2021f","__wbg_getAll_d1e60c13c0073374","__wbg_getAll_e6903c610babcd42","__wbg_getRandomValues_3d90134a348e46b3","__wbg_getRandomValues_b8f5dbd5f3995a9e","__wbg_getTime_46267b1c24877e30","__wbg_get_67b2ba62fc30de12","__wbg_get_8da03f81f6a1111e","__wbg_get_93e54e8e166fbcab","__wbg_get_b9b93047fe3cf45b","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_global_b6f5c73312f62313","__wbg_inboundgroupsession_new","__wbg_index_e00ca5fff206ee3e","__wbg_indexedDB_601ec26c63e333de","__wbg_indexedDB_b1f49280282046f8","__wbg_indexedDB_f6b47b0dc333fd2f","__wbg_info_3daf2e093e091b66","__wbg_info_9dbb68f6a8dca153","__wbg_instanceof_ArrayBuffer_e14585432e3737fc","__wbg_instanceof_Map_f3469ce2244d2430","__wbg_instanceof_Promise_935168b8f4b49db3","__wbg_instanceof_Uint8Array_17156bcf118086a9","__wbg_invalidtodeviceevent_new","__wbg_isArray_a1eab7e0d067391b","__wbg_isSafeInteger_343e2beeeece1bb0","__wbg_item_c3c26b4103ad5aaf","__wbg_iterator_9a24c88df860dc65","__wbg_key_29fefecef430db96","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_238152a0aedbb6e7","__wbg_length_a446193dc22c12f8","__wbg_length_e2d2a49132c1b256","__wbg_lowerBound_1872d19f5bcf83c6","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_5c5d919204d42400","__wbg_msCrypto_a61aeb35a24c1329","__wbg_name_f2d27098bfd843e7","__wbg_new_23a2665fac83c611","state0","cb0","__wbg_new_31a97dac4f10fab7","__wbg_new_405e22f390576ce2","__wbg_new_5e0be73521bc8c17","__wbg_new_78feb108b6472713","__wbg_new_7a91e41fe43b3c92","__wbg_new_8a6f238a6ece86ea","__wbg_new_a12002a7f91c75be","__wbg_new_a239edaa1dc2968f","__wbg_newnoargs_105ed471475aaf50","__wbg_newwithbyteoffsetandlength_6d34787141015158","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithlength_a381634e90c276d4","__wbg_newwithlength_ee8e1b95dea9d37c","__wbg_newwithmessage_baedba94f03976fd","__wbg_next_25feadfc0913fea9","__wbg_next_6574e1a8a62d1055","__wbg_node_905d3e251edff8a2","__wbg_now_2c95c9de01293173","__wbg_now_807e54c39636c349","__wbg_objectStoreNames_9bb1ab04a7012aaf","__wbg_objectStore_21878d46d25b64b6","__wbg_oldVersion_e8337811e52861c6","__wbg_olmmachine_new","__wbg_openCursor_1adef2266972fb45","__wbg_openCursor_238e247d18bde2cd","__wbg_openCursor_f4b061aa6d804b93","__wbg_open_88b1390d99a7c691","__wbg_open_e0c0b2993eb596e1","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_def2e24ef1252aff","__wbg_performance_7a3ffd0b17f663ad","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_plaintexttodeviceevent_new","__wbg_process_dc0fbacc7c1c06f7","__wbg_push_737cfc8c1432c2c6","__wbg_put_066faa31a6a88f5b","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_97d92b4fcc8a61c5","__wbg_queueMicrotask_d3219def82552485","__wbg_randomFillSync_ac0988aba3254290","__wbg_readyState_4013cfdf4f22afb0","__wbg_rehydrateddevice_new","__wbg_require_60cc747a6bc5215a","__wbg_resolve_4851785c9c5f573d","__wbg_result_f29afabdf2c05826","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","__wbg_set_37837023f3d740e8","__wbg_set_3f1d0b984ed272ed","__wbg_set_65595bdd868b3009","__wbg_set_6775f73144c2ef27","__wbg_set_8fc6bf8a5b1071d1","__wbg_setonabort_3bf4db6614fa98e9","__wbg_setonblocked_aebf64bd39f1eca8","__wbg_setoncomplete_4d19df0dadb7c4d4","__wbg_setonerror_b0d9d723b8fddbbb","__wbg_setonerror_d7e3056cc6e56085","__wbg_setonsuccess_afa464ee777a396d","__wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f","__wbg_setonversionchange_6ee07fa49ee1e3a5","__wbg_setunique_dd24c422aa05df89","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_88a902d13a557d07","__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0","__wbg_static_accessor_SELF_37c5d418e4bf5819","__wbg_static_accessor_WINDOW_5de37043a91a9c40","__wbg_storedroomkeybundledata_new","__wbg_storehandle_new","__wbg_stringify_f7ed6987935b4a24","__wbg_subarray_aa9065fa9dc5df96","__wbg_target_0a62d9d79a2a1ede","__wbg_then_44b73946d2fb3e7d","__wbg_then_48b406749878a531","__wbg_todevicerequest_new","__wbg_transaction_babc423936946a37","__wbg_transaction_d6d07c3c9963c49e","__wbg_transaction_e713aa7b07ccaedd","__wbg_update_acd72607f506872a","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_utdtodeviceevent_new","__wbg_value_68c4e9a54bb7fd5e","__wbg_value_cd1ffa7b1ab794f1","__wbg_values_53465c57fc8cd691","__wbg_verificationrequest_new","__wbg_version_a70a33e5bbc6d6db","__wbg_versions_c01dfd4722a88165","__wbg_warn_4ca3906c248c47c4","__wbg_warn_c3cc2bbed3f9c3c0","__wbindgen_array_new","__wbindgen_array_push","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","v","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1145","__wbindgen_closure_wrapper2371","__wbindgen_closure_wrapper5561","__wbindgen_closure_wrapper7047","__wbindgen_closure_wrapper7052","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number","defaultURL","bindings.__wbg_set_wasm","modPromise","loadModuleAsync","bindings","initAsync"],"mappings":"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","x_google_ignoreList":[0,1]}