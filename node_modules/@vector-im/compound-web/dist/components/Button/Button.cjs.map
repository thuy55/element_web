{"version":3,"file":"Button.cjs","sources":["../../../src/components/Button/Button.tsx"],"sourcesContent":["/*\nCopyright 2023, 2024 New Vector Ltd.\n\nSPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport classNames from \"classnames\";\nimport React, {\n  type ComponentType,\n  type PropsWithChildren,\n  forwardRef,\n  type ForwardedRef,\n  type Ref,\n} from \"react\";\nimport styles from \"./Button.module.css\";\nimport { UnstyledButton, type UnstyledButtonPropsFor } from \"./UnstyledButton\";\n\ninterface ButtonComponent {\n  // With the explicit `as` prop\n  <C extends React.ElementType>(\n    props: { as: C } & ButtonPropsFor<C>,\n  ): React.ReactElement;\n  // Without the explicit `as` prop, defaulting to a <button>\n  (props: ButtonPropsFor<\"button\">): React.ReactElement;\n}\n\ntype ButtonOwnProps = PropsWithChildren<{\n  /**\n   * The type of button.\n   * Note: \"destructive\" is deprecated, please use the destructive prop in\n   * conjunction with another button kind.\n   */\n  kind?: \"primary\" | \"secondary\" | \"tertiary\" | \"destructive\";\n  /**\n   * The t-shirt size of the button.\n   */\n  size?: \"sm\" | \"lg\";\n\n  /**\n   * Whether the button is an icon only button.\n   */\n  iconOnly?: boolean;\n\n  /**\n   * An icon to display within the button.\n   */\n  Icon?: ComponentType<React.SVGAttributes<SVGElement>>;\n  /**\n   * Whether this button triggers a destructive action.\n   * @default false\n   */\n  destructive?: boolean;\n}>;\n\ntype ButtonPropsFor<C extends React.ElementType> = ButtonOwnProps &\n  UnstyledButtonPropsFor<C>;\n\n/**\n * A button component that can be transformed into a link, but keep the button\n * styling using the `as` property.\n */\nexport const Button = forwardRef(function Button<\n  C extends React.ElementType = \"button\",\n>(\n  {\n    as,\n    kind: kindProp = \"primary\",\n    size = \"lg\",\n    children,\n    className,\n    iconOnly,\n    Icon,\n    destructive: destructiveProp,\n    disabled,\n    ...props\n  }: ButtonPropsFor<C> & { as?: C },\n  ref: ForwardedRef<C>,\n): React.ReactElement {\n  // Fallback for the deprecated \"destructive\" kind\n  const [kind, destructive] =\n    kindProp === \"destructive\"\n      ? [\"secondary\", true]\n      : [kindProp, destructiveProp];\n\n  const classes = classNames(styles.button, className, {\n    [styles[\"has-icon\"]]: Icon,\n    [styles[\"icon-only\"]]: iconOnly,\n    [styles.destructive]: destructive,\n  });\n\n  const iconSize = iconOnly && size === \"lg\" ? 24 : 20;\n\n  return (\n    <UnstyledButton\n      {...props}\n      as={as || (\"button\" as const)}\n      ref={ref as Ref<C>}\n      className={classes}\n      data-size={size}\n      data-kind={kind}\n      tabIndex={0}\n      disabled={disabled}\n    >\n      {Icon && (\n        <Icon\n          width={iconSize}\n          height={iconSize}\n          className={styles.icon}\n          aria-hidden={true}\n        />\n      )}\n      {children}\n    </UnstyledButton>\n  );\n}) as ButtonComponent;\n"],"names":["forwardRef","Button","styles","jsxs","UnstyledButton","jsx"],"mappings":";;;;;;;AA8DO,MAAM,SAASA,MAAAA,WAAW,SAASC,QAGxC;AAAA,EACE;AAAA,EACA,MAAM,WAAW;AAAA,EACjB,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,EACA,GAAG;AACL,GACA,KACoB;AAEpB,QAAM,CAAC,MAAM,WAAW,IACtB,aAAa,gBACT,CAAC,aAAa,IAAI,IAClB,CAAC,UAAU,eAAe;AAEhC,QAAM,UAAU,WAAWC,sBAAO,QAAQ,WAAW;AAAA,IACnD,CAACA,cAAAA,QAAO,UAAU,CAAC,GAAG;AAAA,IACtB,CAACA,cAAAA,QAAO,WAAW,CAAC,GAAG;AAAA,IACvB,CAACA,cAAAA,QAAO,WAAW,GAAG;AAAA,EAAA,CACvB;AAED,QAAM,WAAW,YAAY,SAAS,OAAO,KAAK;AAElD,SACEC,2BAAAA;AAAAA,IAACC,eAAAA;AAAAA,IAAA;AAAA,MACE,GAAG;AAAA,MACJ,IAAI,MAAO;AAAA,MACX;AAAA,MACA,WAAW;AAAA,MACX,aAAW;AAAA,MACX,aAAW;AAAA,MACX,UAAU;AAAA,MACV;AAAA,MAEC,UAAA;AAAA,QAAA,QACCC,2BAAAA;AAAAA,UAAC;AAAA,UAAA;AAAA,YACC,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,WAAWH,cAAAA,QAAO;AAAA,YAClB,eAAa;AAAA,UAAA;AAAA,QAAA;AAAA,QAGhB;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAGP,CAAC;;"}