{"version":3,"file":"Dropdown.cjs","sources":["../../../src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\n\nSPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport ChevronDown from \"@vector-im/compound-design-tokens/assets/web/icons/chevron-down\";\nimport Check from \"@vector-im/compound-design-tokens/assets/web/icons/check\";\nimport Error from \"@vector-im/compound-design-tokens/assets/web/icons/error-solid\";\n\nimport React, {\n  type Dispatch,\n  forwardRef,\n  type HTMLProps,\n  memo,\n  type RefObject,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type KeyboardEvent,\n  useMemo,\n} from \"react\";\n\nimport classNames from \"classnames\";\n\nimport styles from \"./Dropdown.module.css\";\nimport { useId } from \"@floating-ui/react\";\n\ntype DropdownProps = {\n  /**\n   * The CSS class name.\n   */\n  className?: string;\n  /**\n   * The controlled value of the dropdown.\n   */\n  value?: string;\n  /**\n   * The default value of the dropdown, used when uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * The values of the dropdown.\n   * [value, text]\n   */\n  values: [string, string][];\n  /**\n   * The placeholder text.\n   */\n  placeholder: string;\n  /**\n   * The label to display at the top of the dropdown\n   */\n  label: string;\n  /**\n   * The help label to display at the bottom of the dropdown\n   */\n  helpLabel?: string;\n  /**\n   * Callback for when the value changes.\n   * @param value\n   */\n  onValueChange?: (value: string) => void;\n  /**\n   * The error message to display.\n   */\n  error?: string;\n};\n\n/**\n * The dropdown content.\n */\nexport const Dropdown = forwardRef<HTMLButtonElement, DropdownProps>(\n  function Dropdown(\n    {\n      className,\n      label,\n      placeholder,\n      helpLabel,\n      onValueChange,\n      error,\n      value: controlledValue,\n      defaultValue,\n      values,\n      ...props\n    },\n    ref,\n  ) {\n    const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);\n    const value = controlledValue ?? uncontrolledValue;\n    const text = useMemo(\n      () =>\n        value === undefined\n          ? placeholder\n          : (values.find(([v]) => v === value)?.[1] ?? placeholder),\n      [value, values, placeholder],\n    );\n\n    const setValue = useCallback(\n      (value: string) => {\n        setUncontrolledValue(value);\n        onValueChange?.(value);\n      },\n      [setUncontrolledValue, onValueChange],\n    );\n\n    const [open, setOpen, dropdownRef] = useOpen();\n    const { listRef, onComboboxKeyDown, onOptionKeyDown } = useKeyboardShortcut(\n      open,\n      setOpen,\n      setValue,\n    );\n\n    const buttonRef = useRef<HTMLButtonElement | null>(null);\n    useEffect(() => {\n      // Focus the button when the value is set\n      // Test if the value is undefined to avoid focusing on the first render\n      if (value !== undefined) buttonRef.current?.focus();\n    }, [value]);\n\n    const hasPlaceholder = text === placeholder;\n    const buttonClasses = classNames({\n      [styles.placeholder]: hasPlaceholder,\n    });\n    const borderClasses = classNames(styles.border, {\n      [styles.open]: open,\n    });\n    const contentClasses = classNames(styles.content, {\n      [styles.open]: open,\n    });\n\n    /**\n     * Ids for accessibility.\n     */\n    const labelId = useId();\n    const contentId = useId();\n\n    return (\n      <div\n        ref={dropdownRef}\n        className={classNames(className, styles.container)}\n        aria-invalid={Boolean(error)}\n      >\n        <label id={labelId}>{label}</label>\n        <button\n          className={buttonClasses}\n          role=\"combobox\"\n          aria-haspopup=\"listbox\"\n          aria-labelledby={labelId}\n          aria-controls={contentId}\n          aria-expanded={open}\n          ref={(element) => {\n            // Private ref to focus the button\n            buttonRef.current = element;\n            // Handle forwarded ref\n            if (typeof ref === \"function\") {\n              ref(element);\n            } else if (ref) {\n              ref.current = element;\n            }\n          }}\n          onClick={() => setOpen((_open) => !_open)}\n          onKeyDown={onComboboxKeyDown}\n          {...props}\n        >\n          {text}\n          <ChevronDown width=\"24\" height=\"24\" />\n        </button>\n        <div className={borderClasses} />\n        <div className={contentClasses}>\n          <ul\n            ref={listRef}\n            id={contentId}\n            role=\"listbox\"\n            className={styles.content}\n          >\n            {values.map(([v, text]) => (\n              <DropdownItem\n                key={v}\n                isDisplayed={open}\n                isSelected={value === v}\n                onClick={() => {\n                  setOpen(false);\n                  setValue(v);\n                }}\n                onKeyDown={(e) => onOptionKeyDown(e, v)}\n              >\n                {text}\n              </DropdownItem>\n            ))}\n          </ul>\n        </div>\n        {!error && helpLabel && (\n          <span className={styles.help}>{helpLabel}</span>\n        )}\n        {error && (\n          <span className={styles.error}>\n            <Error width=\"20\" height=\"20\" />\n            {error}\n          </span>\n        )}\n      </div>\n    );\n  },\n);\n\ntype DropdownItemProps = HTMLProps<HTMLLIElement> & {\n  /**\n   * Whether the dropdown item is selected.\n   */\n  isSelected: boolean;\n  /**\n   * Whether the dropdown item is displayed.\n   */\n  isDisplayed: boolean;\n  /**\n   * The text to display in the dropdown item.\n   */\n  children: string;\n};\n\n/**\n * A dropdown item component.\n */\nconst DropdownItem = memo(function DropdownItem({\n  children,\n  isSelected,\n  isDisplayed,\n  ...props\n}: DropdownItemProps) {\n  const ref = useRef<HTMLLIElement>(null);\n\n  // Focus the item if the dropdown is open and the item is already selected\n  useEffect(() => {\n    if (isSelected && isDisplayed) {\n      ref.current?.focus();\n    }\n  }, [isSelected, isDisplayed]);\n\n  return (\n    <li\n      tabIndex={0}\n      role=\"option\"\n      ref={ref}\n      aria-selected={isSelected}\n      {...props}\n    >\n      {children} {isSelected && <Check width=\"20\" height=\"20\" />}\n    </li>\n  );\n});\n\n/**\n * A hook to manage the open state of the dropdown.\n */\nfunction useOpen(): [\n  boolean,\n  Dispatch<SetStateAction<boolean>>,\n  RefObject<HTMLDivElement | null>,\n] {\n  const [open, setOpen] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  // If the user clicks outside the dropdown, close it\n  useEffect(() => {\n    const closeIfOutside = (e: MouseEvent) => {\n      if (ref.current && !ref.current.contains(e.target as Node)) {\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener(\"click\", closeIfOutside);\n    return () => document.removeEventListener(\"click\", closeIfOutside);\n  }, [setOpen]);\n\n  return [open, setOpen, ref];\n}\n\n/**\n * A hook to manage the keyboard shortcuts of the dropdown.\n * @param open - the dropdown open state.\n * @param setOpen - the dropdown open state setter.\n * @param setValue - set the selected value and text\n */\nfunction useKeyboardShortcut(\n  open: boolean,\n  setOpen: Dispatch<SetStateAction<boolean>>,\n  setValue: (value: string) => void,\n) {\n  const listRef = useRef<HTMLUListElement>(null);\n  const onComboboxKeyDown = useCallback(\n    ({ key }: KeyboardEvent) => {\n      switch (key) {\n        // Enter and Space already managed because it's a button\n        case \"Escape\":\n          setOpen(false);\n          break;\n        case \"ArrowDown\":\n          setOpen(true);\n          // If open, focus the first element\n          if (open) {\n            (listRef.current?.firstElementChild as HTMLElement)?.focus();\n          }\n          break;\n        case \"ArrowUp\":\n          setOpen(true);\n          break;\n        case \"Home\": {\n          setOpen(true);\n          // Wait for the dropdown to be opened\n          Promise.resolve().then(() => {\n            (listRef.current?.firstElementChild as HTMLElement)?.focus();\n          });\n          break;\n        }\n        case \"End\": {\n          setOpen(true);\n          // Wait for the dropdown to be opened\n          Promise.resolve().then(() => {\n            (listRef.current?.lastElementChild as HTMLElement)?.focus();\n          });\n          break;\n        }\n      }\n    },\n    [listRef, open, setOpen],\n  );\n\n  const onOptionKeyDown = useCallback(\n    (evt: KeyboardEvent, value: string) => {\n      const { key, altKey } = evt;\n      evt.stopPropagation();\n      evt.preventDefault();\n\n      switch (key) {\n        case \"Enter\":\n        case \" \": {\n          setValue(value);\n          setOpen(false);\n          break;\n        }\n        case \"Tab\":\n        case \"Escape\":\n          setOpen(false);\n          break;\n        case \"ArrowDown\": {\n          const currentFocus = document.activeElement;\n          if (listRef.current?.contains(currentFocus) && currentFocus) {\n            (currentFocus.nextElementSibling as HTMLElement)?.focus();\n          }\n          break;\n        }\n        case \"ArrowUp\": {\n          if (altKey) {\n            setValue(value);\n            setOpen(false);\n          } else {\n            const currentFocus = document.activeElement;\n            if (listRef.current?.contains(currentFocus) && currentFocus) {\n              (currentFocus.previousElementSibling as HTMLElement)?.focus();\n            }\n          }\n          break;\n        }\n        case \"Home\": {\n          (listRef.current?.firstElementChild as HTMLElement)?.focus();\n          break;\n        }\n        case \"End\": {\n          (listRef.current?.lastElementChild as HTMLElement)?.focus();\n          break;\n        }\n      }\n    },\n    [listRef, setValue, setOpen],\n  );\n\n  return { listRef, onComboboxKeyDown, onOptionKeyDown };\n}\n"],"names":["forwardRef","Dropdown","useState","useMemo","useCallback","value","useRef","useEffect","styles","useId","jsxs","jsx","text","Error","memo","DropdownItem","Check"],"mappings":"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"}