{"version":3,"file":"ClientWidgetApi.js","names":["_events","require","_PostmessageTransport","_WidgetApiDirection","_WidgetApiAction","_Capabilities","_ApiVersion","_WidgetEventCapability","_GetOpenIDAction","_SimpleObservable","_Symbols","_UpdateDelayedEventAction","_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","slice","name","from","test","iter","len","arr2","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","val","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_inherits","subClass","superClass","_setPrototypeOf","p","bind","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","_asyncIterator","sync","retry","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","r","_return","ret","thr","ClientWidgetApi","_EventEmitter","_super","widget","iframe","driver","_this","Set","Map","contentWindow","transport","PostmessageTransport","WidgetApiDirection","ToWidget","id","window","targetOrigin","origin","on","handleMessage","addEventListener","onIframeLoad","start","hasCapability","capability","allowedCapabilities","has","canUseRoomTimeline","roomId","concat","Symbols","AnyRoom","canSendRoomEvent","eventType","msgtype","allowedEvents","some","matchesAsRoomEvent","EventDirection","Send","canSendStateEvent","stateKey","matchesAsStateEvent","canSendToDeviceEvent","matchesAsToDeviceEvent","canReceiveRoomEvent","Receive","canReceiveStateEvent","canReceiveToDeviceEvent","canReceiveRoomAccountData","matchesAsRoomAccountData","isStopped","_getWidgetVersions","_callee","_callee$","_context","cachedWidgetVersions","send","WidgetApiToWidgetAction","SupportedApiVersions","supported_versions","t0","console","warn","getWidgetVersions","beginCapabilities","_this2","emit","requestedCaps","Capabilities","caps","capabilities","validateCapabilities","allowedCaps","allowCapabilities","allowed","requested","_this$allowedEvents","_this3","log","_iterator2","_step2","c","add","WidgetEventCapability","findEventCapabilities","NotifyCapabilities","approved","_iterator3","_step3","isTimelineCapability","getTimelineRoomIDFromCapability","_iterator4","getKnownRooms","_step4","pushRoomState","viewedRoomId","ev","waitForIframeLoad","contentLoadedWaitTimer","setTimeout","contentLoadedActionSent","handleContentLoadedAction","action","clearTimeout","reply","message","replyVersions","request","CurrentApiVersions","_supportsUpdateState","_callee2","_callee2$","_context2","includes","UnstableApiVersion","MSC2762_UPDATE_STATE","supportsUpdateState","handleCapabilitiesRenegotiate","_request$data","_this4","data","newlyRequested","size","handleNavigate","_request$data2","_request$data3","_this5","MatrixCapabilities","MSC2931Navigate","uri","startsWith","onErr","handleDriverError","navigate","handleOIDC","_this6","phase","replyState","credential","OpenIDCredentials","original_request_id","requestId","replyError","msg","OpenIDRequestState","Blocked","observer","SimpleObservable","update","PendingUserConfirmation","close","Allowed","token","askOpenID","handleReadRoomAccountData","_this7","events","readRoomAccountData","evs","_handleReadEvents","_callee3","_this8","askRoomIds","_iterator5","_step5","limit","since","_stateKey","_callee3$","_context3","room_ids","state_key","readRoomEvents","readStateEvents","all","map","readRoomTimeline","flat","t1","readRoomState","handleReadEvents","_x","handleSendEvent","_this9","room_id","isDelayedEvent","delay","parent_delay_id","MSC4157SendDelayedEvent","sendEventPromise","sendEvent","content","_request$data$delay","_request$data$parent_","sendDelayedEvent","_request$data$delay2","_request$data$parent_2","sentEvent","event_id","eventId","delay_id","delayId","handleUpdateDelayedEvent","_this10","MSC4157UpdateDelayedEvent","UpdateDelayedEventAction","Cancel","Restart","updateDelayedEvent","_handleSendToDevice","_callee4","_callee4$","_context4","messages","encrypted","sendToDevice","handleSendToDevice","_x2","_pollTurnServers","_callee5","turnServers","initialServer","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","server","_callee5$","_context5","UpdateTurnServers","pollTurnServers","_x3","_x4","_handleWatchTurnServers","_callee6","_yield$turnServers$ne","_callee6$","_context6","MSC3846TurnServers","getTurnServers","handleWatchTurnServers","_x5","_handleUnwatchTurnServers","_callee7","_callee7$","_context7","handleUnwatchTurnServers","_x6","_handleReadRelations","_callee8","_this11","chunk","_callee8$","_context8","readEventRelations","rel_type","event_type","to","direction","prev_batch","prevBatch","next_batch","nextBatch","handleReadRelations","_x7","_handleUserDirectorySearch","_callee9","_callee9$","_context9","MSC3973UserDirectorySearch","search_term","searchUserDirectory","limited","results","user_id","userId","display_name","avatar_url","avatarUrl","handleUserDirectorySearch","_x8","_handleGetMediaConfig","_callee10","_callee10$","_context10","MSC4039UploadFile","getMediaConfig","handleGetMediaConfig","_x9","_handleUploadFile","_callee11","_callee11$","_context11","uploadFile","file","content_uri","contentUri","handleUploadFile","_x10","_handleDownloadFile","_callee12","_callee12$","_context12","MSC4039DownloadFile","downloadFile","handleDownloadFile","_x11","processError","actionEv","CustomEvent","detail","cancelable","defaultPrevented","WidgetApiFromWidgetAction","ContentLoaded","SendEvent","SendToDevice","GetOpenIDCredentials","MSC2974RenegotiateCapabilities","MSC2876ReadEvents","WatchTurnServers","UnwatchTurnServers","MSC3869ReadRelations","BeeperReadRoomAccountData","MSC4039GetMediaConfigAction","MSC4039UploadFileAction","MSC4039DownloadFileAction","updateTheme","theme","ThemeChange","updateLanguage","lang","LanguageChange","takeScreenshot","TakeScreenshot","updateVisibility","isVisible","UpdateVisibility","visible","sendWidgetConfig","WidgetConfig","notifyModalWidgetButtonClicked","ButtonClicked","notifyModalWidgetClose","CloseModalWidget","_feedEvent","_callee13","rawEvent","currentViewedRoomId","_rawEvent$content","_callee13$","_context13","setViewedRoomId","feedEvent","_x12","_x13","_feedToDevice","_callee14","_callee14$","_context14","feedToDevice","_x14","_x15","_flushRoomState","_callee15","_iterator6","_step6","eventTypeMap","_iterator7","_step7","stateKeyMap","_callee15$","_context15","pushRoomStateTasks","pushRoomStateResult","UpdateState","flushRoomStateTask","flushRoomState","_this12","_iterator8","_step8","_loop","cap","kind","EventKind","State","_cap$keyStr","_this12$flushRoomStat","keyStr","task","_iterator9","_step9","event","get","set","_feedStateUpdate","_callee16","_callee16$","_context16","feedStateUpdate","_x16","EventEmitter"],"sources":["../src/ClientWidgetApi.ts"],"sourcesContent":["/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\n\nimport { ITransport } from \"./transport/ITransport\";\nimport { Widget } from \"./models/Widget\";\nimport { PostmessageTransport } from \"./transport/PostmessageTransport\";\nimport { WidgetApiDirection } from \"./interfaces/WidgetApiDirection\";\nimport { IWidgetApiRequest, IWidgetApiRequestEmptyData } from \"./interfaces/IWidgetApiRequest\";\nimport { IContentLoadedActionRequest } from \"./interfaces/ContentLoadedAction\";\nimport { WidgetApiFromWidgetAction, WidgetApiToWidgetAction } from \"./interfaces/WidgetApiAction\";\nimport { IWidgetApiErrorResponseData } from \"./interfaces/IWidgetApiErrorResponse\";\nimport {\n    Capability,\n    MatrixCapabilities,\n    getTimelineRoomIDFromCapability,\n    isTimelineCapability,\n} from \"./interfaces/Capabilities\";\nimport { IOpenIDUpdate, ISendEventDetails, ISendDelayedEventDetails, WidgetDriver } from \"./driver/WidgetDriver\";\nimport {\n    ICapabilitiesActionResponseData,\n    INotifyCapabilitiesActionRequestData,\n    IRenegotiateCapabilitiesActionRequest,\n} from \"./interfaces/CapabilitiesAction\";\nimport {\n    ISupportedVersionsActionRequest,\n    ISupportedVersionsActionResponseData,\n} from \"./interfaces/SupportedVersionsAction\";\nimport { ApiVersion, CurrentApiVersions, UnstableApiVersion } from \"./interfaces/ApiVersion\";\nimport { IScreenshotActionResponseData } from \"./interfaces/ScreenshotAction\";\nimport { IVisibilityActionRequestData } from \"./interfaces/VisibilityAction\";\nimport { IWidgetApiAcknowledgeResponseData, IWidgetApiResponseData } from \"./interfaces/IWidgetApiResponse\";\nimport {\n    IModalWidgetButtonClickedRequestData,\n    IModalWidgetOpenRequestData,\n    IModalWidgetOpenRequestDataButton,\n    IModalWidgetReturnData,\n} from \"./interfaces/ModalWidgetActions\";\nimport {\n    ISendEventFromWidgetActionRequest,\n    ISendEventFromWidgetResponseData,\n    ISendEventToWidgetRequestData,\n} from \"./interfaces/SendEventAction\";\nimport {\n    ISendToDeviceFromWidgetActionRequest,\n    ISendToDeviceFromWidgetResponseData,\n    ISendToDeviceToWidgetRequestData,\n} from \"./interfaces/SendToDeviceAction\";\nimport { EventDirection, EventKind, WidgetEventCapability } from \"./models/WidgetEventCapability\";\nimport { IRoomEvent } from \"./interfaces/IRoomEvent\";\nimport { IRoomAccountData } from \"./interfaces/IRoomAccountData\";\nimport {\n    IGetOpenIDActionRequest,\n    IGetOpenIDActionResponseData,\n    IOpenIDCredentials,\n    OpenIDRequestState,\n} from \"./interfaces/GetOpenIDAction\";\nimport { SimpleObservable } from \"./util/SimpleObservable\";\nimport { IOpenIDCredentialsActionRequestData } from \"./interfaces/OpenIDCredentialsAction\";\nimport { INavigateActionRequest } from \"./interfaces/NavigateAction\";\nimport { IReadEventFromWidgetActionRequest, IReadEventFromWidgetResponseData } from \"./interfaces/ReadEventAction\";\nimport {\n    ITurnServer,\n    IWatchTurnServersRequest,\n    IUnwatchTurnServersRequest,\n    IUpdateTurnServersRequestData,\n} from \"./interfaces/TurnServerActions\";\nimport { Symbols } from \"./Symbols\";\nimport {\n    IReadRelationsFromWidgetActionRequest,\n    IReadRelationsFromWidgetResponseData,\n} from \"./interfaces/ReadRelationsAction\";\nimport {\n    IUserDirectorySearchFromWidgetActionRequest,\n    IUserDirectorySearchFromWidgetResponseData,\n} from \"./interfaces/UserDirectorySearchAction\";\nimport {\n    IReadRoomAccountDataFromWidgetActionRequest,\n    IReadRoomAccountDataFromWidgetResponseData,\n} from \"./interfaces/ReadRoomAccountDataAction\";\nimport {\n    IGetMediaConfigActionFromWidgetActionRequest,\n    IGetMediaConfigActionFromWidgetResponseData,\n} from \"./interfaces/GetMediaConfigAction\";\nimport {\n    IUpdateDelayedEventFromWidgetActionRequest,\n    UpdateDelayedEventAction,\n} from \"./interfaces/UpdateDelayedEventAction\";\nimport {\n    IUploadFileActionFromWidgetActionRequest,\n    IUploadFileActionFromWidgetResponseData,\n} from \"./interfaces/UploadFileAction\";\nimport {\n    IDownloadFileActionFromWidgetActionRequest,\n    IDownloadFileActionFromWidgetResponseData,\n} from \"./interfaces/DownloadFileAction\";\nimport { IThemeChangeActionRequestData } from \"./interfaces/ThemeChangeAction\";\nimport { IUpdateStateToWidgetRequestData } from \"./interfaces/UpdateStateAction\";\n\n/**\n * API handler for the client side of widgets. This raises events\n * for each action received as `action:${action}` (eg: \"action:screenshot\").\n * Default handling can be prevented by using preventDefault() on the\n * raised event. The default handling varies for each action: ones\n * which the SDK can handle safely are acknowledged appropriately and\n * ones which are unhandled (custom or require the client to do something)\n * are rejected with an error.\n *\n * Events which are preventDefault()ed must reply using the transport.\n * The events raised will have a default of an IWidgetApiRequest\n * interface.\n *\n * When the ClientWidgetApi is ready to start sending requests, it will\n * raise a \"ready\" CustomEvent. After the ready event fires, actions can\n * be sent and the transport will be ready.\n *\n * When the widget has indicated it has loaded, this class raises a\n * \"preparing\" CustomEvent. The preparing event does not indicate that\n * the widget is ready to receive communications - that is signified by\n * the ready event exclusively.\n *\n * This class only handles one widget at a time.\n */\nexport class ClientWidgetApi extends EventEmitter {\n    public readonly transport: ITransport;\n\n    private cachedWidgetVersions: ApiVersion[] | null = null;\n    // contentLoadedActionSent is used to check that only one ContentLoaded request is send.\n    private contentLoadedActionSent = false;\n    private allowedCapabilities = new Set<Capability>();\n    private allowedEvents: WidgetEventCapability[] = [];\n    private isStopped = false;\n    private turnServers: AsyncGenerator<ITurnServer> | null = null;\n    private contentLoadedWaitTimer?: ReturnType<typeof setTimeout>;\n    // Stores pending requests to push a room's state to the widget\n    private pushRoomStateTasks = new Set<Promise<void>>();\n    // Room ID → event type → state key → events to be pushed\n    private pushRoomStateResult = new Map<string, Map<string, Map<string, IRoomEvent>>>();\n    private flushRoomStateTask: Promise<void> | null = null;\n\n    /**\n     * Creates a new client widget API. This will instantiate the transport\n     * and start everything. When the iframe is loaded under the widget's\n     * conditions, a \"ready\" event will be raised.\n     * @param {Widget} widget The widget to communicate with.\n     * @param {HTMLIFrameElement} iframe The iframe the widget is in.\n     * @param {WidgetDriver} driver The driver for this widget/client.\n     */\n    public constructor(\n        public readonly widget: Widget,\n        private iframe: HTMLIFrameElement,\n        private driver: WidgetDriver,\n    ) {\n        super();\n        if (!iframe?.contentWindow) {\n            throw new Error(\"No iframe supplied\");\n        }\n        if (!widget) {\n            throw new Error(\"Invalid widget\");\n        }\n        if (!driver) {\n            throw new Error(\"Invalid driver\");\n        }\n        this.transport = new PostmessageTransport(WidgetApiDirection.ToWidget, widget.id, iframe.contentWindow, window);\n        this.transport.targetOrigin = widget.origin;\n        this.transport.on(\"message\", this.handleMessage.bind(this));\n\n        iframe.addEventListener(\"load\", this.onIframeLoad.bind(this));\n\n        this.transport.start();\n    }\n\n    public hasCapability(capability: Capability): boolean {\n        return this.allowedCapabilities.has(capability);\n    }\n\n    public canUseRoomTimeline(roomId: string | Symbols.AnyRoom): boolean {\n        return (\n            this.hasCapability(`org.matrix.msc2762.timeline:${Symbols.AnyRoom}`) ||\n            this.hasCapability(`org.matrix.msc2762.timeline:${roomId}`)\n        );\n    }\n\n    public canSendRoomEvent(eventType: string, msgtype: string | null = null): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsRoomEvent(EventDirection.Send, eventType, msgtype));\n    }\n\n    public canSendStateEvent(eventType: string, stateKey: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsStateEvent(EventDirection.Send, eventType, stateKey));\n    }\n\n    public canSendToDeviceEvent(eventType: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsToDeviceEvent(EventDirection.Send, eventType));\n    }\n\n    public canReceiveRoomEvent(eventType: string, msgtype: string | null = null): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsRoomEvent(EventDirection.Receive, eventType, msgtype));\n    }\n\n    public canReceiveStateEvent(eventType: string, stateKey: string | null): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsStateEvent(EventDirection.Receive, eventType, stateKey));\n    }\n\n    public canReceiveToDeviceEvent(eventType: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsToDeviceEvent(EventDirection.Receive, eventType));\n    }\n\n    public canReceiveRoomAccountData(eventType: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsRoomAccountData(EventDirection.Receive, eventType));\n    }\n\n    public stop(): void {\n        this.isStopped = true;\n        this.transport.stop();\n    }\n\n    public async getWidgetVersions(): Promise<ApiVersion[]> {\n        if (Array.isArray(this.cachedWidgetVersions)) {\n            return Promise.resolve(this.cachedWidgetVersions);\n        }\n\n        try {\n            const r = await this.transport.send<IWidgetApiRequestEmptyData, ISupportedVersionsActionResponseData>(\n                WidgetApiToWidgetAction.SupportedApiVersions,\n                {},\n            );\n            this.cachedWidgetVersions = r.supported_versions;\n            return r.supported_versions;\n        } catch (e) {\n            console.warn(\"non-fatal error getting supported widget versions: \", e);\n            return [];\n        }\n    }\n\n    private beginCapabilities(): void {\n        // widget has loaded - tell all the listeners that\n        this.emit(\"preparing\");\n\n        let requestedCaps: Capability[];\n        this.transport\n            .send<IWidgetApiRequestEmptyData, ICapabilitiesActionResponseData>(WidgetApiToWidgetAction.Capabilities, {})\n            .then((caps) => {\n                requestedCaps = caps.capabilities;\n                return this.driver.validateCapabilities(new Set(caps.capabilities));\n            })\n            .then((allowedCaps) => {\n                this.allowCapabilities([...allowedCaps], requestedCaps);\n                this.emit(\"ready\");\n            })\n            .catch((e) => {\n                this.emit(\"error:preparing\", e);\n            });\n    }\n\n    private allowCapabilities(allowed: string[], requested: string[]): void {\n        console.log(`Widget ${this.widget.id} is allowed capabilities:`, allowed);\n\n        for (const c of allowed) this.allowedCapabilities.add(c);\n        const allowedEvents = WidgetEventCapability.findEventCapabilities(allowed);\n        this.allowedEvents.push(...allowedEvents);\n\n        this.transport\n            .send(WidgetApiToWidgetAction.NotifyCapabilities, <INotifyCapabilitiesActionRequestData>{\n                requested,\n                approved: Array.from(this.allowedCapabilities),\n            })\n            .catch((e) => {\n                console.warn(\"non-fatal error notifying widget of approved capabilities:\", e);\n            })\n            .then(() => {\n                this.emit(\"capabilitiesNotified\");\n            });\n\n        // Push the initial room state for all rooms with a timeline capability\n        for (const c of allowed) {\n            if (isTimelineCapability(c)) {\n                const roomId = getTimelineRoomIDFromCapability(c);\n                if (roomId === Symbols.AnyRoom) {\n                    for (const roomId of this.driver.getKnownRooms()) this.pushRoomState(roomId);\n                } else {\n                    this.pushRoomState(roomId);\n                }\n            }\n        }\n        // If new events are allowed and the currently viewed room isn't covered\n        // by a timeline capability, then we know that there could be some state\n        // in the viewed room that the widget hasn't learned about yet- push it.\n        if (allowedEvents.length > 0 && this.viewedRoomId !== null && !this.canUseRoomTimeline(this.viewedRoomId)) {\n            this.pushRoomState(this.viewedRoomId);\n        }\n    }\n\n    private onIframeLoad(ev: Event): void {\n        if (this.widget.waitForIframeLoad) {\n            // If the widget is set to waitForIframeLoad the capabilities immediately get setup after load.\n            // The client does not wait for the ContentLoaded action.\n            this.beginCapabilities();\n        } else {\n            // Reaching this means, that the Iframe got reloaded/loaded and\n            // the clientApi is awaiting the FIRST ContentLoaded action.\n            console.log(\"waitForIframeLoad is false: waiting for widget to send contentLoaded\");\n            this.contentLoadedWaitTimer = setTimeout(() => {\n                console.error(\n                    \"Widget specified waitForIframeLoad=false but timed out waiting for contentLoaded event!\",\n                );\n            }, 10000);\n            this.contentLoadedActionSent = false;\n        }\n    }\n\n    private handleContentLoadedAction(action: IContentLoadedActionRequest): void {\n        if (this.contentLoadedWaitTimer !== undefined) {\n            clearTimeout(this.contentLoadedWaitTimer);\n            this.contentLoadedWaitTimer = undefined;\n        }\n        if (this.contentLoadedActionSent) {\n            throw new Error(\n                \"Improper sequence: ContentLoaded Action can only be sent once after the widget loaded \" +\n                    \"and should only be used if waitForIframeLoad is false (default=true)\",\n            );\n        }\n        if (this.widget.waitForIframeLoad) {\n            this.transport.reply(action, <IWidgetApiErrorResponseData>{\n                error: {\n                    message:\n                        \"Improper sequence: not expecting ContentLoaded event if \" +\n                        \"waitForIframeLoad is true (default=true)\",\n                },\n            });\n        } else {\n            this.transport.reply(action, <IWidgetApiRequestEmptyData>{});\n            this.beginCapabilities();\n        }\n        this.contentLoadedActionSent = true;\n    }\n\n    private replyVersions(request: ISupportedVersionsActionRequest): void {\n        this.transport.reply<ISupportedVersionsActionResponseData>(request, {\n            supported_versions: CurrentApiVersions,\n        });\n    }\n\n    private async supportsUpdateState(): Promise<boolean> {\n        return (await this.getWidgetVersions()).includes(UnstableApiVersion.MSC2762_UPDATE_STATE);\n    }\n\n    private handleCapabilitiesRenegotiate(request: IRenegotiateCapabilitiesActionRequest): void {\n        // acknowledge first\n        this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n\n        const requested = request.data?.capabilities || [];\n        const newlyRequested = new Set(requested.filter((r) => !this.hasCapability(r)));\n        if (newlyRequested.size === 0) {\n            // Nothing to do - skip validation\n            this.allowCapabilities([], []);\n        }\n\n        this.driver\n            .validateCapabilities(newlyRequested)\n            .then((allowed) => this.allowCapabilities([...allowed], [...newlyRequested]));\n    }\n\n    private handleNavigate(request: INavigateActionRequest): void {\n        if (!this.hasCapability(MatrixCapabilities.MSC2931Navigate)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        if (!request.data?.uri || !request.data?.uri.toString().startsWith(\"https://matrix.to/#\")) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid matrix.to URI\" },\n            });\n        }\n\n        const onErr = (e: unknown): void => {\n            console.error(\"[ClientWidgetApi] Failed to handle navigation: \", e);\n            this.handleDriverError(e, request, \"Error handling navigation\");\n        };\n\n        try {\n            this.driver\n                .navigate(request.data.uri.toString())\n                .catch((e: unknown) => onErr(e))\n                .then(() => {\n                    return this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n                });\n        } catch (e) {\n            return onErr(e);\n        }\n    }\n\n    private handleOIDC(request: IGetOpenIDActionRequest): void {\n        let phase = 1; // 1 = initial request, 2 = after user manual confirmation\n\n        const replyState = (\n            state: OpenIDRequestState,\n            credential?: IOpenIDCredentials,\n        ): void | Promise<IWidgetApiAcknowledgeResponseData> => {\n            credential = credential || {};\n            if (phase > 1) {\n                return this.transport.send<IOpenIDCredentialsActionRequestData>(\n                    WidgetApiToWidgetAction.OpenIDCredentials,\n                    {\n                        state: state,\n                        original_request_id: request.requestId,\n                        ...credential,\n                    },\n                );\n            } else {\n                return this.transport.reply<IGetOpenIDActionResponseData>(request, {\n                    state: state,\n                    ...credential,\n                });\n            }\n        };\n\n        const replyError = (msg: string): void | Promise<IWidgetApiAcknowledgeResponseData> => {\n            console.error(\"[ClientWidgetApi] Failed to handle OIDC: \", msg);\n            if (phase > 1) {\n                // We don't have a way to indicate that a random error happened in this flow, so\n                // just block the attempt.\n                return replyState(OpenIDRequestState.Blocked);\n            } else {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: msg },\n                });\n            }\n        };\n\n        const observer = new SimpleObservable<IOpenIDUpdate>((update) => {\n            if (update.state === OpenIDRequestState.PendingUserConfirmation && phase > 1) {\n                observer.close();\n                return replyError(\"client provided out-of-phase response to OIDC flow\");\n            }\n\n            if (update.state === OpenIDRequestState.PendingUserConfirmation) {\n                replyState(update.state);\n                phase++;\n                return;\n            }\n\n            if (update.state === OpenIDRequestState.Allowed && !update.token) {\n                return replyError(\"client provided invalid OIDC token for an allowed request\");\n            }\n            if (update.state === OpenIDRequestState.Blocked) {\n                update.token = undefined; // just in case the client did something weird\n            }\n\n            observer.close();\n            return replyState(update.state, update.token);\n        });\n\n        this.driver.askOpenID(observer);\n    }\n    private handleReadRoomAccountData(request: IReadRoomAccountDataFromWidgetActionRequest): void | Promise<void> {\n        let events: Promise<IRoomAccountData[]> = Promise.resolve([]);\n        events = this.driver.readRoomAccountData(request.data.type);\n\n        if (!this.canReceiveRoomAccountData(request.data.type)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Cannot read room account data of this type\" },\n            });\n        }\n\n        return events.then((evs) => {\n            this.transport.reply<IReadRoomAccountDataFromWidgetResponseData>(request, { events: evs });\n        });\n    }\n\n    private async handleReadEvents(request: IReadEventFromWidgetActionRequest): Promise<void> {\n        if (!request.data.type) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event type\" },\n            });\n        }\n        if (request.data.limit !== undefined && (!request.data.limit || request.data.limit < 0)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - limit out of range\" },\n            });\n        }\n\n        let askRoomIds: string[];\n        if (request.data.room_ids === undefined) {\n            askRoomIds = this.viewedRoomId === null ? [] : [this.viewedRoomId];\n        } else if (request.data.room_ids === Symbols.AnyRoom) {\n            askRoomIds = this.driver.getKnownRooms().filter((roomId) => this.canUseRoomTimeline(roomId));\n        } else {\n            askRoomIds = request.data.room_ids;\n            for (const roomId of askRoomIds) {\n                if (!this.canUseRoomTimeline(roomId)) {\n                    return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                        error: { message: `Unable to access room timeline: ${roomId}` },\n                    });\n                }\n            }\n        }\n\n        const limit = request.data.limit || 0;\n        const since = request.data.since;\n\n        let stateKey: string | undefined = undefined;\n        let msgtype: string | undefined = undefined;\n        if (request.data.state_key !== undefined) {\n            stateKey = request.data.state_key === true ? undefined : request.data.state_key.toString();\n            if (!this.canReceiveStateEvent(request.data.type, stateKey ?? null)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot read state events of this type\" },\n                });\n            }\n        } else {\n            msgtype = request.data.msgtype;\n            if (!this.canReceiveRoomEvent(request.data.type, msgtype)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot read room events of this type\" },\n                });\n            }\n        }\n\n        let events: IRoomEvent[];\n\n        if (request.data.room_ids === undefined && askRoomIds.length === 0) {\n            // For backwards compatibility we still call the deprecated\n            // readRoomEvents and readStateEvents methods in case the client isn't\n            // letting us know the currently viewed room via setViewedRoomId\n            //\n            // This can be considered as a deprecated implementation.\n            // A driver should call `setViewedRoomId` on the widget messaging and implement the new readRoomState and readRoomTimeline\n            // Methods.\n            // This block makes sure that it is also possible to not use setViewedRoomId.\n            // readRoomTimeline and readRoomState are required however! Otherwise widget requests that include\n            // `room_ids` will fail.\n            console.warn(\n                \"The widgetDriver uses deprecated behaviour:\\n It does not set the viewedRoomId using `setViewedRoomId`\",\n            );\n            events = await // This returns [] with the current driver of Element Web.\n            // Add default implementations of the `readRoomEvents` and `readStateEvents`\n            // methods to use `readRoomTimeline` and `readRoomState` if they are not overwritten.\n            (request.data.state_key === undefined\n                ? this.driver.readRoomEvents(request.data.type, msgtype, limit, null, since)\n                : this.driver.readStateEvents(request.data.type, stateKey, limit, null));\n        } else if (await this.supportsUpdateState()) {\n            // Calling read_events with a stateKey still reads from the rooms timeline (not the room state).\n            events = (\n                await Promise.all(\n                    askRoomIds.map((roomId) =>\n                        this.driver.readRoomTimeline(roomId, request.data.type, msgtype, stateKey, limit, since),\n                    ),\n                )\n            ).flat(1);\n        } else {\n            // TODO: remove this once `UnstableApiVersion.MSC2762_UPDATE_STATE` becomes stable.\n            // Before version `MSC2762_UPDATE_STATE` we used readRoomState for read_events actions.\n            events = (\n                request.data.state_key === undefined\n                    ? await Promise.all(\n                          askRoomIds.map((roomId) =>\n                              this.driver.readRoomTimeline(roomId, request.data.type, msgtype, stateKey, limit, since),\n                          ),\n                      )\n                    : await Promise.all(\n                          askRoomIds.map((roomId) => this.driver.readRoomState(roomId, request.data.type, stateKey)),\n                      )\n            ).flat(1);\n        }\n\n        this.transport.reply<IReadEventFromWidgetResponseData>(request, { events });\n    }\n\n    private handleSendEvent(request: ISendEventFromWidgetActionRequest): void {\n        if (!request.data.type) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event type\" },\n            });\n        }\n\n        if (!!request.data.room_id && !this.canUseRoomTimeline(request.data.room_id)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: `Unable to access room timeline: ${request.data.room_id}` },\n            });\n        }\n\n        const isDelayedEvent = request.data.delay !== undefined || request.data.parent_delay_id !== undefined;\n        if (isDelayedEvent && !this.hasCapability(MatrixCapabilities.MSC4157SendDelayedEvent)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        let sendEventPromise: Promise<ISendEventDetails | ISendDelayedEventDetails>;\n        if (request.data.state_key !== undefined) {\n            if (!this.canSendStateEvent(request.data.type, request.data.state_key)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot send state events of this type\" },\n                });\n            }\n\n            if (!isDelayedEvent) {\n                sendEventPromise = this.driver.sendEvent(\n                    request.data.type,\n                    request.data.content || {},\n                    request.data.state_key,\n                    request.data.room_id,\n                );\n            } else {\n                sendEventPromise = this.driver.sendDelayedEvent(\n                    request.data.delay ?? null,\n                    request.data.parent_delay_id ?? null,\n                    request.data.type,\n                    request.data.content || {},\n                    request.data.state_key,\n                    request.data.room_id,\n                );\n            }\n        } else {\n            const content = (request.data.content as { msgtype?: string }) || {};\n            const msgtype = content[\"msgtype\"];\n            if (!this.canSendRoomEvent(request.data.type, msgtype)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot send room events of this type\" },\n                });\n            }\n\n            if (!isDelayedEvent) {\n                sendEventPromise = this.driver.sendEvent(\n                    request.data.type,\n                    content,\n                    null, // not sending a state event\n                    request.data.room_id,\n                );\n            } else {\n                sendEventPromise = this.driver.sendDelayedEvent(\n                    request.data.delay ?? null,\n                    request.data.parent_delay_id ?? null,\n                    request.data.type,\n                    content,\n                    null, // not sending a state event\n                    request.data.room_id,\n                );\n            }\n        }\n\n        sendEventPromise\n            .then((sentEvent) => {\n                return this.transport.reply<ISendEventFromWidgetResponseData>(request, {\n                    room_id: sentEvent.roomId,\n                    ...(\"eventId\" in sentEvent\n                        ? {\n                              event_id: sentEvent.eventId,\n                          }\n                        : {\n                              delay_id: sentEvent.delayId,\n                          }),\n                });\n            })\n            .catch((e: unknown) => {\n                console.error(\"error sending event: \", e);\n                this.handleDriverError(e, request, \"Error sending event\");\n            });\n    }\n\n    private handleUpdateDelayedEvent(request: IUpdateDelayedEventFromWidgetActionRequest): void {\n        if (!request.data.delay_id) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing delay_id\" },\n            });\n        }\n\n        if (!this.hasCapability(MatrixCapabilities.MSC4157UpdateDelayedEvent)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        switch (request.data.action) {\n            case UpdateDelayedEventAction.Cancel:\n            case UpdateDelayedEventAction.Restart:\n            case UpdateDelayedEventAction.Send:\n                this.driver\n                    .updateDelayedEvent(request.data.delay_id, request.data.action)\n                    .then(() => {\n                        return this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n                    })\n                    .catch((e: unknown) => {\n                        console.error(\"error updating delayed event: \", e);\n                        this.handleDriverError(e, request, \"Error updating delayed event\");\n                    });\n                break;\n            default:\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Invalid request - unsupported action\" },\n                });\n        }\n    }\n\n    private async handleSendToDevice(request: ISendToDeviceFromWidgetActionRequest): Promise<void> {\n        if (!request.data.type) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event type\" },\n            });\n        } else if (!request.data.messages) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event contents\" },\n            });\n        } else if (typeof request.data.encrypted !== \"boolean\") {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing encryption flag\" },\n            });\n        } else if (!this.canSendToDeviceEvent(request.data.type)) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Cannot send to-device events of this type\" },\n            });\n        } else {\n            try {\n                await this.driver.sendToDevice(request.data.type, request.data.encrypted, request.data.messages);\n                await this.transport.reply<ISendToDeviceFromWidgetResponseData>(request, {});\n            } catch (e) {\n                console.error(\"error sending to-device event\", e);\n                this.handleDriverError(e, request, \"Error sending event\");\n            }\n        }\n    }\n\n    private async pollTurnServers(turnServers: AsyncGenerator<ITurnServer>, initialServer: ITurnServer): Promise<void> {\n        try {\n            await this.transport.send<IUpdateTurnServersRequestData>(\n                WidgetApiToWidgetAction.UpdateTurnServers,\n                initialServer as IUpdateTurnServersRequestData, // it's compatible, but missing the index signature\n            );\n\n            // Pick the generator up where we left off\n            for await (const server of turnServers) {\n                await this.transport.send<IUpdateTurnServersRequestData>(\n                    WidgetApiToWidgetAction.UpdateTurnServers,\n                    server as IUpdateTurnServersRequestData, // it's compatible, but missing the index signature\n                );\n            }\n        } catch (e) {\n            console.error(\"error polling for TURN servers\", e);\n        }\n    }\n\n    private async handleWatchTurnServers(request: IWatchTurnServersRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC3846TurnServers)) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        } else if (this.turnServers) {\n            // We're already polling, so this is a no-op\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n        } else {\n            try {\n                const turnServers = this.driver.getTurnServers();\n\n                // Peek at the first result, so we can at least verify that the\n                // client isn't banned from getting TURN servers entirely\n                const { done, value } = await turnServers.next();\n                if (done) throw new Error(\"Client refuses to provide any TURN servers\");\n                await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n\n                // Start the poll loop, sending the widget the initial result\n                this.pollTurnServers(turnServers, value);\n                this.turnServers = turnServers;\n            } catch (e) {\n                console.error(\"error getting first TURN server results\", e);\n                await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"TURN servers not available\" },\n                });\n            }\n        }\n    }\n\n    private async handleUnwatchTurnServers(request: IUnwatchTurnServersRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC3846TurnServers)) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        } else if (!this.turnServers) {\n            // We weren't polling anyways, so this is a no-op\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n        } else {\n            // Stop the generator, allowing it to clean up\n            await this.turnServers.return(undefined);\n            this.turnServers = null;\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n        }\n    }\n\n    private async handleReadRelations(request: IReadRelationsFromWidgetActionRequest): Promise<void> {\n        if (!request.data.event_id) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event ID\" },\n            });\n        }\n\n        if (request.data.limit !== undefined && request.data.limit < 0) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - limit out of range\" },\n            });\n        }\n\n        if (request.data.room_id !== undefined && !this.canUseRoomTimeline(request.data.room_id)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: `Unable to access room timeline: ${request.data.room_id}` },\n            });\n        }\n\n        try {\n            const result = await this.driver.readEventRelations(\n                request.data.event_id,\n                request.data.room_id,\n                request.data.rel_type,\n                request.data.event_type,\n                request.data.from,\n                request.data.to,\n                request.data.limit,\n                request.data.direction,\n            );\n\n            // only return events that the user has the permission to receive\n            const chunk = result.chunk.filter((e) => {\n                if (e.state_key !== undefined) {\n                    return this.canReceiveStateEvent(e.type, e.state_key);\n                } else {\n                    return this.canReceiveRoomEvent(e.type, (e.content as { msgtype?: string })[\"msgtype\"]);\n                }\n            });\n\n            return this.transport.reply<IReadRelationsFromWidgetResponseData>(request, {\n                chunk,\n                prev_batch: result.prevBatch,\n                next_batch: result.nextBatch,\n            });\n        } catch (e) {\n            console.error(\"error getting the relations\", e);\n            this.handleDriverError(e, request, \"Unexpected error while reading relations\");\n        }\n    }\n\n    private async handleUserDirectorySearch(request: IUserDirectorySearchFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC3973UserDirectorySearch)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        if (typeof request.data.search_term !== \"string\") {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing search term\" },\n            });\n        }\n\n        if (request.data.limit !== undefined && request.data.limit < 0) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - limit out of range\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.searchUserDirectory(request.data.search_term, request.data.limit);\n\n            return this.transport.reply<IUserDirectorySearchFromWidgetResponseData>(request, {\n                limited: result.limited,\n                results: result.results.map((r) => ({\n                    user_id: r.userId,\n                    display_name: r.displayName,\n                    avatar_url: r.avatarUrl,\n                })),\n            });\n        } catch (e) {\n            console.error(\"error searching in the user directory\", e);\n            this.handleDriverError(e, request, \"Unexpected error while searching in the user directory\");\n        }\n    }\n\n    private async handleGetMediaConfig(request: IGetMediaConfigActionFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC4039UploadFile)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.getMediaConfig();\n\n            return this.transport.reply<IGetMediaConfigActionFromWidgetResponseData>(request, result);\n        } catch (e) {\n            console.error(\"error while getting the media configuration\", e);\n            this.handleDriverError(e, request, \"Unexpected error while getting the media configuration\");\n        }\n    }\n\n    private async handleUploadFile(request: IUploadFileActionFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC4039UploadFile)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.uploadFile(request.data.file);\n\n            return this.transport.reply<IUploadFileActionFromWidgetResponseData>(request, {\n                content_uri: result.contentUri,\n            });\n        } catch (e) {\n            console.error(\"error while uploading a file\", e);\n            this.handleDriverError(e, request, \"Unexpected error while uploading a file\");\n        }\n    }\n\n    private async handleDownloadFile(request: IDownloadFileActionFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC4039DownloadFile)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.downloadFile(request.data.content_uri);\n\n            return this.transport.reply<IDownloadFileActionFromWidgetResponseData>(request, { file: result.file });\n        } catch (e) {\n            console.error(\"error while downloading a file\", e);\n            this.handleDriverError(e, request, \"Unexpected error while downloading a file\");\n        }\n    }\n\n    private handleDriverError(e: unknown, request: IWidgetApiRequest, message: string): void {\n        const data = this.driver.processError(e);\n        this.transport.reply<IWidgetApiErrorResponseData>(request, {\n            error: {\n                message,\n                ...data,\n            },\n        });\n    }\n\n    private handleMessage(ev: CustomEvent<IWidgetApiRequest>): void | Promise<void> {\n        if (this.isStopped) return;\n        const actionEv = new CustomEvent(`action:${ev.detail.action}`, {\n            detail: ev.detail,\n            cancelable: true,\n        });\n        this.emit(`action:${ev.detail.action}`, actionEv);\n        if (!actionEv.defaultPrevented) {\n            switch (ev.detail.action) {\n                case WidgetApiFromWidgetAction.ContentLoaded:\n                    return this.handleContentLoadedAction(<IContentLoadedActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.SupportedApiVersions:\n                    return this.replyVersions(<ISupportedVersionsActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.SendEvent:\n                    return this.handleSendEvent(<ISendEventFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.SendToDevice:\n                    return this.handleSendToDevice(<ISendToDeviceFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.GetOpenIDCredentials:\n                    return this.handleOIDC(<IGetOpenIDActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC2931Navigate:\n                    return this.handleNavigate(<INavigateActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC2974RenegotiateCapabilities:\n                    return this.handleCapabilitiesRenegotiate(<IRenegotiateCapabilitiesActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC2876ReadEvents:\n                    return this.handleReadEvents(<IReadEventFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.WatchTurnServers:\n                    return this.handleWatchTurnServers(<IWatchTurnServersRequest>ev.detail);\n                case WidgetApiFromWidgetAction.UnwatchTurnServers:\n                    return this.handleUnwatchTurnServers(<IUnwatchTurnServersRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC3869ReadRelations:\n                    return this.handleReadRelations(<IReadRelationsFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC3973UserDirectorySearch:\n                    return this.handleUserDirectorySearch(<IUserDirectorySearchFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.BeeperReadRoomAccountData:\n                    return this.handleReadRoomAccountData(<IReadRoomAccountDataFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4039GetMediaConfigAction:\n                    return this.handleGetMediaConfig(<IGetMediaConfigActionFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4039UploadFileAction:\n                    return this.handleUploadFile(<IUploadFileActionFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4039DownloadFileAction:\n                    return this.handleDownloadFile(<IDownloadFileActionFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4157UpdateDelayedEvent:\n                    return this.handleUpdateDelayedEvent(<IUpdateDelayedEventFromWidgetActionRequest>ev.detail);\n\n                default:\n                    return this.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                        error: {\n                            message: \"Unknown or unsupported action: \" + ev.detail.action,\n                        },\n                    });\n            }\n        }\n    }\n\n    /**\n     * Informs the widget that the client's theme has changed.\n     * @param theme The theme data, as an object with arbitrary contents.\n     */\n    public updateTheme(theme: IThemeChangeActionRequestData): Promise<IWidgetApiResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.ThemeChange, theme);\n    }\n\n    /**\n     * Informs the widget that the client's language has changed.\n     * @param lang The BCP 47 identifier representing the client's current language.\n     */\n    public updateLanguage(lang: string): Promise<IWidgetApiResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.LanguageChange, { lang });\n    }\n\n    /**\n     * Takes a screenshot of the widget.\n     * @returns Resolves to the widget's screenshot.\n     * @throws Throws if there is a problem.\n     */\n    public takeScreenshot(): Promise<IScreenshotActionResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.TakeScreenshot, <IWidgetApiRequestEmptyData>{});\n    }\n\n    /**\n     * Alerts the widget to whether or not it is currently visible.\n     * @param {boolean} isVisible Whether the widget is visible or not.\n     * @returns {Promise<IWidgetApiResponseData>} Resolves when the widget acknowledges the update.\n     */\n    public updateVisibility(isVisible: boolean): Promise<IWidgetApiResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.UpdateVisibility, <IVisibilityActionRequestData>{\n            visible: isVisible,\n        });\n    }\n\n    public sendWidgetConfig(data: IModalWidgetOpenRequestData): Promise<void> {\n        return this.transport.send<IModalWidgetOpenRequestData>(WidgetApiToWidgetAction.WidgetConfig, data).then();\n    }\n\n    public notifyModalWidgetButtonClicked(id: IModalWidgetOpenRequestDataButton[\"id\"]): Promise<void> {\n        return this.transport\n            .send<IModalWidgetButtonClickedRequestData>(WidgetApiToWidgetAction.ButtonClicked, { id })\n            .then();\n    }\n\n    public notifyModalWidgetClose(data: IModalWidgetReturnData): Promise<void> {\n        return this.transport.send<IModalWidgetReturnData>(WidgetApiToWidgetAction.CloseModalWidget, data).then();\n    }\n\n    /**\n     * Feeds an event to the widget. As a client you are expected to call this\n     * for every new event in every room to which you are joined or invited.\n     * @param {IRoomEvent} rawEvent The event to (try to) send to the widget.\n     * @param {string} currentViewedRoomId The room ID the user is currently\n     *   interacting with. Not the room ID of the event.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to read the event due to permissions, rejects if the widget failed\n     *   to handle the event.\n     * @deprecated It is recommended to communicate the viewed room ID by calling\n     *   {@link ClientWidgetApi.setViewedRoomId} rather than passing it to this\n     *   method.\n     */\n    public async feedEvent(rawEvent: IRoomEvent, currentViewedRoomId: string): Promise<void>;\n    /**\n     * Feeds an event to the widget. As a client you are expected to call this\n     * for every new event (including state events) in every room to which you are joined or invited.\n     * @param {IRoomEvent} rawEvent The event to (try to) send to the widget.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to read the event due to permissions, rejects if the widget failed\n     *   to handle the event.\n     */\n    public async feedEvent(rawEvent: IRoomEvent): Promise<void>;\n    public async feedEvent(rawEvent: IRoomEvent, currentViewedRoomId?: string): Promise<void> {\n        if (currentViewedRoomId !== undefined) this.setViewedRoomId(currentViewedRoomId);\n        if (rawEvent.room_id !== this.viewedRoomId && !this.canUseRoomTimeline(rawEvent.room_id)) {\n            return; // no-op\n        }\n\n        if (rawEvent.state_key !== undefined && rawEvent.state_key !== null) {\n            // state event\n            if (!this.canReceiveStateEvent(rawEvent.type, rawEvent.state_key)) {\n                return; // no-op\n            }\n        } else {\n            // message event\n            if (!this.canReceiveRoomEvent(rawEvent.type, (rawEvent.content as { msgtype?: string })?.[\"msgtype\"])) {\n                return; // no-op\n            }\n        }\n\n        // Feed the event into the widget\n        await this.transport.send<ISendEventToWidgetRequestData>(\n            WidgetApiToWidgetAction.SendEvent,\n            // it's compatible, but missing the index signature\n            rawEvent as ISendEventToWidgetRequestData,\n        );\n    }\n\n    /**\n     * Feeds a to-device event to the widget. As a client you are expected to\n     * call this for every to-device event you receive.\n     * @param {IRoomEvent} rawEvent The event to (try to) send to the widget.\n     * @param {boolean} encrypted Whether the event contents were encrypted.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to receive the event due to permissions, rejects if the widget\n     *   failed to handle the event.\n     */\n    public async feedToDevice(rawEvent: IRoomEvent, encrypted: boolean): Promise<void> {\n        if (this.canReceiveToDeviceEvent(rawEvent.type)) {\n            await this.transport.send<ISendToDeviceToWidgetRequestData>(\n                WidgetApiToWidgetAction.SendToDevice,\n                // it's compatible, but missing the index signature\n                { ...rawEvent, encrypted } as ISendToDeviceToWidgetRequestData,\n            );\n        }\n    }\n\n    private viewedRoomId: string | null = null;\n\n    /**\n     * Indicate that a room is being viewed (making it possible for the widget\n     * to interact with it).\n     */\n    public setViewedRoomId(roomId: string | null): void {\n        this.viewedRoomId = roomId;\n        // If the widget doesn't have timeline permissions for the room then\n        // this is its opportunity to learn the room state. We push the entire\n        // room state, which could be redundant if this room had been viewed\n        // once before, but it's easier than selectively pushing just the bits\n        // of state that changed while the room was in the background.\n        if (roomId !== null && !this.canUseRoomTimeline(roomId)) this.pushRoomState(roomId);\n    }\n\n    private async flushRoomState(): Promise<void> {\n        try {\n            // Only send a single action once all concurrent tasks have completed\n            do await Promise.all([...this.pushRoomStateTasks]);\n            while (this.pushRoomStateTasks.size > 0);\n\n            const events: IRoomEvent[] = [];\n            for (const eventTypeMap of this.pushRoomStateResult.values()) {\n                for (const stateKeyMap of eventTypeMap.values()) {\n                    events.push(...stateKeyMap.values());\n                }\n            }\n            if ((await this.getWidgetVersions()).includes(UnstableApiVersion.MSC2762_UPDATE_STATE)) {\n                // Only send state updates when using UpdateState. Otherwise the SendEvent action will be responsible for state updates.\n                await this.transport.send<IUpdateStateToWidgetRequestData>(WidgetApiToWidgetAction.UpdateState, {\n                    state: events,\n                });\n            }\n        } finally {\n            this.flushRoomStateTask = null;\n        }\n    }\n\n    /**\n     * Read the room's state and push all entries that the widget is allowed to\n     * read through to the widget.\n     */\n    private pushRoomState(roomId: string): void {\n        for (const cap of this.allowedEvents) {\n            if (cap.kind === EventKind.State && cap.direction === EventDirection.Receive) {\n                // Initiate the task\n                const events = this.driver.readRoomState(roomId, cap.eventType, cap.keyStr ?? undefined);\n                const task = events\n                    .then(\n                        (events) => {\n                            // When complete, queue the resulting events to be\n                            // pushed to the widget\n                            for (const event of events) {\n                                let eventTypeMap = this.pushRoomStateResult.get(roomId);\n                                if (eventTypeMap === undefined) {\n                                    eventTypeMap = new Map();\n                                    this.pushRoomStateResult.set(roomId, eventTypeMap);\n                                }\n                                let stateKeyMap = eventTypeMap.get(cap.eventType);\n                                if (stateKeyMap === undefined) {\n                                    stateKeyMap = new Map();\n                                    eventTypeMap.set(cap.eventType, stateKeyMap);\n                                }\n                                if (!stateKeyMap.has(event.state_key!)) stateKeyMap.set(event.state_key!, event);\n                            }\n                        },\n                        (e) =>\n                            console.error(\n                                `Failed to read room state for ${roomId} (${cap.eventType}, ${cap.keyStr})`,\n                                e,\n                            ),\n                    )\n                    .then(() => {\n                        // Mark request as no longer pending\n                        this.pushRoomStateTasks.delete(task);\n                    });\n\n                // Mark task as pending\n                this.pushRoomStateTasks.add(task);\n                // Assuming no other tasks are already happening concurrently,\n                // schedule the widget action that actually pushes the events\n                this.flushRoomStateTask ??= this.flushRoomState();\n                this.flushRoomStateTask.catch((e) => console.error(\"Failed to push room state\", e));\n            }\n        }\n    }\n\n    /**\n     * Feeds a room state update to the widget. As a client you are expected to\n     * call this for every state update in every room to which you are joined or\n     * invited.\n     * @param {IRoomEvent} rawEvent The state event corresponding to the updated\n     *   room state entry.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to receive the room state due to permissions, rejects if the\n     *   widget failed to handle the update.\n     */\n    public async feedStateUpdate(rawEvent: IRoomEvent): Promise<void> {\n        if (rawEvent.state_key === undefined) throw new Error(\"Not a state event\");\n        if (\n            (rawEvent.room_id === this.viewedRoomId || this.canUseRoomTimeline(rawEvent.room_id)) &&\n            this.canReceiveStateEvent(rawEvent.type, rawEvent.state_key)\n        ) {\n            // Updates could race with the initial push of the room's state\n            if (this.pushRoomStateTasks.size === 0) {\n                // No initial push tasks are pending; safe to send immediately\n                if ((await this.getWidgetVersions()).includes(UnstableApiVersion.MSC2762_UPDATE_STATE)) {\n                    // Only send state updates when using UpdateState. Otherwise the SendEvent action will be responsible for state updates.\n                    await this.transport.send<IUpdateStateToWidgetRequestData>(WidgetApiToWidgetAction.UpdateState, {\n                        state: [rawEvent],\n                    });\n                }\n            } else {\n                // Lump the update in with whatever data will be sent in the\n                // initial push later. Even if we set it to an \"outdated\" entry\n                // here, we can count on any newer entries being passed to this\n                // same method eventually; this won't cause stuck state.\n                let eventTypeMap = this.pushRoomStateResult.get(rawEvent.room_id);\n                if (eventTypeMap === undefined) {\n                    eventTypeMap = new Map();\n                    this.pushRoomStateResult.set(rawEvent.room_id, eventTypeMap);\n                }\n                let stateKeyMap = eventTypeMap.get(rawEvent.type);\n                if (stateKeyMap === undefined) {\n                    stateKeyMap = new Map();\n                    eventTypeMap.set(rawEvent.type, stateKeyMap);\n                }\n                if (!stateKeyMap.has(rawEvent.type)) stateKeyMap.set(rawEvent.state_key, rawEvent);\n                do await Promise.all([...this.pushRoomStateTasks]);\n                while (this.pushRoomStateTasks.size > 0);\n                await this.flushRoomStateTask;\n            }\n        }\n    }\n}\n"],"mappings":"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"}