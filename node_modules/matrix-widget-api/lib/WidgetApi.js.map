{"version":3,"file":"WidgetApi.js","names":["_events","require","_WidgetApiDirection","_ApiVersion","_PostmessageTransport","_WidgetApiAction","_GetOpenIDAction","_WidgetType","_ModalWidgetActions","_WidgetEventCapability","_Symbols","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread","target","source","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_defineProperties","props","descriptor","_createClass","Constructor","protoProps","staticProps","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","_classCallCheck","instance","_inherits","subClass","superClass","_setPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Map","_isNativeFunction","has","get","set","Wrapper","_construct","Parent","bind","a","Function","sham","Proxy","Boolean","valueOf","e","toString","indexOf","o","p","_awaitAsyncGenerator","_OverloadYield","_wrapAsyncGenerator","_AsyncGenerator","front","back","resume","overloaded","v","nextKey","k","settle","request","kind","WidgetApiResponseError","_Error","_super","message","data","_this2","WidgetApi","_EventEmitter","_super2","_this3","widgetId","clientOrigin","window","parent","transport","PostmessageTransport","WidgetApiDirection","FromWidget","targetOrigin","on","handleMessage","hasCapability","capability","Array","isArray","approvedCapabilities","includes","requestedCapabilities","requestCapability","capabilitiesFinished","supportsMSC2974Renegotiate","requestCapabilities","capabilities","_this4","cap","requestCapabilityForRoomTimeline","roomId","concat","requestCapabilityToSendState","eventType","stateKey","WidgetEventCapability","forStateEvent","EventDirection","Send","raw","requestCapabilityToReceiveState","Receive","requestCapabilityToSendToDevice","forToDeviceEvent","requestCapabilityToReceiveToDevice","requestCapabilityToSendEvent","forRoomEvent","requestCapabilityToReceiveEvent","requestCapabilityToSendMessage","msgtype","forRoomMessageEvent","requestCapabilityToReceiveMessage","requestCapabilityToReceiveRoomAccountData","forRoomAccountData","requestOpenIDConnectToken","_this5","sendComplete","WidgetApiFromWidgetAction","GetOpenIDCredentials","response","rdata","OpenIDRequestState","Allowed","Blocked","PendingUserConfirmation","handlerFn","ev","preventDefault","detail","original_request_id","requestId","reply","off","WidgetApiToWidgetAction","OpenIDCredentials","updateRequestedCapabilities","send","MSC2974RenegotiateCapabilities","sendContentLoaded","ContentLoaded","sendSticker","sticker","SendSticker","setAlwaysOnScreen","UpdateAlwaysOnScreen","success","openModalWidget","url","buttons","MatrixWidgetType","Custom","OpenModalWidget","closeModalWidget","CloseModalWidget","sendRoomEvent","content","delay","parentDelayId","sendEvent","sendStateEvent","SendEvent","state_key","room_id","parent_delay_id","updateDelayedEvent","delayId","action","MSC4157UpdateDelayedEvent","delay_id","sendToDevice","encrypted","contentMap","SendToDevice","messages","readRoomAccountData","roomIds","Symbols","AnyRoom","room_ids","BeeperReadRoomAccountData","r","events","readRoomEvents","limit","since","MSC2876ReadEvents","_readEventRelations","_callee","eventId","relationType","from","to","direction","versions","_callee$","_context","getClientVersions","UnstableApiVersion","MSC3869","event_id","rel_type","event_type","MSC3869ReadRelations","readEventRelations","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","readStateEvents","setModalButtonEnabled","buttonId","isEnabled","BuiltInModalButtonID","Close","SetModalButtonEnabled","button","enabled","navigateTo","uri","startsWith","MSC2931Navigate","getTurnServers","_this","_callee3","setTurnServer","onUpdateTurnServers","_callee3$","_context3","_ref","_callee2","_callee2$","_context2","_x9","UpdateTurnServers","turnServerWatchers","WatchTurnServers","t0","UnwatchTurnServers","_searchUserDirectory","_callee4","searchTerm","_callee4$","_context4","MSC3973","search_term","MSC3973UserDirectorySearch","searchUserDirectory","_x10","_x11","_getMediaConfig","_callee5","_callee5$","_context5","MSC4039","MSC4039GetMediaConfigAction","getMediaConfig","_uploadFile","_callee6","file","_callee6$","_context6","MSC4039UploadFileAction","uploadFile","_x12","_downloadFile","_callee7","contentUri","_callee7$","_context7","content_uri","MSC4039DownloadFileAction","downloadFile","_x13","start","_this6","MSC2974","actionEv","CustomEvent","cancelable","emit","defaultPrevented","SupportedApiVersions","replyVersions","Capabilities","handleCapabilities","UpdateVisibility","NotifyCapabilities","supported_versions","CurrentApiVersions","_this7","cachedClientVersions","console","warn","_this8","MSC2871","once","approved","EventEmitter"],"sources":["../src/WidgetApi.ts"],"sourcesContent":["/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\n\nimport { Capability } from \"./interfaces/Capabilities\";\nimport { IWidgetApiRequest, IWidgetApiRequestEmptyData } from \"./interfaces/IWidgetApiRequest\";\nimport { IWidgetApiAcknowledgeResponseData } from \"./interfaces/IWidgetApiResponse\";\nimport { WidgetApiDirection } from \"./interfaces/WidgetApiDirection\";\nimport {\n    ISupportedVersionsActionRequest,\n    ISupportedVersionsActionResponseData,\n} from \"./interfaces/SupportedVersionsAction\";\nimport { ApiVersion, CurrentApiVersions, UnstableApiVersion } from \"./interfaces/ApiVersion\";\nimport {\n    ICapabilitiesActionRequest,\n    ICapabilitiesActionResponseData,\n    INotifyCapabilitiesActionRequest,\n    IRenegotiateCapabilitiesRequestData,\n} from \"./interfaces/CapabilitiesAction\";\nimport { ITransport } from \"./transport/ITransport\";\nimport { PostmessageTransport } from \"./transport/PostmessageTransport\";\nimport { WidgetApiFromWidgetAction, WidgetApiToWidgetAction } from \"./interfaces/WidgetApiAction\";\nimport { IWidgetApiErrorResponseData, IWidgetApiErrorResponseDataDetails } from \"./interfaces/IWidgetApiErrorResponse\";\nimport { IStickerActionRequestData } from \"./interfaces/StickerAction\";\nimport { IStickyActionRequestData, IStickyActionResponseData } from \"./interfaces/StickyAction\";\nimport {\n    IGetOpenIDActionRequestData,\n    IGetOpenIDActionResponse,\n    IOpenIDCredentials,\n    OpenIDRequestState,\n} from \"./interfaces/GetOpenIDAction\";\nimport { IOpenIDCredentialsActionRequest } from \"./interfaces/OpenIDCredentialsAction\";\nimport { MatrixWidgetType, WidgetType } from \"./interfaces/WidgetType\";\nimport {\n    BuiltInModalButtonID,\n    IModalWidgetCreateData,\n    IModalWidgetOpenRequestData,\n    IModalWidgetOpenRequestDataButton,\n    IModalWidgetReturnData,\n    ModalButtonID,\n} from \"./interfaces/ModalWidgetActions\";\nimport { ISetModalButtonEnabledActionRequestData } from \"./interfaces/SetModalButtonEnabledAction\";\nimport { ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData } from \"./interfaces/SendEventAction\";\nimport {\n    ISendToDeviceFromWidgetRequestData,\n    ISendToDeviceFromWidgetResponseData,\n} from \"./interfaces/SendToDeviceAction\";\nimport { EventDirection, WidgetEventCapability } from \"./models/WidgetEventCapability\";\nimport { INavigateActionRequestData } from \"./interfaces/NavigateAction\";\nimport { IReadEventFromWidgetRequestData, IReadEventFromWidgetResponseData } from \"./interfaces/ReadEventAction\";\nimport {\n    IReadRoomAccountDataFromWidgetRequestData,\n    IReadRoomAccountDataFromWidgetResponseData,\n} from \"./interfaces/ReadRoomAccountDataAction\";\nimport { IRoomEvent } from \"./interfaces/IRoomEvent\";\nimport { IRoomAccountData } from \"./interfaces/IRoomAccountData\";\nimport { ITurnServer, IUpdateTurnServersRequest } from \"./interfaces/TurnServerActions\";\nimport { Symbols } from \"./Symbols\";\nimport {\n    IReadRelationsFromWidgetRequestData,\n    IReadRelationsFromWidgetResponseData,\n} from \"./interfaces/ReadRelationsAction\";\nimport {\n    IUserDirectorySearchFromWidgetRequestData,\n    IUserDirectorySearchFromWidgetResponseData,\n} from \"./interfaces/UserDirectorySearchAction\";\nimport {\n    IGetMediaConfigActionFromWidgetRequestData,\n    IGetMediaConfigActionFromWidgetResponseData,\n} from \"./interfaces/GetMediaConfigAction\";\nimport {\n    IUploadFileActionFromWidgetRequestData,\n    IUploadFileActionFromWidgetResponseData,\n} from \"./interfaces/UploadFileAction\";\nimport {\n    IDownloadFileActionFromWidgetRequestData,\n    IDownloadFileActionFromWidgetResponseData,\n} from \"./interfaces/DownloadFileAction\";\nimport {\n    IUpdateDelayedEventFromWidgetRequestData,\n    IUpdateDelayedEventFromWidgetResponseData,\n    UpdateDelayedEventAction,\n} from \"./interfaces/UpdateDelayedEventAction\";\n\nexport class WidgetApiResponseError extends Error {\n    static {\n        this.prototype.name = this.name;\n    }\n\n    public constructor(\n        message: string,\n        public readonly data: IWidgetApiErrorResponseDataDetails,\n    ) {\n        super(message);\n    }\n}\n\n/**\n * API handler for widgets. This raises events for each action\n * received as `action:${action}` (eg: \"action:screenshot\").\n * Default handling can be prevented by using preventDefault()\n * on the raised event. The default handling varies for each\n * action: ones which the SDK can handle safely are acknowledged\n * appropriately and ones which are unhandled (custom or require\n * the widget to do something) are rejected with an error.\n *\n * Events which are preventDefault()ed must reply using the\n * transport. The events raised will have a detail of an\n * IWidgetApiRequest interface.\n *\n * When the WidgetApi is ready to start sending requests, it will\n * raise a \"ready\" CustomEvent. After the ready event fires, actions\n * can be sent and the transport will be ready.\n */\nexport class WidgetApi extends EventEmitter {\n    public readonly transport: ITransport;\n\n    private capabilitiesFinished = false;\n    private supportsMSC2974Renegotiate = false;\n    private requestedCapabilities: Capability[] = [];\n    private approvedCapabilities?: Capability[];\n    private cachedClientVersions?: ApiVersion[];\n    private turnServerWatchers = 0;\n\n    /**\n     * Creates a new API handler for the given widget.\n     * @param {string} widgetId The widget ID to listen for. If not supplied then\n     * the API will use the widget ID from the first valid request it receives.\n     * @param {string} clientOrigin The origin of the client, or null if not known.\n     */\n    public constructor(\n        widgetId: string | null = null,\n        private clientOrigin: string | null = null,\n    ) {\n        super();\n        if (!window.parent) {\n            throw new Error(\"No parent window. This widget doesn't appear to be embedded properly.\");\n        }\n        this.transport = new PostmessageTransport(WidgetApiDirection.FromWidget, widgetId, window.parent, window);\n        this.transport.targetOrigin = clientOrigin;\n        this.transport.on(\"message\", this.handleMessage.bind(this));\n    }\n\n    /**\n     * Determines if the widget was granted a particular capability. Note that on\n     * clients where the capabilities are not fed back to the widget this function\n     * will rely on requested capabilities instead.\n     * @param {Capability} capability The capability to check for approval of.\n     * @returns {boolean} True if the widget has approval for the given capability.\n     */\n    public hasCapability(capability: Capability): boolean {\n        if (Array.isArray(this.approvedCapabilities)) {\n            return this.approvedCapabilities.includes(capability);\n        }\n        return this.requestedCapabilities.includes(capability);\n    }\n\n    /**\n     * Request a capability from the client. It is not guaranteed to be allowed,\n     * but will be asked for.\n     * @param {Capability} capability The capability to request.\n     * @throws Throws if the capabilities negotiation has already started and the\n     * widget is unable to request additional capabilities.\n     */\n    public requestCapability(capability: Capability): void {\n        if (this.capabilitiesFinished && !this.supportsMSC2974Renegotiate) {\n            throw new Error(\"Capabilities have already been negotiated\");\n        }\n\n        this.requestedCapabilities.push(capability);\n    }\n\n    /**\n     * Request capabilities from the client. They are not guaranteed to be allowed,\n     * but will be asked for if the negotiation has not already happened.\n     * @param {Capability[]} capabilities The capabilities to request.\n     * @throws Throws if the capabilities negotiation has already started.\n     */\n    public requestCapabilities(capabilities: Capability[]): void {\n        capabilities.forEach((cap) => this.requestCapability(cap));\n    }\n\n    /**\n     * Requests the capability to interact with rooms other than the user's currently\n     * viewed room. Applies to event receiving and sending.\n     * @param {string | Symbols.AnyRoom} roomId The room ID, or `Symbols.AnyRoom` to\n     * denote all known rooms.\n     */\n    public requestCapabilityForRoomTimeline(roomId: string | Symbols.AnyRoom): void {\n        this.requestCapability(`org.matrix.msc2762.timeline:${roomId}`);\n    }\n\n    /**\n     * Requests the capability to send a given state event with optional explicit\n     * state key. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     * @param {string} stateKey If specified, the specific state key to request.\n     * Otherwise all state keys will be requested.\n     */\n    public requestCapabilityToSendState(eventType: string, stateKey?: string): void {\n        this.requestCapability(WidgetEventCapability.forStateEvent(EventDirection.Send, eventType, stateKey).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given state event with optional explicit\n     * state key. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     * @param {string} stateKey If specified, the specific state key to request.\n     * Otherwise all state keys will be requested.\n     */\n    public requestCapabilityToReceiveState(eventType: string, stateKey?: string): void {\n        this.requestCapability(WidgetEventCapability.forStateEvent(EventDirection.Receive, eventType, stateKey).raw);\n    }\n\n    /**\n     * Requests the capability to send a given to-device event. It is not\n     * guaranteed to be allowed, but will be asked for if the negotiation has\n     * not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToSendToDevice(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forToDeviceEvent(EventDirection.Send, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given to-device event. It is not\n     * guaranteed to be allowed, but will be asked for if the negotiation has\n     * not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToReceiveToDevice(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forToDeviceEvent(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to send a given room event. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToSendEvent(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomEvent(EventDirection.Send, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given room event. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToReceiveEvent(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomEvent(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to send a given message event with optional explicit\n     * `msgtype`. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} msgtype If specified, the specific msgtype to request.\n     * Otherwise all message types will be requested.\n     */\n    public requestCapabilityToSendMessage(msgtype?: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomMessageEvent(EventDirection.Send, msgtype).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given message event with optional explicit\n     * `msgtype`. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} msgtype If specified, the specific msgtype to request.\n     * Otherwise all message types will be requested.\n     */\n    public requestCapabilityToReceiveMessage(msgtype?: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomMessageEvent(EventDirection.Receive, msgtype).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given item in room account data. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     */\n    public requestCapabilityToReceiveRoomAccountData(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomAccountData(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests an OpenID Connect token from the client for the currently logged in\n     * user. This token can be validated server-side with the federation API. Note\n     * that the widget is responsible for validating the token and caching any results\n     * it needs.\n     * @returns {Promise<IOpenIDCredentials>} Resolves to a token for verification.\n     * @throws Throws if the user rejected the request or the request failed.\n     */\n    public requestOpenIDConnectToken(): Promise<IOpenIDCredentials> {\n        return new Promise<IOpenIDCredentials>((resolve, reject) => {\n            this.transport\n                .sendComplete<IGetOpenIDActionRequestData, IGetOpenIDActionResponse>(\n                    WidgetApiFromWidgetAction.GetOpenIDCredentials,\n                    {},\n                )\n                .then((response) => {\n                    const rdata = response.response;\n                    if (rdata.state === OpenIDRequestState.Allowed) {\n                        resolve(rdata);\n                    } else if (rdata.state === OpenIDRequestState.Blocked) {\n                        reject(new Error(\"User declined to verify their identity\"));\n                    } else if (rdata.state === OpenIDRequestState.PendingUserConfirmation) {\n                        const handlerFn = (ev: CustomEvent<IOpenIDCredentialsActionRequest>): void => {\n                            ev.preventDefault();\n                            const request = ev.detail;\n                            if (request.data.original_request_id !== response.requestId) return;\n                            if (request.data.state === OpenIDRequestState.Allowed) {\n                                resolve(request.data);\n                                this.transport.reply(request, <IWidgetApiRequestEmptyData>{}); // ack\n                            } else if (request.data.state === OpenIDRequestState.Blocked) {\n                                reject(new Error(\"User declined to verify their identity\"));\n                                this.transport.reply(request, <IWidgetApiRequestEmptyData>{}); // ack\n                            } else {\n                                reject(new Error(\"Invalid state on reply: \" + rdata.state));\n                                this.transport.reply(request, <IWidgetApiErrorResponseData>{\n                                    error: {\n                                        message: \"Invalid state\",\n                                    },\n                                });\n                            }\n                            this.off(`action:${WidgetApiToWidgetAction.OpenIDCredentials}`, handlerFn);\n                        };\n                        this.on(`action:${WidgetApiToWidgetAction.OpenIDCredentials}`, handlerFn);\n                    } else {\n                        reject(new Error(\"Invalid state: \" + rdata.state));\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Asks the client for additional capabilities. Capabilities can be queued for this\n     * request with the requestCapability() functions.\n     * @returns {Promise<void>} Resolves when complete. Note that the promise resolves when\n     * the capabilities request has gone through, not when the capabilities are approved/denied.\n     * Use the WidgetApiToWidgetAction.NotifyCapabilities action to detect changes.\n     */\n    public updateRequestedCapabilities(): Promise<void> {\n        return this.transport\n            .send(WidgetApiFromWidgetAction.MSC2974RenegotiateCapabilities, <IRenegotiateCapabilitiesRequestData>{\n                capabilities: this.requestedCapabilities,\n            })\n            .then();\n    }\n\n    /**\n     * Tell the client that the content has been loaded.\n     * @returns {Promise} Resolves when the client acknowledges the request.\n     */\n    public sendContentLoaded(): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.ContentLoaded, <IWidgetApiRequestEmptyData>{}).then();\n    }\n\n    /**\n     * Sends a sticker to the client.\n     * @param {IStickerActionRequestData} sticker The sticker to send.\n     * @returns {Promise} Resolves when the client acknowledges the request.\n     */\n    public sendSticker(sticker: IStickerActionRequestData): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.SendSticker, sticker).then();\n    }\n\n    /**\n     * Asks the client to set the always-on-screen status for this widget.\n     * @param {boolean} value The new state to request.\n     * @returns {Promise<boolean>} Resolve with true if the client was able to fulfill\n     * the request, resolves to false otherwise. Rejects if an error occurred.\n     */\n    public setAlwaysOnScreen(value: boolean): Promise<boolean> {\n        return this.transport\n            .send<\n                IStickyActionRequestData,\n                IStickyActionResponseData\n            >(WidgetApiFromWidgetAction.UpdateAlwaysOnScreen, { value })\n            .then((res) => res.success);\n    }\n\n    /**\n     * Opens a modal widget.\n     * @param {string} url The URL to the modal widget.\n     * @param {string} name The name of the widget.\n     * @param {IModalWidgetOpenRequestDataButton[]} buttons The buttons to have on the widget.\n     * @param {IModalWidgetCreateData} data Data to supply to the modal widget.\n     * @param {WidgetType} type The type of modal widget.\n     * @returns {Promise<void>} Resolves when the modal widget has been opened.\n     */\n    public openModalWidget(\n        url: string,\n        name: string,\n        buttons: IModalWidgetOpenRequestDataButton[] = [],\n        data: IModalWidgetCreateData = {},\n        type: WidgetType = MatrixWidgetType.Custom,\n    ): Promise<void> {\n        return this.transport\n            .send<IModalWidgetOpenRequestData>(WidgetApiFromWidgetAction.OpenModalWidget, {\n                type,\n                url,\n                name,\n                buttons,\n                data,\n            })\n            .then();\n    }\n\n    /**\n     * Closes the modal widget. The widget's session will be terminated shortly after.\n     * @param {IModalWidgetReturnData} data Optional data to close the modal widget with.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public closeModalWidget(data: IModalWidgetReturnData = {}): Promise<void> {\n        return this.transport.send<IModalWidgetReturnData>(WidgetApiFromWidgetAction.CloseModalWidget, data).then();\n    }\n\n    public sendRoomEvent(\n        eventType: string,\n        content: unknown,\n        roomId?: string,\n        delay?: number,\n        parentDelayId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.sendEvent(eventType, undefined, content, roomId, delay, parentDelayId);\n    }\n\n    public sendStateEvent(\n        eventType: string,\n        stateKey: string,\n        content: unknown,\n        roomId?: string,\n        delay?: number,\n        parentDelayId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.sendEvent(eventType, stateKey, content, roomId, delay, parentDelayId);\n    }\n\n    private sendEvent(\n        eventType: string,\n        stateKey: string | undefined,\n        content: unknown,\n        roomId?: string,\n        delay?: number,\n        parentDelayId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.transport.send<ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendEvent,\n            {\n                type: eventType,\n                content,\n                ...(stateKey !== undefined && { state_key: stateKey }),\n                ...(roomId !== undefined && { room_id: roomId }),\n                ...(delay !== undefined && { delay }),\n                ...(parentDelayId !== undefined && { parent_delay_id: parentDelayId }),\n            },\n        );\n    }\n\n    /**\n     * @deprecated This currently relies on an unstable MSC (MSC4157).\n     */\n    public updateDelayedEvent(\n        delayId: string,\n        action: UpdateDelayedEventAction,\n    ): Promise<IUpdateDelayedEventFromWidgetResponseData> {\n        return this.transport.send<IUpdateDelayedEventFromWidgetRequestData, IUpdateDelayedEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC4157UpdateDelayedEvent,\n            {\n                delay_id: delayId,\n                action,\n            },\n        );\n    }\n\n    /**\n     * Sends a to-device event.\n     * @param {string} eventType The type of events being sent.\n     * @param {boolean} encrypted Whether to encrypt the message contents.\n     * @param {Object} contentMap A map from user IDs to device IDs to message contents.\n     * @returns {Promise<ISendToDeviceFromWidgetResponseData>} Resolves when complete.\n     */\n    public sendToDevice(\n        eventType: string,\n        encrypted: boolean,\n        contentMap: { [userId: string]: { [deviceId: string]: object } },\n    ): Promise<ISendToDeviceFromWidgetResponseData> {\n        return this.transport.send<ISendToDeviceFromWidgetRequestData, ISendToDeviceFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendToDevice,\n            { type: eventType, encrypted, messages: contentMap },\n        );\n    }\n\n    public readRoomAccountData(eventType: string, roomIds?: (string | Symbols.AnyRoom)[]): Promise<IRoomAccountData[]> {\n        const data: IReadEventFromWidgetRequestData = { type: eventType };\n\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        return this.transport\n            .send<\n                IReadRoomAccountDataFromWidgetRequestData,\n                IReadRoomAccountDataFromWidgetResponseData\n            >(WidgetApiFromWidgetAction.BeeperReadRoomAccountData, data)\n            .then((r) => r.events);\n    }\n\n    public readRoomEvents(\n        eventType: string,\n        limit?: number,\n        msgtype?: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n        since?: string | undefined,\n    ): Promise<IRoomEvent[]> {\n        const data: IReadEventFromWidgetRequestData = { type: eventType, msgtype: msgtype };\n        if (limit !== undefined) {\n            data.limit = limit;\n        }\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        if (since) {\n            data.since = since;\n        }\n        return this.transport\n            .send<\n                IReadEventFromWidgetRequestData,\n                IReadEventFromWidgetResponseData\n            >(WidgetApiFromWidgetAction.MSC2876ReadEvents, data)\n            .then((r) => r.events);\n    }\n\n    /**\n     * Reads all related events given a known eventId.\n     * @param eventId The id of the parent event to be read.\n     * @param roomId The room to look within. When undefined, the user's currently\n     * viewed room.\n     * @param relationType The relationship type of child events to search for.\n     * When undefined, all relations are returned.\n     * @param eventType The event type of child events to search for. When undefined,\n     * all related events are returned.\n     * @param limit The maximum number of events to retrieve per room. If not\n     * supplied, the server will apply a default limit.\n     * @param from The pagination token to start returning results from, as\n     * received from a previous call. If not supplied, results start at the most\n     * recent topological event known to the server.\n     * @param to The pagination token to stop returning results at. If not\n     * supplied, results continue up to limit or until there are no more events.\n     * @param direction The direction to search for according to MSC3715.\n     * @returns Resolves to the room relations.\n     */\n    public async readEventRelations(\n        eventId: string,\n        roomId?: string,\n        relationType?: string,\n        eventType?: string,\n        limit?: number,\n        from?: string,\n        to?: string,\n        direction?: \"f\" | \"b\",\n    ): Promise<IReadRelationsFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC3869)) {\n            throw new Error(\"The read_relations action is not supported by the client.\");\n        }\n\n        const data: IReadRelationsFromWidgetRequestData = {\n            event_id: eventId,\n            rel_type: relationType,\n            event_type: eventType,\n            room_id: roomId,\n            to,\n            from,\n            limit,\n            direction,\n        };\n\n        return this.transport.send<IReadRelationsFromWidgetRequestData, IReadRelationsFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC3869ReadRelations,\n            data,\n        );\n    }\n\n    public readStateEvents(\n        eventType: string,\n        limit?: number,\n        stateKey?: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n    ): Promise<IRoomEvent[]> {\n        const data: IReadEventFromWidgetRequestData = {\n            type: eventType,\n            state_key: stateKey === undefined ? true : stateKey,\n        };\n        if (limit !== undefined) {\n            data.limit = limit;\n        }\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        return this.transport\n            .send<\n                IReadEventFromWidgetRequestData,\n                IReadEventFromWidgetResponseData\n            >(WidgetApiFromWidgetAction.MSC2876ReadEvents, data)\n            .then((r) => r.events);\n    }\n\n    /**\n     * Sets a button as disabled or enabled on the modal widget. Buttons are enabled by default.\n     * @param {ModalButtonID} buttonId The button ID to enable/disable.\n     * @param {boolean} isEnabled Whether or not the button is enabled.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if the button cannot be disabled, or the client refuses to disable the button.\n     */\n    public setModalButtonEnabled(buttonId: ModalButtonID, isEnabled: boolean): Promise<void> {\n        if (buttonId === BuiltInModalButtonID.Close) {\n            throw new Error(\"The close button cannot be disabled\");\n        }\n        return this.transport\n            .send<ISetModalButtonEnabledActionRequestData>(WidgetApiFromWidgetAction.SetModalButtonEnabled, {\n                button: buttonId,\n                enabled: isEnabled,\n            })\n            .then();\n    }\n\n    /**\n     * Attempts to navigate the client to the given URI. This can only be called with Matrix URIs\n     * (currently only matrix.to, but in future a Matrix URI scheme will be defined).\n     * @param {string} uri The URI to navigate to.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if the URI is invalid or cannot be processed.\n     * @deprecated This currently relies on an unstable MSC (MSC2931).\n     */\n    public navigateTo(uri: string): Promise<void> {\n        if (!uri || !uri.startsWith(\"https://matrix.to/#\")) {\n            throw new Error(\"Invalid matrix.to URI\");\n        }\n\n        return this.transport\n            .send<INavigateActionRequestData>(WidgetApiFromWidgetAction.MSC2931Navigate, { uri })\n            .then();\n    }\n\n    /**\n     * Starts watching for TURN servers, yielding an initial set of credentials as soon as possible,\n     * and thereafter yielding new credentials whenever the previous ones expire.\n     * @yields {ITurnServer} The TURN server URIs and credentials currently available to the widget.\n     */\n    public async *getTurnServers(): AsyncGenerator<ITurnServer> {\n        let setTurnServer: (server: ITurnServer) => void;\n\n        const onUpdateTurnServers = async (ev: CustomEvent<IUpdateTurnServersRequest>): Promise<void> => {\n            ev.preventDefault();\n            setTurnServer(ev.detail.data);\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(ev.detail, {});\n        };\n\n        // Start listening for updates before we even start watching, to catch\n        // TURN data that is sent immediately\n        this.on(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n\n        // Only send the 'watch' action if we aren't already watching\n        if (this.turnServerWatchers === 0) {\n            try {\n                await this.transport.send<IWidgetApiRequestEmptyData>(WidgetApiFromWidgetAction.WatchTurnServers, {});\n            } catch (e) {\n                this.off(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n                throw e;\n            }\n        }\n        this.turnServerWatchers++;\n\n        try {\n            // Watch for new data indefinitely (until this generator's return method is called)\n            while (true) {\n                yield await new Promise<ITurnServer>((resolve) => (setTurnServer = resolve));\n            }\n        } finally {\n            // The loop was broken by the caller - clean up\n            this.off(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n\n            // Since sending the 'unwatch' action will end updates for all other\n            // consumers, only send it if we're the only consumer remaining\n            this.turnServerWatchers--;\n            if (this.turnServerWatchers === 0) {\n                await this.transport.send<IWidgetApiRequestEmptyData>(WidgetApiFromWidgetAction.UnwatchTurnServers, {});\n            }\n        }\n    }\n\n    /**\n     * Search for users in the user directory.\n     * @param searchTerm The term to search for.\n     * @param limit The maximum number of results to return. If not supplied, the\n     * @returns Resolves to the search results.\n     */\n    public async searchUserDirectory(\n        searchTerm: string,\n        limit?: number,\n    ): Promise<IUserDirectorySearchFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC3973)) {\n            throw new Error(\"The user_directory_search action is not supported by the client.\");\n        }\n\n        const data: IUserDirectorySearchFromWidgetRequestData = {\n            search_term: searchTerm,\n            limit,\n        };\n\n        return this.transport.send<\n            IUserDirectorySearchFromWidgetRequestData,\n            IUserDirectorySearchFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC3973UserDirectorySearch, data);\n    }\n\n    /**\n     * Get the config for the media repository.\n     * @returns Promise which resolves with an object containing the config.\n     */\n    public async getMediaConfig(): Promise<IGetMediaConfigActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The get_media_config action is not supported by the client.\");\n        }\n\n        const data: IGetMediaConfigActionFromWidgetRequestData = {};\n\n        return this.transport.send<\n            IGetMediaConfigActionFromWidgetRequestData,\n            IGetMediaConfigActionFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC4039GetMediaConfigAction, data);\n    }\n\n    /**\n     * Upload a file to the media repository on the homeserver.\n     * @param file - The object to upload. Something that can be sent to\n     *               XMLHttpRequest.send (typically a File).\n     * @returns Resolves to the location of the uploaded file.\n     */\n    public async uploadFile(file: XMLHttpRequestBodyInit): Promise<IUploadFileActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The upload_file action is not supported by the client.\");\n        }\n\n        const data: IUploadFileActionFromWidgetRequestData = {\n            file,\n        };\n\n        return this.transport.send<IUploadFileActionFromWidgetRequestData, IUploadFileActionFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC4039UploadFileAction,\n            data,\n        );\n    }\n\n    /**\n     * Download a file from the media repository on the homeserver.\n     * @param contentUri - MXC URI of the file to download.\n     * @returns Resolves to the contents of the file.\n     */\n    public async downloadFile(contentUri: string): Promise<IDownloadFileActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The download_file action is not supported by the client.\");\n        }\n\n        const data: IDownloadFileActionFromWidgetRequestData = {\n            content_uri: contentUri,\n        };\n\n        return this.transport.send<IDownloadFileActionFromWidgetRequestData, IDownloadFileActionFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC4039DownloadFileAction,\n            data,\n        );\n    }\n\n    /**\n     * Starts the communication channel. This should be done early to ensure\n     * that messages are not missed. Communication can only be stopped by the client.\n     */\n    public start(): void {\n        this.transport.start();\n        this.getClientVersions().then((v) => {\n            if (v.includes(UnstableApiVersion.MSC2974)) {\n                this.supportsMSC2974Renegotiate = true;\n            }\n        });\n    }\n\n    private handleMessage(ev: CustomEvent<IWidgetApiRequest>): void | Promise<void> {\n        const actionEv = new CustomEvent(`action:${ev.detail.action}`, {\n            detail: ev.detail,\n            cancelable: true,\n        });\n        this.emit(`action:${ev.detail.action}`, actionEv);\n        if (!actionEv.defaultPrevented) {\n            switch (ev.detail.action) {\n                case WidgetApiToWidgetAction.SupportedApiVersions:\n                    return this.replyVersions(<ISupportedVersionsActionRequest>ev.detail);\n                case WidgetApiToWidgetAction.Capabilities:\n                    return this.handleCapabilities(<ICapabilitiesActionRequest>ev.detail);\n                case WidgetApiToWidgetAction.UpdateVisibility:\n                    return this.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack to avoid error spam\n                case WidgetApiToWidgetAction.NotifyCapabilities:\n                    return this.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack to avoid error spam\n                default:\n                    return this.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                        error: {\n                            message: \"Unknown or unsupported action: \" + ev.detail.action,\n                        },\n                    });\n            }\n        }\n    }\n\n    private replyVersions(request: ISupportedVersionsActionRequest): void {\n        this.transport.reply<ISupportedVersionsActionResponseData>(request, {\n            supported_versions: CurrentApiVersions,\n        });\n    }\n\n    public getClientVersions(): Promise<ApiVersion[]> {\n        if (Array.isArray(this.cachedClientVersions)) {\n            return Promise.resolve(this.cachedClientVersions);\n        }\n\n        return this.transport\n            .send<IWidgetApiRequestEmptyData, ISupportedVersionsActionResponseData>(\n                WidgetApiFromWidgetAction.SupportedApiVersions,\n                {},\n            )\n            .then((r) => {\n                this.cachedClientVersions = r.supported_versions;\n                return r.supported_versions;\n            })\n            .catch((e) => {\n                console.warn(\"non-fatal error getting supported client versions: \", e);\n                return [];\n            });\n    }\n\n    private handleCapabilities(request: ICapabilitiesActionRequest): void | Promise<void> {\n        if (this.capabilitiesFinished) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: {\n                    message: \"Capability negotiation already completed\",\n                },\n            });\n        }\n\n        // See if we can expect a capabilities notification or not\n        return this.getClientVersions().then((v) => {\n            if (v.includes(UnstableApiVersion.MSC2871)) {\n                this.once(\n                    `action:${WidgetApiToWidgetAction.NotifyCapabilities}`,\n                    (ev: CustomEvent<INotifyCapabilitiesActionRequest>) => {\n                        this.approvedCapabilities = ev.detail.data.approved;\n                        this.emit(\"ready\");\n                    },\n                );\n            } else {\n                // if we can't expect notification, we're as done as we can be\n                this.emit(\"ready\");\n            }\n\n            // in either case, reply to that capabilities request\n            this.capabilitiesFinished = true;\n            return this.transport.reply<ICapabilitiesActionResponseData>(request, {\n                capabilities: this.requestedCapabilities,\n            });\n        });\n    }\n}\n"],"mappings":";;;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AAKA,IAAAC,mBAAA,GAAAD,OAAA;AAKA,IAAAE,WAAA,GAAAF,OAAA;AAQA,IAAAG,qBAAA,GAAAH,OAAA;AACA,IAAAI,gBAAA,GAAAJ,OAAA;AAIA,IAAAK,gBAAA,GAAAL,OAAA;AAOA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,mBAAA,GAAAP,OAAA;AAcA,IAAAQ,sBAAA,GAAAR,OAAA;AAUA,IAAAS,QAAA,GAAAT,OAAA;AAAoC,SAAAU,oBAAA,kBAtEpC,qJAAAA,mBAAA,YAAAA,oBAAA,WAAAC,OAAA,SAAAA,OAAA,OAAAC,EAAA,GAAAC,MAAA,CAAAC,SAAA,EAAAC,MAAA,GAAAH,EAAA,CAAAI,cAAA,EAAAC,cAAA,GAAAJ,MAAA,CAAAI,cAAA,cAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA,IAAAF,GAAA,CAAAC,GAAA,IAAAC,IAAA,CAAAC,KAAA,KAAAC,OAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,cAAA,GAAAF,OAAA,CAAAG,QAAA,kBAAAC,mBAAA,GAAAJ,OAAA,CAAAK,aAAA,uBAAAC,iBAAA,GAAAN,OAAA,CAAAO,WAAA,8BAAAC,OAAAZ,GAAA,EAAAC,GAAA,EAAAE,KAAA,WAAAR,MAAA,CAAAI,cAAA,CAAAC,GAAA,EAAAC,GAAA,IAAAE,KAAA,EAAAA,KAAA,EAAAU,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAAf,GAAA,CAAAC,GAAA,WAAAW,MAAA,mBAAAI,GAAA,IAAAJ,MAAA,YAAAA,OAAAZ,GAAA,EAAAC,GAAA,EAAAE,KAAA,WAAAH,GAAA,CAAAC,GAAA,IAAAE,KAAA,gBAAAc,KAAAC,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,QAAAC,cAAA,GAAAH,OAAA,IAAAA,OAAA,CAAAvB,SAAA,YAAA2B,SAAA,GAAAJ,OAAA,GAAAI,SAAA,EAAAC,SAAA,GAAA7B,MAAA,CAAA8B,MAAA,CAAAH,cAAA,CAAA1B,SAAA,GAAA8B,OAAA,OAAAC,OAAA,CAAAN,WAAA,gBAAAtB,cAAA,CAAAyB,SAAA,eAAArB,KAAA,EAAAyB,gBAAA,CAAAV,OAAA,EAAAE,IAAA,EAAAM,OAAA,MAAAF,SAAA,aAAAK,SAAAC,EAAA,EAAA9B,GAAA,EAAA+B,GAAA,mBAAAC,IAAA,YAAAD,GAAA,EAAAD,EAAA,CAAAG,IAAA,CAAAjC,GAAA,EAAA+B,GAAA,cAAAf,GAAA,aAAAgB,IAAA,WAAAD,GAAA,EAAAf,GAAA,QAAAvB,OAAA,CAAAwB,IAAA,GAAAA,IAAA,MAAAiB,gBAAA,gBAAAX,UAAA,cAAAY,kBAAA,cAAAC,2BAAA,SAAAC,iBAAA,OAAAzB,MAAA,CAAAyB,iBAAA,EAAA/B,cAAA,qCAAAgC,QAAA,GAAA3C,MAAA,CAAA4C,cAAA,EAAAC,uBAAA,GAAAF,QAAA,IAAAA,QAAA,CAAAA,QAAA,CAAAG,MAAA,QAAAD,uBAAA,IAAAA,uBAAA,KAAA9C,EAAA,IAAAG,MAAA,CAAAoC,IAAA,CAAAO,uBAAA,EAAAlC,cAAA,MAAA+B,iBAAA,GAAAG,uBAAA,OAAAE,EAAA,GAAAN,0BAAA,CAAAxC,SAAA,GAAA2B,SAAA,CAAA3B,SAAA,GAAAD,MAAA,CAAA8B,MAAA,CAAAY,iBAAA,YAAAM,sBAAA/C,SAAA,gCAAAgD,OAAA,WAAAC,MAAA,IAAAjC,MAAA,CAAAhB,SAAA,EAAAiD,MAAA,YAAAd,GAAA,gBAAAe,OAAA,CAAAD,MAAA,EAAAd,GAAA,sBAAAgB,cAAAvB,SAAA,EAAAwB,WAAA,aAAAC,OAAAJ,MAAA,EAAAd,GAAA,EAAAmB,OAAA,EAAAC,MAAA,QAAAC,MAAA,GAAAvB,QAAA,CAAAL,SAAA,CAAAqB,MAAA,GAAArB,SAAA,EAAAO,GAAA,mBAAAqB,MAAA,CAAApB,IAAA,QAAAqB,MAAA,GAAAD,MAAA,CAAArB,GAAA,EAAA5B,KAAA,GAAAkD,MAAA,CAAAlD,KAAA,SAAAA,KAAA,gBAAAmD,OAAA,CAAAnD,KAAA,KAAAN,MAAA,CAAAoC,IAAA,CAAA9B,KAAA,eAAA6C,WAAA,CAAAE,OAAA,CAAA/C,KAAA,CAAAoD,OAAA,EAAAC,IAAA,WAAArD,KAAA,IAAA8C,MAAA,SAAA9C,KAAA,EAAA+C,OAAA,EAAAC,MAAA,gBAAAnC,GAAA,IAAAiC,MAAA,UAAAjC,GAAA,EAAAkC,OAAA,EAAAC,MAAA,QAAAH,WAAA,CAAAE,OAAA,CAAA/C,KAAA,EAAAqD,IAAA,WAAAC,SAAA,IAAAJ,MAAA,CAAAlD,KAAA,GAAAsD,SAAA,EAAAP,OAAA,CAAAG,MAAA,gBAAAK,KAAA,WAAAT,MAAA,UAAAS,KAAA,EAAAR,OAAA,EAAAC,MAAA,SAAAA,MAAA,CAAAC,MAAA,CAAArB,GAAA,SAAA4B,eAAA,EAAA5D,cAAA,oBAAAI,KAAA,WAAAA,MAAA0C,MAAA,EAAAd,GAAA,aAAA6B,2BAAA,eAAAZ,WAAA,WAAAE,OAAA,EAAAC,MAAA,IAAAF,MAAA,CAAAJ,MAAA,EAAAd,GAAA,EAAAmB,OAAA,EAAAC,MAAA,gBAAAQ,eAAA,GAAAA,eAAA,GAAAA,eAAA,CAAAH,IAAA,CAAAI,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAAhC,iBAAAV,OAAA,EAAAE,IAAA,EAAAM,OAAA,QAAAmC,KAAA,sCAAAhB,MAAA,EAAAd,GAAA,wBAAA8B,KAAA,YAAAC,KAAA,sDAAAD,KAAA,oBAAAhB,MAAA,QAAAd,GAAA,SAAAgC,UAAA,WAAArC,OAAA,CAAAmB,MAAA,GAAAA,MAAA,EAAAnB,OAAA,CAAAK,GAAA,GAAAA,GAAA,UAAAiC,QAAA,GAAAtC,OAAA,CAAAsC,QAAA,MAAAA,QAAA,QAAAC,cAAA,GAAAC,mBAAA,CAAAF,QAAA,EAAAtC,OAAA,OAAAuC,cAAA,QAAAA,cAAA,KAAA/B,gBAAA,mBAAA+B,cAAA,qBAAAvC,OAAA,CAAAmB,MAAA,EAAAnB,OAAA,CAAAyC,IAAA,GAAAzC,OAAA,CAAA0C,KAAA,GAAA1C,OAAA,CAAAK,GAAA,sBAAAL,OAAA,CAAAmB,MAAA,6BAAAgB,KAAA,QAAAA,KAAA,gBAAAnC,OAAA,CAAAK,GAAA,EAAAL,OAAA,CAAA2C,iBAAA,CAAA3C,OAAA,CAAAK,GAAA,uBAAAL,OAAA,CAAAmB,MAAA,IAAAnB,OAAA,CAAA4C,MAAA,WAAA5C,OAAA,CAAAK,GAAA,GAAA8B,KAAA,oBAAAT,MAAA,GAAAvB,QAAA,CAAAX,OAAA,EAAAE,IAAA,EAAAM,OAAA,oBAAA0B,MAAA,CAAApB,IAAA,QAAA6B,KAAA,GAAAnC,OAAA,CAAA6C,IAAA,mCAAAnB,MAAA,CAAArB,GAAA,KAAAG,gBAAA,qBAAA/B,KAAA,EAAAiD,MAAA,CAAArB,GAAA,EAAAwC,IAAA,EAAA7C,OAAA,CAAA6C,IAAA,kBAAAnB,MAAA,CAAApB,IAAA,KAAA6B,KAAA,gBAAAnC,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,GAAAqB,MAAA,CAAArB,GAAA,mBAAAmC,oBAAAF,QAAA,EAAAtC,OAAA,QAAA8C,UAAA,GAAA9C,OAAA,CAAAmB,MAAA,EAAAA,MAAA,GAAAmB,QAAA,CAAAzD,QAAA,CAAAiE,UAAA,OAAAC,SAAA,KAAA5B,MAAA,SAAAnB,OAAA,CAAAsC,QAAA,qBAAAQ,UAAA,IAAAR,QAAA,CAAAzD,QAAA,eAAAmB,OAAA,CAAAmB,MAAA,aAAAnB,OAAA,CAAAK,GAAA,GAAA0C,SAAA,EAAAP,mBAAA,CAAAF,QAAA,EAAAtC,OAAA,eAAAA,OAAA,CAAAmB,MAAA,kBAAA2B,UAAA,KAAA9C,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,OAAA2C,SAAA,uCAAAF,UAAA,iBAAAtC,gBAAA,MAAAkB,MAAA,GAAAvB,QAAA,CAAAgB,MAAA,EAAAmB,QAAA,CAAAzD,QAAA,EAAAmB,OAAA,CAAAK,GAAA,mBAAAqB,MAAA,CAAApB,IAAA,SAAAN,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,GAAAqB,MAAA,CAAArB,GAAA,EAAAL,OAAA,CAAAsC,QAAA,SAAA9B,gBAAA,MAAAyC,IAAA,GAAAvB,MAAA,CAAArB,GAAA,SAAA4C,IAAA,GAAAA,IAAA,CAAAJ,IAAA,IAAA7C,OAAA,CAAAsC,QAAA,CAAAY,UAAA,IAAAD,IAAA,CAAAxE,KAAA,EAAAuB,OAAA,CAAAmD,IAAA,GAAAb,QAAA,CAAAc,OAAA,eAAApD,OAAA,CAAAmB,MAAA,KAAAnB,OAAA,CAAAmB,MAAA,WAAAnB,OAAA,CAAAK,GAAA,GAAA0C,SAAA,GAAA/C,OAAA,CAAAsC,QAAA,SAAA9B,gBAAA,IAAAyC,IAAA,IAAAjD,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,OAAA2C,SAAA,sCAAAhD,OAAA,CAAAsC,QAAA,SAAA9B,gBAAA,cAAA6C,aAAAC,IAAA,QAAAC,KAAA,KAAAC,MAAA,EAAAF,IAAA,YAAAA,IAAA,KAAAC,KAAA,CAAAE,QAAA,GAAAH,IAAA,WAAAA,IAAA,KAAAC,KAAA,CAAAG,UAAA,GAAAJ,IAAA,KAAAC,KAAA,CAAAI,QAAA,GAAAL,IAAA,WAAAM,UAAA,CAAAC,IAAA,CAAAN,KAAA,cAAAO,cAAAP,KAAA,QAAA7B,MAAA,GAAA6B,KAAA,CAAAQ,UAAA,QAAArC,MAAA,CAAApB,IAAA,oBAAAoB,MAAA,CAAArB,GAAA,EAAAkD,KAAA,CAAAQ,UAAA,GAAArC,MAAA,aAAAzB,QAAAN,WAAA,SAAAiE,UAAA,MAAAJ,MAAA,aAAA7D,WAAA,CAAAuB,OAAA,CAAAmC,YAAA,cAAAW,KAAA,iBAAAjD,OAAAkD,QAAA,QAAAA,QAAA,QAAAC,cAAA,GAAAD,QAAA,CAAArF,cAAA,OAAAsF,cAAA,SAAAA,cAAA,CAAA3D,IAAA,CAAA0D,QAAA,4BAAAA,QAAA,CAAAd,IAAA,SAAAc,QAAA,OAAAE,KAAA,CAAAF,QAAA,CAAAG,MAAA,SAAAC,CAAA,OAAAlB,IAAA,YAAAA,KAAA,aAAAkB,CAAA,GAAAJ,QAAA,CAAAG,MAAA,OAAAjG,MAAA,CAAAoC,IAAA,CAAA0D,QAAA,EAAAI,CAAA,UAAAlB,IAAA,CAAA1E,KAAA,GAAAwF,QAAA,CAAAI,CAAA,GAAAlB,IAAA,CAAAN,IAAA,OAAAM,IAAA,SAAAA,IAAA,CAAA1E,KAAA,GAAAsE,SAAA,EAAAI,IAAA,CAAAN,IAAA,OAAAM,IAAA,YAAAA,IAAA,CAAAA,IAAA,GAAAA,IAAA,eAAAA,IAAA,EAAAd,UAAA,eAAAA,WAAA,aAAA5D,KAAA,EAAAsE,SAAA,EAAAF,IAAA,iBAAApC,iBAAA,CAAAvC,SAAA,GAAAwC,0BAAA,EAAArC,cAAA,CAAA2C,EAAA,mBAAAvC,KAAA,EAAAiC,0BAAA,EAAAtB,YAAA,SAAAf,cAAA,CAAAqC,0BAAA,mBAAAjC,KAAA,EAAAgC,iBAAA,EAAArB,YAAA,SAAAqB,iBAAA,CAAA6D,WAAA,GAAApF,MAAA,CAAAwB,0BAAA,EAAA1B,iBAAA,wBAAAjB,OAAA,CAAAwG,mBAAA,aAAAC,MAAA,QAAAC,IAAA,wBAAAD,MAAA,IAAAA,MAAA,CAAAE,WAAA,WAAAD,IAAA,KAAAA,IAAA,KAAAhE,iBAAA,6BAAAgE,IAAA,CAAAH,WAAA,IAAAG,IAAA,CAAAE,IAAA,OAAA5G,OAAA,CAAA6G,IAAA,aAAAJ,MAAA,WAAAvG,MAAA,CAAA4G,cAAA,GAAA5G,MAAA,CAAA4G,cAAA,CAAAL,MAAA,EAAA9D,0BAAA,KAAA8D,MAAA,CAAAM,SAAA,GAAApE,0BAAA,EAAAxB,MAAA,CAAAsF,MAAA,EAAAxF,iBAAA,yBAAAwF,MAAA,CAAAtG,SAAA,GAAAD,MAAA,CAAA8B,MAAA,CAAAiB,EAAA,GAAAwD,MAAA,KAAAzG,OAAA,CAAAgH,KAAA,aAAA1E,GAAA,aAAAwB,OAAA,EAAAxB,GAAA,OAAAY,qBAAA,CAAAI,aAAA,CAAAnD,SAAA,GAAAgB,MAAA,CAAAmC,aAAA,CAAAnD,SAAA,EAAAY,mBAAA,iCAAAf,OAAA,CAAAsD,aAAA,GAAAA,aAAA,EAAAtD,OAAA,CAAAiH,KAAA,aAAAxF,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,EAAA2B,WAAA,eAAAA,WAAA,KAAAA,WAAA,GAAA2D,OAAA,OAAAC,IAAA,OAAA7D,aAAA,CAAA9B,IAAA,CAAAC,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,GAAA2B,WAAA,UAAAvD,OAAA,CAAAwG,mBAAA,CAAA9E,OAAA,IAAAyF,IAAA,GAAAA,IAAA,CAAA/B,IAAA,GAAArB,IAAA,WAAAH,MAAA,WAAAA,MAAA,CAAAkB,IAAA,GAAAlB,MAAA,CAAAlD,KAAA,GAAAyG,IAAA,CAAA/B,IAAA,WAAAlC,qBAAA,CAAAD,EAAA,GAAA9B,MAAA,CAAA8B,EAAA,EAAAhC,iBAAA,gBAAAE,MAAA,CAAA8B,EAAA,EAAApC,cAAA,iCAAAM,MAAA,CAAA8B,EAAA,6DAAAjD,OAAA,CAAAoH,IAAA,aAAAC,GAAA,QAAAC,MAAA,GAAApH,MAAA,CAAAmH,GAAA,GAAAD,IAAA,gBAAA5G,GAAA,IAAA8G,MAAA,EAAAF,IAAA,CAAAtB,IAAA,CAAAtF,GAAA,UAAA4G,IAAA,CAAAG,OAAA,aAAAnC,KAAA,WAAAgC,IAAA,CAAAf,MAAA,SAAA7F,GAAA,GAAA4G,IAAA,CAAAI,GAAA,QAAAhH,GAAA,IAAA8G,MAAA,SAAAlC,IAAA,CAAA1E,KAAA,GAAAF,GAAA,EAAA4E,IAAA,CAAAN,IAAA,OAAAM,IAAA,WAAAA,IAAA,CAAAN,IAAA,OAAAM,IAAA,QAAApF,OAAA,CAAAgD,MAAA,GAAAA,MAAA,EAAAd,OAAA,CAAA/B,SAAA,KAAAwG,WAAA,EAAAzE,OAAA,EAAA+D,KAAA,WAAAA,MAAAwB,aAAA,aAAAC,IAAA,WAAAtC,IAAA,WAAAV,IAAA,QAAAC,KAAA,GAAAK,SAAA,OAAAF,IAAA,YAAAP,QAAA,cAAAnB,MAAA,gBAAAd,GAAA,GAAA0C,SAAA,OAAAa,UAAA,CAAA1C,OAAA,CAAA4C,aAAA,IAAA0B,aAAA,WAAAb,IAAA,kBAAAA,IAAA,CAAAe,MAAA,OAAAvH,MAAA,CAAAoC,IAAA,OAAAoE,IAAA,MAAAR,KAAA,EAAAQ,IAAA,CAAAgB,KAAA,cAAAhB,IAAA,IAAA5B,SAAA,MAAA6C,IAAA,WAAAA,KAAA,SAAA/C,IAAA,WAAAgD,UAAA,QAAAjC,UAAA,IAAAG,UAAA,kBAAA8B,UAAA,CAAAvF,IAAA,QAAAuF,UAAA,CAAAxF,GAAA,cAAAyF,IAAA,KAAAnD,iBAAA,WAAAA,kBAAAoD,SAAA,aAAAlD,IAAA,QAAAkD,SAAA,MAAA/F,OAAA,kBAAAgG,OAAAC,GAAA,EAAAC,MAAA,WAAAxE,MAAA,CAAApB,IAAA,YAAAoB,MAAA,CAAArB,GAAA,GAAA0F,SAAA,EAAA/F,OAAA,CAAAmD,IAAA,GAAA8C,GAAA,EAAAC,MAAA,KAAAlG,OAAA,CAAAmB,MAAA,WAAAnB,OAAA,CAAAK,GAAA,GAAA0C,SAAA,KAAAmD,MAAA,aAAA7B,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,GAAA3C,MAAA,GAAA6B,KAAA,CAAAQ,UAAA,iBAAAR,KAAA,CAAAC,MAAA,SAAAwC,MAAA,aAAAzC,KAAA,CAAAC,MAAA,SAAAiC,IAAA,QAAAU,QAAA,GAAAhI,MAAA,CAAAoC,IAAA,CAAAgD,KAAA,eAAA6C,UAAA,GAAAjI,MAAA,CAAAoC,IAAA,CAAAgD,KAAA,qBAAA4C,QAAA,IAAAC,UAAA,aAAAX,IAAA,GAAAlC,KAAA,CAAAE,QAAA,SAAAuC,MAAA,CAAAzC,KAAA,CAAAE,QAAA,gBAAAgC,IAAA,GAAAlC,KAAA,CAAAG,UAAA,SAAAsC,MAAA,CAAAzC,KAAA,CAAAG,UAAA,cAAAyC,QAAA,aAAAV,IAAA,GAAAlC,KAAA,CAAAE,QAAA,SAAAuC,MAAA,CAAAzC,KAAA,CAAAE,QAAA,qBAAA2C,UAAA,YAAAhE,KAAA,qDAAAqD,IAAA,GAAAlC,KAAA,CAAAG,UAAA,SAAAsC,MAAA,CAAAzC,KAAA,CAAAG,UAAA,YAAAd,MAAA,WAAAA,OAAAtC,IAAA,EAAAD,GAAA,aAAAgE,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,OAAAd,KAAA,CAAAC,MAAA,SAAAiC,IAAA,IAAAtH,MAAA,CAAAoC,IAAA,CAAAgD,KAAA,wBAAAkC,IAAA,GAAAlC,KAAA,CAAAG,UAAA,QAAA2C,YAAA,GAAA9C,KAAA,aAAA8C,YAAA,iBAAA/F,IAAA,mBAAAA,IAAA,KAAA+F,YAAA,CAAA7C,MAAA,IAAAnD,GAAA,IAAAA,GAAA,IAAAgG,YAAA,CAAA3C,UAAA,KAAA2C,YAAA,cAAA3E,MAAA,GAAA2E,YAAA,GAAAA,YAAA,CAAAtC,UAAA,cAAArC,MAAA,CAAApB,IAAA,GAAAA,IAAA,EAAAoB,MAAA,CAAArB,GAAA,GAAAA,GAAA,EAAAgG,YAAA,SAAAlF,MAAA,gBAAAgC,IAAA,GAAAkD,YAAA,CAAA3C,UAAA,EAAAlD,gBAAA,SAAA8F,QAAA,CAAA5E,MAAA,MAAA4E,QAAA,WAAAA,SAAA5E,MAAA,EAAAiC,QAAA,oBAAAjC,MAAA,CAAApB,IAAA,QAAAoB,MAAA,CAAArB,GAAA,qBAAAqB,MAAA,CAAApB,IAAA,mBAAAoB,MAAA,CAAApB,IAAA,QAAA6C,IAAA,GAAAzB,MAAA,CAAArB,GAAA,gBAAAqB,MAAA,CAAApB,IAAA,SAAAwF,IAAA,QAAAzF,GAAA,GAAAqB,MAAA,CAAArB,GAAA,OAAAc,MAAA,kBAAAgC,IAAA,yBAAAzB,MAAA,CAAApB,IAAA,IAAAqD,QAAA,UAAAR,IAAA,GAAAQ,QAAA,GAAAnD,gBAAA,KAAA+F,MAAA,WAAAA,OAAA7C,UAAA,aAAAW,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,OAAAd,KAAA,CAAAG,UAAA,KAAAA,UAAA,cAAA4C,QAAA,CAAA/C,KAAA,CAAAQ,UAAA,EAAAR,KAAA,CAAAI,QAAA,GAAAG,aAAA,CAAAP,KAAA,GAAA/C,gBAAA,yBAAAgG,OAAAhD,MAAA,aAAAa,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,OAAAd,KAAA,CAAAC,MAAA,KAAAA,MAAA,QAAA9B,MAAA,GAAA6B,KAAA,CAAAQ,UAAA,kBAAArC,MAAA,CAAApB,IAAA,QAAAmG,MAAA,GAAA/E,MAAA,CAAArB,GAAA,EAAAyD,aAAA,CAAAP,KAAA,YAAAkD,MAAA,gBAAArE,KAAA,8BAAAsE,aAAA,WAAAA,cAAAzC,QAAA,EAAAf,UAAA,EAAAE,OAAA,gBAAAd,QAAA,KAAAzD,QAAA,EAAAkC,MAAA,CAAAkD,QAAA,GAAAf,UAAA,EAAAA,UAAA,EAAAE,OAAA,EAAAA,OAAA,oBAAAjC,MAAA,UAAAd,GAAA,GAAA0C,SAAA,GAAAvC,gBAAA,OAAAzC,OAAA;AAAA,SAAA4I,mBAAAC,GAAA,EAAApF,OAAA,EAAAC,MAAA,EAAAoF,KAAA,EAAAC,MAAA,EAAAvI,GAAA,EAAA8B,GAAA,cAAA4C,IAAA,GAAA2D,GAAA,CAAArI,GAAA,EAAA8B,GAAA,OAAA5B,KAAA,GAAAwE,IAAA,CAAAxE,KAAA,WAAAuD,KAAA,IAAAP,MAAA,CAAAO,KAAA,iBAAAiB,IAAA,CAAAJ,IAAA,IAAArB,OAAA,CAAA/C,KAAA,YAAAwG,OAAA,CAAAzD,OAAA,CAAA/C,KAAA,EAAAqD,IAAA,CAAA+E,KAAA,EAAAC,MAAA;AAAA,SAAAC,kBAAA3G,EAAA,6BAAAV,IAAA,SAAAsH,IAAA,GAAAC,SAAA,aAAAhC,OAAA,WAAAzD,OAAA,EAAAC,MAAA,QAAAmF,GAAA,GAAAxG,EAAA,CAAA8G,KAAA,CAAAxH,IAAA,EAAAsH,IAAA,YAAAH,MAAApI,KAAA,IAAAkI,kBAAA,CAAAC,GAAA,EAAApF,OAAA,EAAAC,MAAA,EAAAoF,KAAA,EAAAC,MAAA,UAAArI,KAAA,cAAAqI,OAAAxH,GAAA,IAAAqH,kBAAA,CAAAC,GAAA,EAAApF,OAAA,EAAAC,MAAA,EAAAoF,KAAA,EAAAC,MAAA,WAAAxH,GAAA,KAAAuH,KAAA,CAAA9D,SAAA;AAAA,SAAAoE,QAAA9B,MAAA,EAAA+B,cAAA,QAAAjC,IAAA,GAAAlH,MAAA,CAAAkH,IAAA,CAAAE,MAAA,OAAApH,MAAA,CAAAoJ,qBAAA,QAAAC,OAAA,GAAArJ,MAAA,CAAAoJ,qBAAA,CAAAhC,MAAA,GAAA+B,cAAA,KAAAE,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAvJ,MAAA,CAAAwJ,wBAAA,CAAApC,MAAA,EAAAmC,GAAA,EAAArI,UAAA,OAAAgG,IAAA,CAAAtB,IAAA,CAAAqD,KAAA,CAAA/B,IAAA,EAAAmC,OAAA,YAAAnC,IAAA;AAAA,SAAAuC,cAAAC,MAAA,aAAAtD,CAAA,MAAAA,CAAA,GAAA4C,SAAA,CAAA7C,MAAA,EAAAC,CAAA,UAAAuD,MAAA,WAAAX,SAAA,CAAA5C,CAAA,IAAA4C,SAAA,CAAA5C,CAAA,QAAAA,CAAA,OAAA8C,OAAA,CAAAlJ,MAAA,CAAA2J,MAAA,OAAA1G,OAAA,WAAA3C,GAAA,IAAAsJ,eAAA,CAAAF,MAAA,EAAApJ,GAAA,EAAAqJ,MAAA,CAAArJ,GAAA,SAAAN,MAAA,CAAA6J,yBAAA,GAAA7J,MAAA,CAAA8J,gBAAA,CAAAJ,MAAA,EAAA1J,MAAA,CAAA6J,yBAAA,CAAAF,MAAA,KAAAT,OAAA,CAAAlJ,MAAA,CAAA2J,MAAA,GAAA1G,OAAA,WAAA3C,GAAA,IAAAN,MAAA,CAAAI,cAAA,CAAAsJ,MAAA,EAAApJ,GAAA,EAAAN,MAAA,CAAAwJ,wBAAA,CAAAG,MAAA,EAAArJ,GAAA,iBAAAoJ,MAAA;AAAA,SAAAE,gBAAAvJ,GAAA,EAAAC,GAAA,EAAAE,KAAA,IAAAF,GAAA,GAAAyJ,cAAA,CAAAzJ,GAAA,OAAAA,GAAA,IAAAD,GAAA,IAAAL,MAAA,CAAAI,cAAA,CAAAC,GAAA,EAAAC,GAAA,IAAAE,KAAA,EAAAA,KAAA,EAAAU,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAAf,GAAA,CAAAC,GAAA,IAAAE,KAAA,WAAAH,GAAA;AAAA,SAAA2J,kBAAAN,MAAA,EAAAO,KAAA,aAAA7D,CAAA,MAAAA,CAAA,GAAA6D,KAAA,CAAA9D,MAAA,EAAAC,CAAA,UAAA8D,UAAA,GAAAD,KAAA,CAAA7D,CAAA,GAAA8D,UAAA,CAAAhJ,UAAA,GAAAgJ,UAAA,CAAAhJ,UAAA,WAAAgJ,UAAA,CAAA/I,YAAA,wBAAA+I,UAAA,EAAAA,UAAA,CAAA9I,QAAA,SAAApB,MAAA,CAAAI,cAAA,CAAAsJ,MAAA,EAAAK,cAAA,CAAAG,UAAA,CAAA5J,GAAA,GAAA4J,UAAA;AAAA,SAAAC,aAAAC,WAAA,EAAAC,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAL,iBAAA,CAAAI,WAAA,CAAAnK,SAAA,EAAAoK,UAAA,OAAAC,WAAA,EAAAN,iBAAA,CAAAI,WAAA,EAAAE,WAAA,GAAAtK,MAAA,CAAAI,cAAA,CAAAgK,WAAA,iBAAAhJ,QAAA,mBAAAgJ,WAAA;AAAA,SAAAL,eAAA3H,GAAA,QAAA9B,GAAA,GAAAiK,YAAA,CAAAnI,GAAA,oBAAAuB,OAAA,CAAArD,GAAA,iBAAAA,GAAA,GAAAkK,MAAA,CAAAlK,GAAA;AAAA,SAAAiK,aAAAE,KAAA,EAAAC,IAAA,QAAA/G,OAAA,CAAA8G,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAA/J,MAAA,CAAAkK,WAAA,OAAAD,IAAA,KAAA7F,SAAA,QAAA+F,GAAA,GAAAF,IAAA,CAAArI,IAAA,CAAAmI,KAAA,EAAAC,IAAA,oBAAA/G,OAAA,CAAAkH,GAAA,uBAAAA,GAAA,YAAA9F,SAAA,4DAAA2F,IAAA,gBAAAF,MAAA,GAAAM,MAAA,EAAAL,KAAA;AAAA,SAAAM,gBAAAC,QAAA,EAAAZ,WAAA,UAAAY,QAAA,YAAAZ,WAAA,eAAArF,SAAA;AAAA,SAAAkG,UAAAC,QAAA,EAAAC,UAAA,eAAAA,UAAA,mBAAAA,UAAA,uBAAApG,SAAA,0DAAAmG,QAAA,CAAAjL,SAAA,GAAAD,MAAA,CAAA8B,MAAA,CAAAqJ,UAAA,IAAAA,UAAA,CAAAlL,SAAA,IAAAwG,WAAA,IAAAjG,KAAA,EAAA0K,QAAA,EAAA9J,QAAA,QAAAD,YAAA,aAAAnB,MAAA,CAAAI,cAAA,CAAA8K,QAAA,iBAAA9J,QAAA,gBAAA+J,UAAA,EAAAC,eAAA,CAAAF,QAAA,EAAAC,UAAA;AAAA,SAAAE,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,GAAAC,eAAA,CAAAL,OAAA,GAAA5H,MAAA,MAAA6H,yBAAA,QAAAK,SAAA,GAAAD,eAAA,OAAAlF,WAAA,EAAA/C,MAAA,GAAAmI,OAAA,CAAAC,SAAA,CAAAJ,KAAA,EAAA1C,SAAA,EAAA4C,SAAA,YAAAlI,MAAA,GAAAgI,KAAA,CAAAzC,KAAA,OAAAD,SAAA,YAAA+C,0BAAA,OAAArI,MAAA;AAAA,SAAAqI,2BAAAtK,IAAA,EAAAa,IAAA,QAAAA,IAAA,KAAAqB,OAAA,CAAArB,IAAA,yBAAAA,IAAA,2BAAAA,IAAA,aAAAA,IAAA,yBAAAyC,SAAA,uEAAAiH,sBAAA,CAAAvK,IAAA;AAAA,SAAAuK,uBAAAvK,IAAA,QAAAA,IAAA,yBAAAwK,cAAA,wEAAAxK,IAAA;AAAA,SAAAyK,iBAAAC,KAAA,QAAAC,MAAA,UAAAC,GAAA,sBAAAA,GAAA,KAAAvH,SAAA,EAAAoH,gBAAA,YAAAA,iBAAAC,KAAA,QAAAA,KAAA,cAAAG,iBAAA,CAAAH,KAAA,UAAAA,KAAA,aAAAA,KAAA,6BAAApH,SAAA,qEAAAqH,MAAA,wBAAAA,MAAA,CAAAG,GAAA,CAAAJ,KAAA,UAAAC,MAAA,CAAAI,GAAA,CAAAL,KAAA,GAAAC,MAAA,CAAAK,GAAA,CAAAN,KAAA,EAAAO,OAAA,cAAAA,QAAA,WAAAC,UAAA,CAAAR,KAAA,EAAAnD,SAAA,EAAA2C,eAAA,OAAAlF,WAAA,KAAAiG,OAAA,CAAAzM,SAAA,GAAAD,MAAA,CAAA8B,MAAA,CAAAqK,KAAA,CAAAlM,SAAA,IAAAwG,WAAA,IAAAjG,KAAA,EAAAkM,OAAA,EAAAxL,UAAA,SAAAE,QAAA,QAAAD,YAAA,oBAAAiK,eAAA,CAAAsB,OAAA,EAAAP,KAAA,aAAAD,gBAAA,CAAAC,KAAA;AAAA,SAAAQ,WAAAC,MAAA,EAAA7D,IAAA,EAAAoD,KAAA,QAAAX,yBAAA,MAAAmB,UAAA,GAAAd,OAAA,CAAAC,SAAA,CAAAe,IAAA,aAAAF,UAAA,YAAAA,WAAAC,MAAA,EAAA7D,IAAA,EAAAoD,KAAA,QAAAW,CAAA,WAAAA,CAAA,CAAAlH,IAAA,CAAAqD,KAAA,CAAA6D,CAAA,EAAA/D,IAAA,OAAAqB,WAAA,GAAA2C,QAAA,CAAAF,IAAA,CAAA5D,KAAA,CAAA2D,MAAA,EAAAE,CAAA,OAAA9B,QAAA,OAAAZ,WAAA,QAAA+B,KAAA,EAAAf,eAAA,CAAAJ,QAAA,EAAAmB,KAAA,CAAAlM,SAAA,UAAA+K,QAAA,cAAA2B,UAAA,CAAA1D,KAAA,OAAAD,SAAA;AAAA,SAAAwC,0BAAA,eAAAK,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAkB,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAjN,SAAA,CAAAkN,OAAA,CAAA7K,IAAA,CAAAuJ,OAAA,CAAAC,SAAA,CAAAoB,OAAA,8CAAAE,CAAA;AAAA,SAAAd,kBAAAnK,EAAA,WAAA4K,QAAA,CAAAM,QAAA,CAAA/K,IAAA,CAAAH,EAAA,EAAAmL,OAAA;AAAA,SAAAlC,gBAAAmC,CAAA,EAAAC,CAAA,IAAApC,eAAA,GAAApL,MAAA,CAAA4G,cAAA,GAAA5G,MAAA,CAAA4G,cAAA,CAAAiG,IAAA,cAAAzB,gBAAAmC,CAAA,EAAAC,CAAA,IAAAD,CAAA,CAAA1G,SAAA,GAAA2G,CAAA,SAAAD,CAAA,YAAAnC,eAAA,CAAAmC,CAAA,EAAAC,CAAA;AAAA,SAAA7B,gBAAA4B,CAAA,IAAA5B,eAAA,GAAA3L,MAAA,CAAA4G,cAAA,GAAA5G,MAAA,CAAA4C,cAAA,CAAAiK,IAAA,cAAAlB,gBAAA4B,CAAA,WAAAA,CAAA,CAAA1G,SAAA,IAAA7G,MAAA,CAAA4C,cAAA,CAAA2K,CAAA,aAAA5B,eAAA,CAAA4B,CAAA;AAAA,SAAAE,qBAAAjN,KAAA,eAAAkN,cAAA,CAAAlN,KAAA;AAAA,SAAAmN,oBAAAxL,EAAA,oCAAAyL,eAAA,CAAAzL,EAAA,CAAA8G,KAAA,OAAAD,SAAA;AAAA,SAAA4E,gBAAAjF,GAAA,QAAAkF,KAAA,EAAAC,IAAA,WAAAC,OAAAzN,GAAA,EAAA8B,GAAA,cAAAsB,MAAA,GAAAiF,GAAA,CAAArI,GAAA,EAAA8B,GAAA,GAAA5B,KAAA,GAAAkD,MAAA,CAAAlD,KAAA,EAAAwN,UAAA,GAAAxN,KAAA,YAAAkN,cAAA,EAAA1G,OAAA,CAAAzD,OAAA,CAAAyK,UAAA,GAAAxN,KAAA,CAAAyN,CAAA,GAAAzN,KAAA,EAAAqD,IAAA,WAAAzB,GAAA,QAAA4L,UAAA,QAAAE,OAAA,gBAAA5N,GAAA,2BAAAE,KAAA,CAAA2N,CAAA,IAAA/L,GAAA,CAAAwC,IAAA,SAAAmJ,MAAA,CAAAG,OAAA,EAAA9L,GAAA,GAAAA,GAAA,GAAAuG,GAAA,CAAAuF,OAAA,EAAA9L,GAAA,EAAA5B,KAAA,IAAA4N,MAAA,CAAA1K,MAAA,CAAAkB,IAAA,wBAAAxC,GAAA,gBAAAf,GAAA,IAAA0M,MAAA,UAAA1M,GAAA,gBAAAA,GAAA,IAAA+M,MAAA,UAAA/M,GAAA,gBAAA+M,OAAA/L,IAAA,EAAA7B,KAAA,YAAA6B,IAAA,mBAAAwL,KAAA,CAAAtK,OAAA,GAAA/C,KAAA,EAAAA,KAAA,EAAAoE,IAAA,8BAAAiJ,KAAA,CAAArK,MAAA,CAAAhD,KAAA,mBAAAqN,KAAA,CAAAtK,OAAA,GAAA/C,KAAA,EAAAA,KAAA,EAAAoE,IAAA,YAAAiJ,KAAA,GAAAA,KAAA,CAAA3I,IAAA,IAAA6I,MAAA,CAAAF,KAAA,CAAAvN,GAAA,EAAAuN,KAAA,CAAAzL,GAAA,IAAA0L,IAAA,gBAAA3K,OAAA,aAAA7C,GAAA,EAAA8B,GAAA,eAAA4E,OAAA,WAAAzD,OAAA,EAAAC,MAAA,QAAA6K,OAAA,KAAA/N,GAAA,EAAAA,GAAA,EAAA8B,GAAA,EAAAA,GAAA,EAAAmB,OAAA,EAAAA,OAAA,EAAAC,MAAA,EAAAA,MAAA,EAAA0B,IAAA,UAAA4I,IAAA,GAAAA,IAAA,GAAAA,IAAA,CAAA5I,IAAA,GAAAmJ,OAAA,IAAAR,KAAA,GAAAC,IAAA,GAAAO,OAAA,EAAAN,MAAA,CAAAzN,GAAA,EAAA8B,GAAA,gCAAAuG,GAAA;AAAAiF,eAAA,CAAA3N,SAAA,sBAAAS,MAAA,IAAAA,MAAA,CAAAI,aAAA,uDAAA8M,eAAA,CAAA3N,SAAA,CAAAiF,IAAA,aAAA9C,GAAA,gBAAAe,OAAA,SAAAf,GAAA,MAAAwL,eAAA,CAAA3N,SAAA,sBAAAmC,GAAA,gBAAAe,OAAA,UAAAf,GAAA,MAAAwL,eAAA,CAAA3N,SAAA,uBAAAmC,GAAA,gBAAAe,OAAA,WAAAf,GAAA;AAAA,SAAAsL,eAAAlN,KAAA,EAAA8N,IAAA,SAAAL,CAAA,GAAAzN,KAAA,OAAA2N,CAAA,GAAAG,IAAA,IADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IAkGaC,sBAAsB,0BAAAC,MAAA;EAAAvD,SAAA,CAAAsD,sBAAA,EAAAC,MAAA;EAAA,IAAAC,MAAA,GAAApD,YAAA,CAAAkD,sBAAA;EAK/B,SAAAA,uBACIG,OAAe,EACCC,IAAwC,EAC1D;IAAA,IAAAC,MAAA;IAAA7D,eAAA,OAAAwD,sBAAA;IACEK,MAAA,GAAAH,MAAA,CAAAnM,IAAA,OAAMoM,OAAO;IAAEE,MAAA,CAFCD,IAAwC,GAAxCA,IAAwC;IAAA,OAAAC,MAAA;EAG5D;EAAC,OAAAzE,YAAA,CAAAoE,sBAAA;AAAA,gBAAArC,gBAAA,CAVuC/H,KAAK;AAajD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBArE,OAAA,CAAAyO,sBAAA,GAAAA,sBAAA;AAbaA,sBAAsB,CAEtBtO,SAAS,CAACyG,IAAI,GAFd6H,sBAAsB,CAEA7H,IAAI;AAAC,IA4B3BmI,SAAS,0BAAAC,aAAA;EAAA7D,SAAA,CAAA4D,SAAA,EAAAC,aAAA;EAAA,IAAAC,OAAA,GAAA1D,YAAA,CAAAwD,SAAA;EAUlB;AACJ;AACA;AACA;AACA;AACA;EACI,SAAAA,UAAA,EAGE;IAAA,IAAAG,MAAA;IAAA,IAFEC,QAAuB,GAAAjG,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAlE,SAAA,GAAAkE,SAAA,MAAG,IAAI;IAAA,IACtBkG,YAA2B,GAAAlG,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAlE,SAAA,GAAAkE,SAAA,MAAG,IAAI;IAAA+B,eAAA,OAAA8D,SAAA;IAE1CG,MAAA,GAAAD,OAAA,CAAAzM,IAAA;IAAQ0M,MAAA,CAFAE,YAA2B,GAA3BA,YAA2B;IAAAtF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA;IAAApF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA,2BAfR,KAAK;IAAApF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA,iCACC,KAAK;IAAApF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA,4BACI,EAAE;IAAApF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA;IAAApF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA;IAAApF,eAAA,CAAAoC,sBAAA,CAAAgD,MAAA,yBAGnB,CAAC;IAa1B,IAAI,CAACG,MAAM,CAACC,MAAM,EAAE;MAChB,MAAM,IAAIjL,KAAK,CAAC,uEAAuE,CAAC;IAC5F;IACA6K,MAAA,CAAKK,SAAS,GAAG,IAAIC,0CAAoB,CAACC,sCAAkB,CAACC,UAAU,EAAEP,QAAQ,EAAEE,MAAM,CAACC,MAAM,EAAED,MAAM,CAAC;IACzGH,MAAA,CAAKK,SAAS,CAACI,YAAY,GAAGP,YAAY;IAC1CF,MAAA,CAAKK,SAAS,CAACK,EAAE,CAAC,SAAS,EAAEV,MAAA,CAAKW,aAAa,CAAC9C,IAAI,CAAAb,sBAAA,CAAAgD,MAAA,EAAM,CAAC;IAAC,OAAAA,MAAA;EAChE;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI7E,YAAA,CAAA0E,SAAA;IAAAvO,GAAA;IAAAE,KAAA,EAOA,SAAAoP,cAAqBC,UAAsB,EAAW;MAClD,IAAIC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACC,oBAAoB,CAAC,EAAE;QAC1C,OAAO,IAAI,CAACA,oBAAoB,CAACC,QAAQ,CAACJ,UAAU,CAAC;MACzD;MACA,OAAO,IAAI,CAACK,qBAAqB,CAACD,QAAQ,CAACJ,UAAU,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAvP,GAAA;IAAAE,KAAA,EAOA,SAAA2P,kBAAyBN,UAAsB,EAAQ;MACnD,IAAI,IAAI,CAACO,oBAAoB,IAAI,CAAC,IAAI,CAACC,0BAA0B,EAAE;QAC/D,MAAM,IAAIlM,KAAK,CAAC,2CAA2C,CAAC;MAChE;MAEA,IAAI,CAAC+L,qBAAqB,CAACtK,IAAI,CAACiK,UAAU,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAvP,GAAA;IAAAE,KAAA,EAMA,SAAA8P,oBAA2BC,YAA0B,EAAQ;MAAA,IAAAC,MAAA;MACzDD,YAAY,CAACtN,OAAO,CAAC,UAACwN,GAAG;QAAA,OAAKD,MAAI,CAACL,iBAAiB,CAACM,GAAG,CAAC;MAAA,EAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAnQ,GAAA;IAAAE,KAAA,EAMA,SAAAkQ,iCAAwCC,MAAgC,EAAQ;MAC5E,IAAI,CAACR,iBAAiB,gCAAAS,MAAA,CAAgCD,MAAM,EAAG;IACnE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAArQ,GAAA;IAAAE,KAAA,EAQA,SAAAqQ,6BAAoCC,SAAiB,EAAEC,QAAiB,EAAQ;MAC5E,IAAI,CAACZ,iBAAiB,CAACa,4CAAqB,CAACC,aAAa,CAACC,qCAAc,CAACC,IAAI,EAAEL,SAAS,EAAEC,QAAQ,CAAC,CAACK,GAAG,CAAC;IAC7G;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA9Q,GAAA;IAAAE,KAAA,EAQA,SAAA6Q,gCAAuCP,SAAiB,EAAEC,QAAiB,EAAQ;MAC/E,IAAI,CAACZ,iBAAiB,CAACa,4CAAqB,CAACC,aAAa,CAACC,qCAAc,CAACI,OAAO,EAAER,SAAS,EAAEC,QAAQ,CAAC,CAACK,GAAG,CAAC;IAChH;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA9Q,GAAA;IAAAE,KAAA,EAMA,SAAA+Q,gCAAuCT,SAAiB,EAAQ;MAC5D,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACQ,gBAAgB,CAACN,qCAAc,CAACC,IAAI,EAAEL,SAAS,CAAC,CAACM,GAAG,CAAC;IACtG;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA9Q,GAAA;IAAAE,KAAA,EAMA,SAAAiR,mCAA0CX,SAAiB,EAAQ;MAC/D,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACQ,gBAAgB,CAACN,qCAAc,CAACI,OAAO,EAAER,SAAS,CAAC,CAACM,GAAG,CAAC;IACzG;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA9Q,GAAA;IAAAE,KAAA,EAKA,SAAAkR,6BAAoCZ,SAAiB,EAAQ;MACzD,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACW,YAAY,CAACT,qCAAc,CAACC,IAAI,EAAEL,SAAS,CAAC,CAACM,GAAG,CAAC;IAClG;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA9Q,GAAA;IAAAE,KAAA,EAKA,SAAAoR,gCAAuCd,SAAiB,EAAQ;MAC5D,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACW,YAAY,CAACT,qCAAc,CAACI,OAAO,EAAER,SAAS,CAAC,CAACM,GAAG,CAAC;IACrG;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA9Q,GAAA;IAAAE,KAAA,EAOA,SAAAqR,+BAAsCC,OAAgB,EAAQ;MAC1D,IAAI,CAAC3B,iBAAiB,CAACa,4CAAqB,CAACe,mBAAmB,CAACb,qCAAc,CAACC,IAAI,EAAEW,OAAO,CAAC,CAACV,GAAG,CAAC;IACvG;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA9Q,GAAA;IAAAE,KAAA,EAOA,SAAAwR,kCAAyCF,OAAgB,EAAQ;MAC7D,IAAI,CAAC3B,iBAAiB,CAACa,4CAAqB,CAACe,mBAAmB,CAACb,qCAAc,CAACI,OAAO,EAAEQ,OAAO,CAAC,CAACV,GAAG,CAAC;IAC1G;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA9Q,GAAA;IAAAE,KAAA,EAKA,SAAAyR,0CAAiDnB,SAAiB,EAAQ;MACtE,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACkB,kBAAkB,CAAChB,qCAAc,CAACI,OAAO,EAAER,SAAS,CAAC,CAACM,GAAG,CAAC;IAC3G;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA9Q,GAAA;IAAAE,KAAA,EAQA,SAAA2R,0BAAA,EAAgE;MAAA,IAAAC,MAAA;MAC5D,OAAO,IAAIpL,OAAO,CAAqB,UAACzD,OAAO,EAAEC,MAAM,EAAK;QACxD4O,MAAI,CAAC/C,SAAS,CACTgD,YAAY,CACTC,0CAAyB,CAACC,oBAAoB,EAC9C,CAAC,CAAC,CACL,CACA1O,IAAI,CAAC,UAAC2O,QAAQ,EAAK;UAChB,IAAMC,KAAK,GAAGD,QAAQ,CAACA,QAAQ;UAC/B,IAAIC,KAAK,CAACvO,KAAK,KAAKwO,mCAAkB,CAACC,OAAO,EAAE;YAC5CpP,OAAO,CAACkP,KAAK,CAAC;UAClB,CAAC,MAAM,IAAIA,KAAK,CAACvO,KAAK,KAAKwO,mCAAkB,CAACE,OAAO,EAAE;YACnDpP,MAAM,CAAC,IAAIW,KAAK,CAAC,wCAAwC,CAAC,CAAC;UAC/D,CAAC,MAAM,IAAIsO,KAAK,CAACvO,KAAK,KAAKwO,mCAAkB,CAACG,uBAAuB,EAAE;YACnE,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,EAAgD,EAAW;cAC1EA,EAAE,CAACC,cAAc,EAAE;cACnB,IAAM3E,OAAO,GAAG0E,EAAE,CAACE,MAAM;cACzB,IAAI5E,OAAO,CAACM,IAAI,CAACuE,mBAAmB,KAAKV,QAAQ,CAACW,SAAS,EAAE;cAC7D,IAAI9E,OAAO,CAACM,IAAI,CAACzK,KAAK,KAAKwO,mCAAkB,CAACC,OAAO,EAAE;gBACnDpP,OAAO,CAAC8K,OAAO,CAACM,IAAI,CAAC;gBACrByD,MAAI,CAAC/C,SAAS,CAAC+D,KAAK,CAAC/E,OAAO,EAA8B,CAAC,CAAC,CAAC,CAAC,CAAC;cACnE,CAAC,MAAM,IAAIA,OAAO,CAACM,IAAI,CAACzK,KAAK,KAAKwO,mCAAkB,CAACE,OAAO,EAAE;gBAC1DpP,MAAM,CAAC,IAAIW,KAAK,CAAC,wCAAwC,CAAC,CAAC;gBAC3DiO,MAAI,CAAC/C,SAAS,CAAC+D,KAAK,CAAC/E,OAAO,EAA8B,CAAC,CAAC,CAAC,CAAC,CAAC;cACnE,CAAC,MAAM;gBACH7K,MAAM,CAAC,IAAIW,KAAK,CAAC,0BAA0B,GAAGsO,KAAK,CAACvO,KAAK,CAAC,CAAC;gBAC3DkO,MAAI,CAAC/C,SAAS,CAAC+D,KAAK,CAAC/E,OAAO,EAA+B;kBACvDtK,KAAK,EAAE;oBACH2K,OAAO,EAAE;kBACb;gBACJ,CAAC,CAAC;cACN;cACA0D,MAAI,CAACiB,GAAG,WAAAzC,MAAA,CAAW0C,wCAAuB,CAACC,iBAAiB,GAAIT,SAAS,CAAC;YAC9E,CAAC;YACDV,MAAI,CAAC1C,EAAE,WAAAkB,MAAA,CAAW0C,wCAAuB,CAACC,iBAAiB,GAAIT,SAAS,CAAC;UAC7E,CAAC,MAAM;YACHtP,MAAM,CAAC,IAAIW,KAAK,CAAC,iBAAiB,GAAGsO,KAAK,CAACvO,KAAK,CAAC,CAAC;UACtD;QACJ,CAAC,CAAC,SACI,CAACV,MAAM,CAAC;MACtB,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAlD,GAAA;IAAAE,KAAA,EAOA,SAAAgT,4BAAA,EAAoD;MAChD,OAAO,IAAI,CAACnE,SAAS,CAChBoE,IAAI,CAACnB,0CAAyB,CAACoB,8BAA8B,EAAuC;QACjGnD,YAAY,EAAE,IAAI,CAACL;MACvB,CAAC,CAAC,CACDrM,IAAI,EAAE;IACf;;IAEA;AACJ;AACA;AACA;EAHI;IAAAvD,GAAA;IAAAE,KAAA,EAIA,SAAAmT,kBAAA,EAA0C;MACtC,OAAO,IAAI,CAACtE,SAAS,CAACoE,IAAI,CAACnB,0CAAyB,CAACsB,aAAa,EAA8B,CAAC,CAAC,CAAC,CAAC/P,IAAI,EAAE;IAC9G;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAvD,GAAA;IAAAE,KAAA,EAKA,SAAAqT,YAAmBC,OAAkC,EAAiB;MAClE,OAAO,IAAI,CAACzE,SAAS,CAACoE,IAAI,CAACnB,0CAAyB,CAACyB,WAAW,EAAED,OAAO,CAAC,CAACjQ,IAAI,EAAE;IACrF;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAvD,GAAA;IAAAE,KAAA,EAMA,SAAAwT,kBAAyBxT,KAAc,EAAoB;MACvD,OAAO,IAAI,CAAC6O,SAAS,CAChBoE,IAAI,CAGHnB,0CAAyB,CAAC2B,oBAAoB,EAAE;QAAEzT,KAAK,EAALA;MAAM,CAAC,CAAC,CAC3DqD,IAAI,CAAC,UAACgH,GAAG;QAAA,OAAKA,GAAG,CAACqJ,OAAO;MAAA,EAAC;IACnC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARI;IAAA5T,GAAA;IAAAE,KAAA,EASA,SAAA2T,gBACIC,GAAW,EACX1N,IAAY,EAIC;MAAA,IAHb2N,OAA4C,GAAArL,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAlE,SAAA,GAAAkE,SAAA,MAAG,EAAE;MAAA,IACjD2F,IAA4B,GAAA3F,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAlE,SAAA,GAAAkE,SAAA,MAAG,CAAC,CAAC;MAAA,IACjC3G,IAAgB,GAAA2G,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAlE,SAAA,GAAAkE,SAAA,MAAGsL,4BAAgB,CAACC,MAAM;MAE1C,OAAO,IAAI,CAAClF,SAAS,CAChBoE,IAAI,CAA8BnB,0CAAyB,CAACkC,eAAe,EAAE;QAC1EnS,IAAI,EAAJA,IAAI;QACJ+R,GAAG,EAAHA,GAAG;QACH1N,IAAI,EAAJA,IAAI;QACJ2N,OAAO,EAAPA,OAAO;QACP1F,IAAI,EAAJA;MACJ,CAAC,CAAC,CACD9K,IAAI,EAAE;IACf;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAvD,GAAA;IAAAE,KAAA,EAKA,SAAAiU,iBAAA,EAA0E;MAAA,IAAlD9F,IAA4B,GAAA3F,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAlE,SAAA,GAAAkE,SAAA,MAAG,CAAC,CAAC;MACrD,OAAO,IAAI,CAACqG,SAAS,CAACoE,IAAI,CAAyBnB,0CAAyB,CAACoC,gBAAgB,EAAE/F,IAAI,CAAC,CAAC9K,IAAI,EAAE;IAC/G;EAAC;IAAAvD,GAAA;IAAAE,KAAA,EAED,SAAAmU,cACI7D,SAAiB,EACjB8D,OAAgB,EAChBjE,MAAe,EACfkE,KAAc,EACdC,aAAsB,EACmB;MACzC,OAAO,IAAI,CAACC,SAAS,CAACjE,SAAS,EAAEhM,SAAS,EAAE8P,OAAO,EAAEjE,MAAM,EAAEkE,KAAK,EAAEC,aAAa,CAAC;IACtF;EAAC;IAAAxU,GAAA;IAAAE,KAAA,EAED,SAAAwU,eACIlE,SAAiB,EACjBC,QAAgB,EAChB6D,OAAgB,EAChBjE,MAAe,EACfkE,KAAc,EACdC,aAAsB,EACmB;MACzC,OAAO,IAAI,CAACC,SAAS,CAACjE,SAAS,EAAEC,QAAQ,EAAE6D,OAAO,EAAEjE,MAAM,EAAEkE,KAAK,EAAEC,aAAa,CAAC;IACrF;EAAC;IAAAxU,GAAA;IAAAE,KAAA,EAED,SAAAuU,UACIjE,SAAiB,EACjBC,QAA4B,EAC5B6D,OAAgB,EAChBjE,MAAe,EACfkE,KAAc,EACdC,aAAsB,EACmB;MACzC,OAAO,IAAI,CAACzF,SAAS,CAACoE,IAAI,CACtBnB,0CAAyB,CAAC2C,SAAS,EAAAxL,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA;QAE/BpH,IAAI,EAAEyO,SAAS;QACf8D,OAAO,EAAPA;MAAO,GACH7D,QAAQ,KAAKjM,SAAS,IAAI;QAAEoQ,SAAS,EAAEnE;MAAS,CAAC,GACjDJ,MAAM,KAAK7L,SAAS,IAAI;QAAEqQ,OAAO,EAAExE;MAAO,CAAC,GAC3CkE,KAAK,KAAK/P,SAAS,IAAI;QAAE+P,KAAK,EAALA;MAAM,CAAC,GAChCC,aAAa,KAAKhQ,SAAS,IAAI;QAAEsQ,eAAe,EAAEN;MAAc,CAAC,EAE5E;IACL;;IAEA;AACJ;AACA;EAFI;IAAAxU,GAAA;IAAAE,KAAA,EAGA,SAAA6U,mBACIC,OAAe,EACfC,MAAgC,EACkB;MAClD,OAAO,IAAI,CAAClG,SAAS,CAACoE,IAAI,CACtBnB,0CAAyB,CAACkD,yBAAyB,EACnD;QACIC,QAAQ,EAAEH,OAAO;QACjBC,MAAM,EAANA;MACJ,CAAC,CACJ;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAjV,GAAA;IAAAE,KAAA,EAOA,SAAAkV,aACI5E,SAAiB,EACjB6E,SAAkB,EAClBC,UAAgE,EACpB;MAC5C,OAAO,IAAI,CAACvG,SAAS,CAACoE,IAAI,CACtBnB,0CAAyB,CAACuD,YAAY,EACtC;QAAExT,IAAI,EAAEyO,SAAS;QAAE6E,SAAS,EAATA,SAAS;QAAEG,QAAQ,EAAEF;MAAW,CAAC,CACvD;IACL;EAAC;IAAAtV,GAAA;IAAAE,KAAA,EAED,SAAAuV,oBAA2BjF,SAAiB,EAAEkF,OAAsC,EAA+B;MAC/G,IAAMrH,IAAqC,GAAG;QAAEtM,IAAI,EAAEyO;MAAU,CAAC;MAEjE,IAAIkF,OAAO,EAAE;QACT,IAAIA,OAAO,CAAC/F,QAAQ,CAACgG,gBAAO,CAACC,OAAO,CAAC,EAAE;UACnCvH,IAAI,CAACwH,QAAQ,GAAGF,gBAAO,CAACC,OAAO;QACnC,CAAC,MAAM;UACHvH,IAAI,CAACwH,QAAQ,GAAGH,OAAO;QAC3B;MACJ;MACA,OAAO,IAAI,CAAC3G,SAAS,CAChBoE,IAAI,CAGHnB,0CAAyB,CAAC8D,yBAAyB,EAAEzH,IAAI,CAAC,CAC3D9K,IAAI,CAAC,UAACwS,CAAC;QAAA,OAAKA,CAAC,CAACC,MAAM;MAAA,EAAC;IAC9B;EAAC;IAAAhW,GAAA;IAAAE,KAAA,EAED,SAAA+V,eACIzF,SAAiB,EACjB0F,KAAc,EACd1E,OAAgB,EAChBkE,OAAsC,EACtCS,KAA0B,EACL;MACrB,IAAM9H,IAAqC,GAAG;QAAEtM,IAAI,EAAEyO,SAAS;QAAEgB,OAAO,EAAEA;MAAQ,CAAC;MACnF,IAAI0E,KAAK,KAAK1R,SAAS,EAAE;QACrB6J,IAAI,CAAC6H,KAAK,GAAGA,KAAK;MACtB;MACA,IAAIR,OAAO,EAAE;QACT,IAAIA,OAAO,CAAC/F,QAAQ,CAACgG,gBAAO,CAACC,OAAO,CAAC,EAAE;UACnCvH,IAAI,CAACwH,QAAQ,GAAGF,gBAAO,CAACC,OAAO;QACnC,CAAC,MAAM;UACHvH,IAAI,CAACwH,QAAQ,GAAGH,OAAO;QAC3B;MACJ;MACA,IAAIS,KAAK,EAAE;QACP9H,IAAI,CAAC8H,KAAK,GAAGA,KAAK;MACtB;MACA,OAAO,IAAI,CAACpH,SAAS,CAChBoE,IAAI,CAGHnB,0CAAyB,CAACoE,iBAAiB,EAAE/H,IAAI,CAAC,CACnD9K,IAAI,CAAC,UAACwS,CAAC;QAAA,OAAKA,CAAC,CAACC,MAAM;MAAA,EAAC;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAlBI;IAAAhW,GAAA;IAAAE,KAAA;MAAA,IAAAmW,mBAAA,GAAA7N,iBAAA,eAAAjJ,mBAAA,GAAA8G,IAAA,CAmBA,SAAAiQ,QACIC,OAAe,EACflG,MAAe,EACfmG,YAAqB,EACrBhG,SAAkB,EAClB0F,KAAc,EACdO,IAAa,EACbC,EAAW,EACXC,SAAqB;QAAA,IAAAC,QAAA,EAAAvI,IAAA;QAAA,OAAA9O,mBAAA,GAAAyB,IAAA,UAAA6V,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAA5P,IAAA,GAAA4P,QAAA,CAAAlS,IAAA;YAAA;cAAAkS,QAAA,CAAAlS,IAAA;cAAA,OAEE,IAAI,CAACmS,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAAE,QAAA,CAAA5S,IAAA;cAAA,IACT0S,QAAQ,CAACjH,QAAQ,CAACqH,8BAAkB,CAACC,OAAO,CAAC;gBAAAH,QAAA,CAAAlS,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,2DAA2D,CAAC;YAAA;cAG1EwK,IAAyC,GAAG;gBAC9C6I,QAAQ,EAAEX,OAAO;gBACjBY,QAAQ,EAAEX,YAAY;gBACtBY,UAAU,EAAE5G,SAAS;gBACrBqE,OAAO,EAAExE,MAAM;gBACfqG,EAAE,EAAFA,EAAE;gBACFD,IAAI,EAAJA,IAAI;gBACJP,KAAK,EAALA,KAAK;gBACLS,SAAS,EAATA;cACJ,CAAC;cAAA,OAAAG,QAAA,CAAAzS,MAAA,WAEM,IAAI,CAAC0K,SAAS,CAACoE,IAAI,CACtBnB,0CAAyB,CAACqF,oBAAoB,EAC9ChJ,IAAI,CACP;YAAA;YAAA;cAAA,OAAAyI,QAAA,CAAAzP,IAAA;UAAA;QAAA,GAAAiP,OAAA;MAAA,CACJ;MAAA,SAAAgB,mBAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAzB,mBAAA,CAAA1N,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAA4O,kBAAA;IAAA;EAAA;IAAAtX,GAAA;IAAAE,KAAA,EAED,SAAA6X,gBACIvH,SAAiB,EACjB0F,KAAc,EACdzF,QAAiB,EACjBiF,OAAsC,EACjB;MACrB,IAAMrH,IAAqC,GAAG;QAC1CtM,IAAI,EAAEyO,SAAS;QACfoE,SAAS,EAAEnE,QAAQ,KAAKjM,SAAS,GAAG,IAAI,GAAGiM;MAC/C,CAAC;MACD,IAAIyF,KAAK,KAAK1R,SAAS,EAAE;QACrB6J,IAAI,CAAC6H,KAAK,GAAGA,KAAK;MACtB;MACA,IAAIR,OAAO,EAAE;QACT,IAAIA,OAAO,CAAC/F,QAAQ,CAACgG,gBAAO,CAACC,OAAO,CAAC,EAAE;UACnCvH,IAAI,CAACwH,QAAQ,GAAGF,gBAAO,CAACC,OAAO;QACnC,CAAC,MAAM;UACHvH,IAAI,CAACwH,QAAQ,GAAGH,OAAO;QAC3B;MACJ;MACA,OAAO,IAAI,CAAC3G,SAAS,CAChBoE,IAAI,CAGHnB,0CAAyB,CAACoE,iBAAiB,EAAE/H,IAAI,CAAC,CACnD9K,IAAI,CAAC,UAACwS,CAAC;QAAA,OAAKA,CAAC,CAACC,MAAM;MAAA,EAAC;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAhW,GAAA;IAAAE,KAAA,EAOA,SAAA8X,sBAA6BC,QAAuB,EAAEC,SAAkB,EAAiB;MACrF,IAAID,QAAQ,KAAKE,wCAAoB,CAACC,KAAK,EAAE;QACzC,MAAM,IAAIvU,KAAK,CAAC,qCAAqC,CAAC;MAC1D;MACA,OAAO,IAAI,CAACkL,SAAS,CAChBoE,IAAI,CAA0CnB,0CAAyB,CAACqG,qBAAqB,EAAE;QAC5FC,MAAM,EAAEL,QAAQ;QAChBM,OAAO,EAAEL;MACb,CAAC,CAAC,CACD3U,IAAI,EAAE;IACf;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAAvD,GAAA;IAAAE,KAAA,EAQA,SAAAsY,WAAkBC,GAAW,EAAiB;MAC1C,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACC,UAAU,CAAC,qBAAqB,CAAC,EAAE;QAChD,MAAM,IAAI7U,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MAEA,OAAO,IAAI,CAACkL,SAAS,CAChBoE,IAAI,CAA6BnB,0CAAyB,CAAC2G,eAAe,EAAE;QAAEF,GAAG,EAAHA;MAAI,CAAC,CAAC,CACpFlV,IAAI,EAAE;IACf;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAvD,GAAA;IAAAE,KAAA,EAKA,SAAA0Y,eAAA,EAA4D;MAAA,IAAAC,KAAA;MAAA,OAAAxL,mBAAA,eAAA9N,mBAAA,GAAA8G,IAAA,UAAAyS,SAAA;QAAA,IAAAC,aAAA,EAAAC,mBAAA;QAAA,OAAAzZ,mBAAA,GAAAyB,IAAA,UAAAiY,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAhS,IAAA,GAAAgS,SAAA,CAAAtU,IAAA;YAAA;cAGlDoU,mBAAmB;gBAAA,IAAAG,IAAA,GAAA3Q,iBAAA,eAAAjJ,mBAAA,GAAA8G,IAAA,CAAG,SAAA+S,SAAO3G,EAA0C;kBAAA,OAAAlT,mBAAA,GAAAyB,IAAA,UAAAqY,UAAAC,SAAA;oBAAA,kBAAAA,SAAA,CAAApS,IAAA,GAAAoS,SAAA,CAAA1U,IAAA;sBAAA;wBACzE6N,EAAE,CAACC,cAAc,EAAE;wBACnBqG,aAAa,CAACtG,EAAE,CAACE,MAAM,CAACtE,IAAI,CAAC;wBAACiL,SAAA,CAAA1U,IAAA;wBAAA,OACxBiU,KAAI,CAAC9J,SAAS,CAAC+D,KAAK,CAAoCL,EAAE,CAACE,MAAM,EAAE,CAAC,CAAC,CAAC;sBAAA;sBAAA;wBAAA,OAAA2G,SAAA,CAAAjS,IAAA;oBAAA;kBAAA,GAAA+R,QAAA;gBAAA,CAC/E;gBAAA,gBAJKJ,mBAAmBA,CAAAO,GAAA;kBAAA,OAAAJ,IAAA,CAAAxQ,KAAA,OAAAD,SAAA;gBAAA;cAAA,KAMzB;cACA;cACAmQ,KAAI,CAACzJ,EAAE,WAAAkB,MAAA,CAAW0C,wCAAuB,CAACwG,iBAAiB,GAAIR,mBAAmB,CAAC;;cAEnF;cAAA,MACIH,KAAI,CAACY,kBAAkB,KAAK,CAAC;gBAAAP,SAAA,CAAAtU,IAAA;gBAAA;cAAA;cAAAsU,SAAA,CAAAhS,IAAA;cAAAgS,SAAA,CAAAtU,IAAA;cAAA,OAAAuI,oBAAA,CAEnB0L,KAAI,CAAC9J,SAAS,CAACoE,IAAI,CAA6BnB,0CAAyB,CAAC0H,gBAAgB,EAAE,CAAC,CAAC,CAAC;YAAA;cAAAR,SAAA,CAAAtU,IAAA;cAAA;YAAA;cAAAsU,SAAA,CAAAhS,IAAA;cAAAgS,SAAA,CAAAS,EAAA,GAAAT,SAAA;cAErGL,KAAI,CAAC9F,GAAG,WAAAzC,MAAA,CAAW0C,wCAAuB,CAACwG,iBAAiB,GAAIR,mBAAmB,CAAC;cAAC,MAAAE,SAAA,CAAAS,EAAA;YAAA;cAI7Fd,KAAI,CAACY,kBAAkB,EAAE;cAACP,SAAA,CAAAhS,IAAA;YAAA;cAAA,KAIf,IAAI;gBAAAgS,SAAA,CAAAtU,IAAA;gBAAA;cAAA;cAAAsU,SAAA,CAAAtU,IAAA;cAAA,OAAAuI,oBAAA,CACK,IAAIzG,OAAO,CAAc,UAACzD,OAAO;gBAAA,OAAM8V,aAAa,GAAG9V,OAAO;cAAA,CAAC,CAAC;YAAA;cAAAiW,SAAA,CAAAtU,IAAA;cAA5E,OAAAsU,SAAA,CAAAhV,IAAA;YAA4E;cAAAgV,SAAA,CAAAtU,IAAA;cAAA;YAAA;cAAAsU,SAAA,CAAAhS,IAAA;cAGhF;cACA2R,KAAI,CAAC9F,GAAG,WAAAzC,MAAA,CAAW0C,wCAAuB,CAACwG,iBAAiB,GAAIR,mBAAmB,CAAC;;cAEpF;cACA;cACAH,KAAI,CAACY,kBAAkB,EAAE;cAAC,MACtBZ,KAAI,CAACY,kBAAkB,KAAK,CAAC;gBAAAP,SAAA,CAAAtU,IAAA;gBAAA;cAAA;cAAAsU,SAAA,CAAAtU,IAAA;cAAA,OAAAuI,oBAAA,CACvB0L,KAAI,CAAC9J,SAAS,CAACoE,IAAI,CAA6BnB,0CAAyB,CAAC4H,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAAA;cAAA,OAAAV,SAAA,CAAAlR,MAAA;YAAA;YAAA;cAAA,OAAAkR,SAAA,CAAA7R,IAAA;UAAA;QAAA,GAAAyR,QAAA;MAAA;IAGnH;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA9Y,GAAA;IAAAE,KAAA;MAAA,IAAA2Z,oBAAA,GAAArR,iBAAA,eAAAjJ,mBAAA,GAAA8G,IAAA,CAMA,SAAAyT,SACIC,UAAkB,EAClB7D,KAAc;QAAA,IAAAU,QAAA,EAAAvI,IAAA;QAAA,OAAA9O,mBAAA,GAAAyB,IAAA,UAAAgZ,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA/S,IAAA,GAAA+S,SAAA,CAAArV,IAAA;YAAA;cAAAqV,SAAA,CAAArV,IAAA;cAAA,OAES,IAAI,CAACmS,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAAqD,SAAA,CAAA/V,IAAA;cAAA,IACT0S,QAAQ,CAACjH,QAAQ,CAACqH,8BAAkB,CAACkD,OAAO,CAAC;gBAAAD,SAAA,CAAArV,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,kEAAkE,CAAC;YAAA;cAGjFwK,IAA+C,GAAG;gBACpD8L,WAAW,EAAEJ,UAAU;gBACvB7D,KAAK,EAALA;cACJ,CAAC;cAAA,OAAA+D,SAAA,CAAA5V,MAAA,WAEM,IAAI,CAAC0K,SAAS,CAACoE,IAAI,CAGxBnB,0CAAyB,CAACoI,0BAA0B,EAAE/L,IAAI,CAAC;YAAA;YAAA;cAAA,OAAA4L,SAAA,CAAA5S,IAAA;UAAA;QAAA,GAAAyS,QAAA;MAAA,CAChE;MAAA,SAAAO,oBAAAC,IAAA,EAAAC,IAAA;QAAA,OAAAV,oBAAA,CAAAlR,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAA2R,mBAAA;IAAA;IAED;AACJ;AACA;AACA;EAHI;IAAAra,GAAA;IAAAE,KAAA;MAAA,IAAAsa,eAAA,GAAAhS,iBAAA,eAAAjJ,mBAAA,GAAA8G,IAAA,CAIA,SAAAoU,SAAA;QAAA,IAAA7D,QAAA,EAAAvI,IAAA;QAAA,OAAA9O,mBAAA,GAAAyB,IAAA,UAAA0Z,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzT,IAAA,GAAAyT,SAAA,CAAA/V,IAAA;YAAA;cAAA+V,SAAA,CAAA/V,IAAA;cAAA,OAC2B,IAAI,CAACmS,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAA+D,SAAA,CAAAzW,IAAA;cAAA,IACT0S,QAAQ,CAACjH,QAAQ,CAACqH,8BAAkB,CAAC4D,OAAO,CAAC;gBAAAD,SAAA,CAAA/V,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,6DAA6D,CAAC;YAAA;cAG5EwK,IAAgD,GAAG,CAAC,CAAC;cAAA,OAAAsM,SAAA,CAAAtW,MAAA,WAEpD,IAAI,CAAC0K,SAAS,CAACoE,IAAI,CAGxBnB,0CAAyB,CAAC6I,2BAA2B,EAAExM,IAAI,CAAC;YAAA;YAAA;cAAA,OAAAsM,SAAA,CAAAtT,IAAA;UAAA;QAAA,GAAAoT,QAAA;MAAA,CACjE;MAAA,SAAAK,eAAA;QAAA,OAAAN,eAAA,CAAA7R,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAoS,cAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA9a,GAAA;IAAAE,KAAA;MAAA,IAAA6a,WAAA,GAAAvS,iBAAA,eAAAjJ,mBAAA,GAAA8G,IAAA,CAMA,SAAA2U,SAAwBC,IAA4B;QAAA,IAAArE,QAAA,EAAAvI,IAAA;QAAA,OAAA9O,mBAAA,GAAAyB,IAAA,UAAAka,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAjU,IAAA,GAAAiU,SAAA,CAAAvW,IAAA;YAAA;cAAAuW,SAAA,CAAAvW,IAAA;cAAA,OACzB,IAAI,CAACmS,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAAuE,SAAA,CAAAjX,IAAA;cAAA,IACT0S,QAAQ,CAACjH,QAAQ,CAACqH,8BAAkB,CAAC4D,OAAO,CAAC;gBAAAO,SAAA,CAAAvW,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,wDAAwD,CAAC;YAAA;cAGvEwK,IAA4C,GAAG;gBACjD4M,IAAI,EAAJA;cACJ,CAAC;cAAA,OAAAE,SAAA,CAAA9W,MAAA,WAEM,IAAI,CAAC0K,SAAS,CAACoE,IAAI,CACtBnB,0CAAyB,CAACoJ,uBAAuB,EACjD/M,IAAI,CACP;YAAA;YAAA;cAAA,OAAA8M,SAAA,CAAA9T,IAAA;UAAA;QAAA,GAAA2T,QAAA;MAAA,CACJ;MAAA,SAAAK,WAAAC,IAAA;QAAA,OAAAP,WAAA,CAAApS,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAA2S,UAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;EAJI;IAAArb,GAAA;IAAAE,KAAA;MAAA,IAAAqb,aAAA,GAAA/S,iBAAA,eAAAjJ,mBAAA,GAAA8G,IAAA,CAKA,SAAAmV,SAA0BC,UAAkB;QAAA,IAAA7E,QAAA,EAAAvI,IAAA;QAAA,OAAA9O,mBAAA,GAAAyB,IAAA,UAAA0a,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzU,IAAA,GAAAyU,SAAA,CAAA/W,IAAA;YAAA;cAAA+W,SAAA,CAAA/W,IAAA;cAAA,OACjB,IAAI,CAACmS,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAA+E,SAAA,CAAAzX,IAAA;cAAA,IACT0S,QAAQ,CAACjH,QAAQ,CAACqH,8BAAkB,CAAC4D,OAAO,CAAC;gBAAAe,SAAA,CAAA/W,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,0DAA0D,CAAC;YAAA;cAGzEwK,IAA8C,GAAG;gBACnDuN,WAAW,EAAEH;cACjB,CAAC;cAAA,OAAAE,SAAA,CAAAtX,MAAA,WAEM,IAAI,CAAC0K,SAAS,CAACoE,IAAI,CACtBnB,0CAAyB,CAAC6J,yBAAyB,EACnDxN,IAAI,CACP;YAAA;YAAA;cAAA,OAAAsN,SAAA,CAAAtU,IAAA;UAAA;QAAA,GAAAmU,QAAA;MAAA,CACJ;MAAA,SAAAM,aAAAC,IAAA;QAAA,OAAAR,aAAA,CAAA5S,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAoT,YAAA;IAAA;IAED;AACJ;AACA;AACA;EAHI;IAAA9b,GAAA;IAAAE,KAAA,EAIA,SAAA8b,MAAA,EAAqB;MAAA,IAAAC,MAAA;MACjB,IAAI,CAAClN,SAAS,CAACiN,KAAK,EAAE;MACtB,IAAI,CAACjF,iBAAiB,EAAE,CAACxT,IAAI,CAAC,UAACoK,CAAC,EAAK;QACjC,IAAIA,CAAC,CAACgC,QAAQ,CAACqH,8BAAkB,CAACkF,OAAO,CAAC,EAAE;UACxCD,MAAI,CAAClM,0BAA0B,GAAG,IAAI;QAC1C;MACJ,CAAC,CAAC;IACN;EAAC;IAAA/P,GAAA;IAAAE,KAAA,EAED,SAAAmP,cAAsBoD,EAAkC,EAAwB;MAC5E,IAAM0J,QAAQ,GAAG,IAAIC,WAAW,WAAA9L,MAAA,CAAWmC,EAAE,CAACE,MAAM,CAACsC,MAAM,GAAI;QAC3DtC,MAAM,EAAEF,EAAE,CAACE,MAAM;QACjB0J,UAAU,EAAE;MAChB,CAAC,CAAC;MACF,IAAI,CAACC,IAAI,WAAAhM,MAAA,CAAWmC,EAAE,CAACE,MAAM,CAACsC,MAAM,GAAIkH,QAAQ,CAAC;MACjD,IAAI,CAACA,QAAQ,CAACI,gBAAgB,EAAE;QAC5B,QAAQ9J,EAAE,CAACE,MAAM,CAACsC,MAAM;UACpB,KAAKjC,wCAAuB,CAACwJ,oBAAoB;YAC7C,OAAO,IAAI,CAACC,aAAa,CAAkChK,EAAE,CAACE,MAAM,CAAC;UACzE,KAAKK,wCAAuB,CAAC0J,YAAY;YACrC,OAAO,IAAI,CAACC,kBAAkB,CAA6BlK,EAAE,CAACE,MAAM,CAAC;UACzE,KAAKK,wCAAuB,CAAC4J,gBAAgB;YACzC,OAAO,IAAI,CAAC7N,SAAS,CAAC+D,KAAK,CAACL,EAAE,CAACE,MAAM,EAA8B,CAAC,CAAC,CAAC;UAAE;UAC5E,KAAKK,wCAAuB,CAAC6J,kBAAkB;YAC3C,OAAO,IAAI,CAAC9N,SAAS,CAAC+D,KAAK,CAACL,EAAE,CAACE,MAAM,EAA8B,CAAC,CAAC,CAAC;UAAE;UAC5E;YACI,OAAO,IAAI,CAAC5D,SAAS,CAAC+D,KAAK,CAACL,EAAE,CAACE,MAAM,EAA+B;cAChElP,KAAK,EAAE;gBACH2K,OAAO,EAAE,iCAAiC,GAAGqE,EAAE,CAACE,MAAM,CAACsC;cAC3D;YACJ,CAAC,CAAC;QAAC;MAEf;IACJ;EAAC;IAAAjV,GAAA;IAAAE,KAAA,EAED,SAAAuc,cAAsB1O,OAAwC,EAAQ;MAClE,IAAI,CAACgB,SAAS,CAAC+D,KAAK,CAAuC/E,OAAO,EAAE;QAChE+O,kBAAkB,EAAEC;MACxB,CAAC,CAAC;IACN;EAAC;IAAA/c,GAAA;IAAAE,KAAA,EAED,SAAA6W,kBAAA,EAAkD;MAAA,IAAAiG,MAAA;MAC9C,IAAIxN,KAAK,CAACC,OAAO,CAAC,IAAI,CAACwN,oBAAoB,CAAC,EAAE;QAC1C,OAAOvW,OAAO,CAACzD,OAAO,CAAC,IAAI,CAACga,oBAAoB,CAAC;MACrD;MAEA,OAAO,IAAI,CAAClO,SAAS,CAChBoE,IAAI,CACDnB,0CAAyB,CAACwK,oBAAoB,EAC9C,CAAC,CAAC,CACL,CACAjZ,IAAI,CAAC,UAACwS,CAAC,EAAK;QACTiH,MAAI,CAACC,oBAAoB,GAAGlH,CAAC,CAAC+G,kBAAkB;QAChD,OAAO/G,CAAC,CAAC+G,kBAAkB;MAC/B,CAAC,CAAC,SACI,CAAC,UAAChQ,CAAC,EAAK;QACVoQ,OAAO,CAACC,IAAI,CAAC,qDAAqD,EAAErQ,CAAC,CAAC;QACtE,OAAO,EAAE;MACb,CAAC,CAAC;IACV;EAAC;IAAA9M,GAAA;IAAAE,KAAA,EAED,SAAAyc,mBAA2B5O,OAAmC,EAAwB;MAAA,IAAAqP,MAAA;MAClF,IAAI,IAAI,CAACtN,oBAAoB,EAAE;QAC3B,OAAO,IAAI,CAACf,SAAS,CAAC+D,KAAK,CAA8B/E,OAAO,EAAE;UAC9DtK,KAAK,EAAE;YACH2K,OAAO,EAAE;UACb;QACJ,CAAC,CAAC;MACN;;MAEA;MACA,OAAO,IAAI,CAAC2I,iBAAiB,EAAE,CAACxT,IAAI,CAAC,UAACoK,CAAC,EAAK;QACxC,IAAIA,CAAC,CAACgC,QAAQ,CAACqH,8BAAkB,CAACqG,OAAO,CAAC,EAAE;UACxCD,MAAI,CAACE,IAAI,WAAAhN,MAAA,CACK0C,wCAAuB,CAAC6J,kBAAkB,GACpD,UAACpK,EAAiD,EAAK;YACnD2K,MAAI,CAAC1N,oBAAoB,GAAG+C,EAAE,CAACE,MAAM,CAACtE,IAAI,CAACkP,QAAQ;YACnDH,MAAI,CAACd,IAAI,CAAC,OAAO,CAAC;UACtB,CAAC,CACJ;QACL,CAAC,MAAM;UACH;UACAc,MAAI,CAACd,IAAI,CAAC,OAAO,CAAC;QACtB;;QAEA;QACAc,MAAI,CAACtN,oBAAoB,GAAG,IAAI;QAChC,OAAOsN,MAAI,CAACrO,SAAS,CAAC+D,KAAK,CAAkC/E,OAAO,EAAE;UAClEkC,YAAY,EAAEmN,MAAI,CAACxN;QACvB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EAAC;EAAA,OAAArB,SAAA;AAAA,EArwB0BiP,oBAAY;AAAAhe,OAAA,CAAA+O,SAAA,GAAAA,SAAA"}