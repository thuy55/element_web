{"version":3,"file":"retry-queue.js","sourceRoot":"","sources":["../../src/retry-queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { RetriableRequestWithOptions } from './types'\n\nimport { isNumber, isUndefined } from '@posthog/core'\nimport { logger } from './utils/logger'\nimport { window } from './utils/globals'\nimport { PostHog } from './posthog-core'\nimport { extendURLParams } from './request'\nimport { addEventListener } from './utils'\n\nconst thirtyMinutes = 30 * 60 * 1000\n\n/**\n * Generates a jitter-ed exponential backoff delay in milliseconds\n *\n * The base value is 6 seconds, which is doubled with each retry\n * up to the maximum of 30 minutes\n *\n * Each value then has +/- 50% jitter\n *\n * Giving a range of 6 seconds up to 45 minutes\n */\nexport function pickNextRetryDelay(retriesPerformedSoFar: number): number {\n    const rawBackoffTime = 3000 * 2 ** retriesPerformedSoFar\n    const minBackoff = rawBackoffTime / 2\n    const cappedBackoffTime = Math.min(thirtyMinutes, rawBackoffTime)\n    const jitterFraction = Math.random() - 0.5 // A random number between -0.5 and 0.5\n    const jitter = jitterFraction * (cappedBackoffTime - minBackoff)\n    return Math.ceil(cappedBackoffTime + jitter)\n}\n\ninterface RetryQueueElement {\n    retryAt: number\n    requestOptions: RetriableRequestWithOptions\n}\n\nexport class RetryQueue {\n    private _isPolling: boolean = false // flag to continue to recursively poll or not\n    private _poller: number | undefined // to become interval for reference to clear later\n    private _pollIntervalMs: number = 3000\n    private _queue: RetryQueueElement[] = []\n    private _areWeOnline: boolean\n\n    constructor(private _instance: PostHog) {\n        this._queue = []\n        this._areWeOnline = true\n\n        if (!isUndefined(window) && 'onLine' in window.navigator) {\n            this._areWeOnline = window.navigator.onLine\n\n            addEventListener(window, 'online', () => {\n                this._areWeOnline = true\n                this._flush()\n            })\n\n            addEventListener(window, 'offline', () => {\n                this._areWeOnline = false\n            })\n        }\n    }\n\n    get length() {\n        return this._queue.length\n    }\n\n    retriableRequest({ retriesPerformedSoFar, ...options }: RetriableRequestWithOptions): void {\n        if (isNumber(retriesPerformedSoFar) && retriesPerformedSoFar > 0) {\n            options.url = extendURLParams(options.url, { retry_count: retriesPerformedSoFar })\n        }\n\n        this._instance._send_request({\n            ...options,\n            callback: (response) => {\n                if (response.statusCode !== 200 && (response.statusCode < 400 || response.statusCode >= 500)) {\n                    if ((retriesPerformedSoFar ?? 0) < 10) {\n                        this._enqueue({\n                            retriesPerformedSoFar,\n                            ...options,\n                        })\n                        return\n                    }\n                }\n\n                options.callback?.(response)\n            },\n        })\n    }\n\n    private _enqueue(requestOptions: RetriableRequestWithOptions): void {\n        const retriesPerformedSoFar = requestOptions.retriesPerformedSoFar || 0\n        requestOptions.retriesPerformedSoFar = retriesPerformedSoFar + 1\n\n        const msToNextRetry = pickNextRetryDelay(retriesPerformedSoFar)\n        const retryAt = Date.now() + msToNextRetry\n\n        this._queue.push({ retryAt, requestOptions })\n\n        let logMessage = `Enqueued failed request for retry in ${msToNextRetry}`\n        if (!navigator.onLine) {\n            logMessage += ' (Browser is offline)'\n        }\n        logger.warn(logMessage)\n\n        if (!this._isPolling) {\n            this._isPolling = true\n            this._poll()\n        }\n    }\n\n    private _poll(): void {\n        this._poller && clearTimeout(this._poller)\n        this._poller = setTimeout(() => {\n            if (this._areWeOnline && this._queue.length > 0) {\n                this._flush()\n            }\n            this._poll()\n        }, this._pollIntervalMs) as any as number\n    }\n\n    private _flush(): void {\n        const now = Date.now()\n        const notToFlush: RetryQueueElement[] = []\n        const toFlush = this._queue.filter((item) => {\n            if (item.retryAt < now) {\n                return true\n            }\n            notToFlush.push(item)\n            return false\n        })\n\n        this._queue = notToFlush\n\n        if (toFlush.length > 0) {\n            for (const { requestOptions } of toFlush) {\n                this.retriableRequest(requestOptions)\n            }\n        }\n    }\n\n    unload(): void {\n        if (this._poller) {\n            clearTimeout(this._poller)\n            this._poller = undefined\n        }\n\n        for (const { requestOptions } of this._queue) {\n            try {\n                // we've had send beacon in place for at least 2 years\n                // eslint-disable-next-line compat/compat\n                this._instance._send_request({\n                    ...requestOptions,\n                    transport: 'sendBeacon',\n                })\n            } catch (e) {\n                // Note sendBeacon automatically retries, and after the first retry it will lose reference to contextual `this`.\n                // This means in some cases `this.getConfig` will be undefined.\n                logger.error(e)\n            }\n        }\n        this._queue = []\n    }\n}\n"]}