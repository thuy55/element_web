{"version":3,"file":"consent.js","sourceRoot":"","sources":["../../src/consent.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { find } from './utils'\nimport { assignableWindow, navigator } from './utils/globals'\nimport { cookieStore, localStore } from './storage'\nimport { PersistentStore } from './types'\nimport { isNoLike, isYesLike } from '@posthog/core'\n\nconst OPT_OUT_PREFIX = '__ph_opt_in_out_'\n\nexport enum ConsentStatus {\n    PENDING = -1,\n    DENIED = 0,\n    GRANTED = 1,\n}\n\n/**\n * ConsentManager provides tools for managing user consent as configured by the application.\n */\nexport class ConsentManager {\n    private _persistentStore?: PersistentStore\n\n    constructor(private _instance: PostHog) {}\n\n    private get _config() {\n        return this._instance.config\n    }\n\n    public get consent(): ConsentStatus {\n        if (this._getDnt()) {\n            return ConsentStatus.DENIED\n        }\n\n        return this._storedConsent\n    }\n\n    public isOptedOut() {\n        if (this._config.cookieless_mode === 'always') {\n            return true\n        }\n        // we are opted out if:\n        // * consent is explicitly denied\n        // * consent is pending, and we are configured to opt out by default\n        // * consent is pending, and we are in cookieless mode \"on_reject\"\n        return (\n            this.consent === ConsentStatus.DENIED ||\n            (this.consent === ConsentStatus.PENDING &&\n                (this._config.opt_out_capturing_by_default || this._config.cookieless_mode === 'on_reject'))\n        )\n    }\n\n    public isOptedIn() {\n        return !this.isOptedOut()\n    }\n\n    public isExplicitlyOptedOut() {\n        return this.consent === ConsentStatus.DENIED\n    }\n\n    public optInOut(isOptedIn: boolean) {\n        this._storage._set(\n            this._storageKey,\n            isOptedIn ? 1 : 0,\n            this._config.cookie_expiration,\n            this._config.cross_subdomain_cookie,\n            this._config.secure_cookie\n        )\n    }\n\n    public reset() {\n        this._storage._remove(this._storageKey, this._config.cross_subdomain_cookie)\n    }\n\n    private get _storageKey() {\n        const { token, opt_out_capturing_cookie_prefix, consent_persistence_name } = this._instance.config\n        if (consent_persistence_name) {\n            return consent_persistence_name\n        } else if (opt_out_capturing_cookie_prefix) {\n            // Deprecated, but we still support it for backwards compatibility.\n            // This was deprecated because it differed in behaviour from storage.ts, and appends the token.\n            // This meant it was not possible to share the same consent state across multiple PostHog instances,\n            // and made it harder for people to migrate from other systems.\n            return opt_out_capturing_cookie_prefix + token\n        } else {\n            return OPT_OUT_PREFIX + token\n        }\n    }\n\n    private get _storedConsent(): ConsentStatus {\n        const value = this._storage._get(this._storageKey)\n        // be somewhat permissive in what we accept as yes/opt-in, to make it easier for people to migrate from other systems\n        return isYesLike(value) ? ConsentStatus.GRANTED : isNoLike(value) ? ConsentStatus.DENIED : ConsentStatus.PENDING\n    }\n\n    private get _storage() {\n        if (!this._persistentStore) {\n            const persistenceType = this._config.opt_out_capturing_persistence_type\n            this._persistentStore = persistenceType === 'localStorage' ? localStore : cookieStore\n            const otherStorage = persistenceType === 'localStorage' ? cookieStore : localStore\n\n            if (otherStorage._get(this._storageKey)) {\n                if (!this._persistentStore._get(this._storageKey)) {\n                    // This indicates we have moved to a new storage format so we migrate the value over\n                    this.optInOut(isYesLike(otherStorage._get(this._storageKey)))\n                }\n\n                otherStorage._remove(this._storageKey, this._config.cross_subdomain_cookie)\n            }\n        }\n\n        return this._persistentStore\n    }\n\n    private _getDnt(): boolean {\n        if (!this._config.respect_dnt) {\n            return false\n        }\n        return !!find(\n            [\n                navigator?.doNotTrack, // standard\n                (navigator as any)?.['msDoNotTrack'],\n                assignableWindow['doNotTrack'],\n            ],\n            (dntValue): boolean => {\n                return isYesLike(dntValue)\n            }\n        )\n    }\n}\n"]}