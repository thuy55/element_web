{"version":3,"file":"tracing-headers.js","sourceRoot":"","sources":["../../../src/extensions/tracing-headers.ts"],"names":[],"mappings":";;;AACA,4CAAmD;AACnD,0CAA8C;AAC9C,sCAA2C;AAE3C,IAAM,MAAM,GAAG,IAAA,qBAAY,EAAC,kBAAkB,CAAC,CAAA;AAE/C;IAII,wBAA6B,SAAkB;QAA/C,iBAAmD;QAAtB,cAAS,GAAT,SAAS,CAAS;QAHvC,qBAAgB,GAA6B,SAAS,CAAA;QACtD,uBAAkB,GAA6B,SAAS,CAAA;QA6BxD,oBAAe,GAAG;;YACtB,IAAI,IAAA,kBAAW,EAAC,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBACrC,MAAA,MAAA,0BAAgB,CAAC,qBAAqB,0CAAE,sBAAsB,0CAAE,SAAS,CACrE,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,IAAI,EAAE,EACjD,KAAI,CAAC,SAAS,CAAC,eAAe,EAAE,EAChC,KAAI,CAAC,SAAS,CAAC,cAAc,CAChC,CAAA;YACL,CAAC;YACD,IAAI,IAAA,kBAAW,EAAC,KAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBACvC,MAAA,MAAA,0BAAgB,CAAC,qBAAqB,0CAAE,sBAAsB,0CAAE,WAAW,CACvE,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,IAAI,EAAE,EACjD,KAAI,CAAC,SAAS,CAAC,eAAe,EAAE,EAChC,KAAI,CAAC,SAAS,CAAC,cAAc,CAChC,CAAA;YACL,CAAC;QACL,CAAC,CAAA;IA1CiD,CAAC;IAE3C,oCAAW,GAAnB,UAAoB,EAAc;;QAC9B,IAAI,MAAA,0BAAgB,CAAC,qBAAqB,0CAAE,sBAAsB,EAAE,CAAC;YACjE,iBAAiB;YACjB,EAAE,EAAE,CAAA;QACR,CAAC;QAED,MAAA,MAAA,0BAAgB,CAAC,qBAAqB,0CAAE,sBAAsB,mDAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,EAAE,UAAC,GAAG;YACpG,IAAI,GAAG,EAAE,CAAC;gBACN,OAAO,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAA;YACrD,CAAC;YACD,EAAE,EAAE,CAAA;QACR,CAAC,CAAC,CAAA;IACN,CAAC;IACM,6CAAoB,GAA3B;;QACI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;YAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC1C,CAAC;aAAM,CAAC;YACJ,MAAA,IAAI,CAAC,gBAAgB,oDAAI,CAAA;YACzB,MAAA,IAAI,CAAC,kBAAkB,oDAAI,CAAA;YAC3B,qDAAqD;YACrD,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAA;YACjC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;QACvC,CAAC;IACL,CAAC;IAkBL,qBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,wCAAc","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { assignableWindow } from '../utils/globals'\nimport { createLogger } from '../utils/logger'\nimport { isUndefined } from '@posthog/core'\n\nconst logger = createLogger('[TracingHeaders]')\n\nexport class TracingHeaders {\n    private _restoreXHRPatch: (() => void) | undefined = undefined\n    private _restoreFetchPatch: (() => void) | undefined = undefined\n\n    constructor(private readonly _instance: PostHog) {}\n\n    private _loadScript(cb: () => void): void {\n        if (assignableWindow.__PosthogExtensions__?.tracingHeadersPatchFns) {\n            // already loaded\n            cb()\n        }\n\n        assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(this._instance, 'tracing-headers', (err) => {\n            if (err) {\n                return logger.error('failed to load script', err)\n            }\n            cb()\n        })\n    }\n    public startIfEnabledOrStop() {\n        if (this._instance.config.__add_tracing_headers) {\n            this._loadScript(this._startCapturing)\n        } else {\n            this._restoreXHRPatch?.()\n            this._restoreFetchPatch?.()\n            // we don't want to call these twice so we reset them\n            this._restoreXHRPatch = undefined\n            this._restoreFetchPatch = undefined\n        }\n    }\n\n    private _startCapturing = () => {\n        if (isUndefined(this._restoreXHRPatch)) {\n            assignableWindow.__PosthogExtensions__?.tracingHeadersPatchFns?._patchXHR(\n                this._instance.config.__add_tracing_headers || [],\n                this._instance.get_distinct_id(),\n                this._instance.sessionManager\n            )\n        }\n        if (isUndefined(this._restoreFetchPatch)) {\n            assignableWindow.__PosthogExtensions__?.tracingHeadersPatchFns?._patchFetch(\n                this._instance.config.__add_tracing_headers || [],\n                this._instance.get_distinct_id(),\n                this._instance.sessionManager\n            )\n        }\n    }\n}\n"]}