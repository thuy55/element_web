{"version":3,"file":"QuestionTypes.jsx","sourceRoot":"","sources":["../../../../../src/extensions/surveys/components/QuestionTypes.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Fragment } from 'preact'\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks'\nimport {\n    BasicSurveyQuestion,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    SurveyAppearance,\n    SurveyQuestionType,\n} from '../../../posthog-surveys-types'\nimport { isArray, isNull, isNumber, isString } from '@posthog/core'\nimport { dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, veryDissatisfiedEmoji, verySatisfiedEmoji } from '../icons'\nimport { getDisplayOrderChoices, useSurveyContext } from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { QuestionHeader } from './QuestionHeader'\n\nexport interface CommonQuestionProps {\n    forceDisableHtml: boolean\n    appearance: SurveyAppearance\n    onSubmit: (res: string | string[] | number | null) => void\n    onPreviewSubmit: (res: string | string[] | number | null) => void\n    initialValue?: string | string[] | number | null\n    displayQuestionIndex: number\n}\n\ninterface OpenEndedInputState {\n    isSelected: boolean\n    inputValue: string\n}\n\nconst isValidStringArray = (value: unknown): value is string[] => {\n    return isArray(value) && value.every((item) => isString(item))\n}\n\nconst initializeSelectedChoices = (\n    initialValue: string | string[] | number | null | undefined,\n    questionType: SurveyQuestionType\n): string | string[] | null => {\n    if (isString(initialValue)) {\n        return initialValue\n    }\n    if (isValidStringArray(initialValue)) {\n        return initialValue\n    }\n    return questionType === SurveyQuestionType.SingleChoice ? null : []\n}\n\nconst initializeOpenEndedState = (\n    initialValue: string | string[] | number | null | undefined,\n    choices: string[]\n): OpenEndedInputState => {\n    if (isString(initialValue) && !choices.includes(initialValue)) {\n        return {\n            isSelected: true,\n            inputValue: initialValue,\n        }\n    }\n    if (isValidStringArray(initialValue)) {\n        const openEndedValue = initialValue.find((choice) => !choices.includes(choice))\n        if (openEndedValue) {\n            return {\n                isSelected: true,\n                inputValue: openEndedValue,\n            }\n        }\n    }\n    return {\n        isSelected: false,\n        inputValue: '',\n    }\n}\n\nexport function OpenTextQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    displayQuestionIndex,\n    initialValue,\n}: CommonQuestionProps & {\n    question: BasicSurveyQuestion\n}) {\n    const { isPreviewMode } = useSurveyContext()\n    const inputRef = useRef<HTMLTextAreaElement>(null)\n    const [text, setText] = useState<string>(() => {\n        if (isString(initialValue)) {\n            return initialValue\n        }\n        return ''\n    })\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (!isPreviewMode) {\n                inputRef.current?.focus()\n            }\n        }, 100)\n    }, [isPreviewMode])\n\n    const htmlFor = `surveyQuestion${displayQuestionIndex}`\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} htmlFor={htmlFor} />\n                <textarea\n                    ref={inputRef}\n                    id={htmlFor}\n                    rows={4}\n                    placeholder={appearance?.placeholder}\n                    onInput={(e) => {\n                        setText(e.currentTarget.value)\n                        e.stopPropagation()\n                    }}\n                    onKeyDown={(e) => {\n                        e.stopPropagation()\n                    }}\n                    value={text}\n                />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={!text && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(text)}\n                onPreviewSubmit={() => onPreviewSubmit(text)}\n            />\n        </Fragment>\n    )\n}\n\nexport function LinkQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n}: CommonQuestionProps & {\n    question: LinkSurveyQuestion\n}) {\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={false}\n                link={question.link}\n                appearance={appearance}\n                onSubmit={() => onSubmit('link clicked')}\n                onPreviewSubmit={() => onPreviewSubmit('link clicked')}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: RatingSurveyQuestion\n}) {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const [rating, setRating] = useState<number | null>(() => {\n        if (isNumber(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue) && initialValue.length > 0 && isNumber(parseInt(initialValue[0]))) {\n            return parseInt(initialValue[0])\n        }\n        if (isString(initialValue) && isNumber(parseInt(initialValue))) {\n            return parseInt(initialValue)\n        }\n        return null\n    })\n\n    const { isPreviewMode } = useSurveyContext()\n\n    const handleSubmit = (num: number) => {\n        if (isPreviewMode) {\n            return onPreviewSubmit(num)\n        }\n        return onSubmit(num)\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} />\n                <div className=\"rating-section\">\n                    <div className=\"rating-options\">\n                        {question.display === 'emoji' && (\n                            <div className=\"rating-options-emoji\">\n                                {(question.scale === 3 ? threeScaleEmojis : fiveScaleEmojis).map((emoji, idx) => {\n                                    const active = idx + 1 === rating\n                                    return (\n                                        <button\n                                            aria-label={`Rate ${idx + 1}`}\n                                            className={`ratings-emoji question-${displayQuestionIndex}-rating-${idx} ${\n                                                active ? 'rating-active' : ''\n                                            }`}\n                                            value={idx + 1}\n                                            key={idx}\n                                            type=\"button\"\n                                            onClick={() => {\n                                                const response = idx + 1\n                                                setRating(response)\n                                                if (question.skipSubmitButton) {\n                                                    handleSubmit(response)\n                                                }\n                                            }}\n                                        >\n                                            {emoji}\n                                        </button>\n                                    )\n                                })}\n                            </div>\n                        )}\n                        {question.display === 'number' && (\n                            <div\n                                className=\"rating-options-number\"\n                                style={{ gridTemplateColumns: `repeat(${scale - starting + 1}, minmax(0, 1fr))` }}\n                            >\n                                {getScaleNumbers(question.scale).map((number, idx) => {\n                                    const active = rating === number\n                                    return (\n                                        <RatingButton\n                                            key={idx}\n                                            displayQuestionIndex={displayQuestionIndex}\n                                            active={active}\n                                            appearance={appearance}\n                                            num={number}\n                                            setActiveNumber={(response) => {\n                                                setRating(response)\n                                                if (question.skipSubmitButton) {\n                                                    handleSubmit(response)\n                                                }\n                                            }}\n                                        />\n                                    )\n                                })}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"rating-text\">\n                        <div>{question.lowerBoundLabel}</div>\n                        <div>{question.upperBoundLabel}</div>\n                    </div>\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || appearance?.submitButtonText || 'Submit'}\n                submitDisabled={isNull(rating) && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(rating)}\n                onPreviewSubmit={() => onPreviewSubmit(rating)}\n                skipSubmitButton={question.skipSubmitButton}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingButton({\n    num,\n    active,\n    displayQuestionIndex,\n    setActiveNumber,\n}: {\n    num: number\n    active: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    setActiveNumber: (num: number) => void\n}) {\n    return (\n        <button\n            aria-label={`Rate ${num}`}\n            className={`ratings-number question-${displayQuestionIndex}-rating-${num} ${active ? 'rating-active' : ''}`}\n            type=\"button\"\n            onClick={() => {\n                setActiveNumber(num)\n            }}\n        >\n            {num}\n        </button>\n    )\n}\n\nexport function MultipleChoiceQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: MultipleSurveyQuestion\n}) {\n    const openChoiceInputRef = useRef<HTMLInputElement>(null)\n    const choices = useMemo(() => getDisplayOrderChoices(question), [question])\n    const [selectedChoices, setSelectedChoices] = useState<string | string[] | null>(() =>\n        initializeSelectedChoices(initialValue, question.type)\n    )\n    const [openEndedState, setOpenEndedState] = useState<OpenEndedInputState>(() =>\n        initializeOpenEndedState(initialValue, choices)\n    )\n\n    const { isPreviewMode } = useSurveyContext()\n\n    const isSingleChoiceQuestion = question.type === SurveyQuestionType.SingleChoice\n    const isMultipleChoiceQuestion = question.type === SurveyQuestionType.MultipleChoice\n\n    const shouldSkipSubmit = question.skipSubmitButton && isSingleChoiceQuestion && !question.hasOpenChoice\n\n    const handleChoiceChange = (val: string, isOpenChoice: boolean) => {\n        if (isOpenChoice) {\n            const newOpenSelected = !openEndedState.isSelected\n            setOpenEndedState((prev) => ({\n                ...prev,\n                isSelected: newOpenSelected,\n                inputValue: newOpenSelected ? prev.inputValue : '',\n            }))\n\n            if (isSingleChoiceQuestion) {\n                setSelectedChoices('')\n            }\n\n            // Focus the input when open choice is selected, slight delay because of the animation\n            if (newOpenSelected) {\n                setTimeout(() => openChoiceInputRef.current?.focus(), 75)\n            }\n            return\n        }\n\n        if (isSingleChoiceQuestion) {\n            setSelectedChoices(val)\n            // Deselect open choice when selecting another option\n            setOpenEndedState((prev) => ({\n                ...prev,\n                isSelected: false,\n                inputValue: '',\n            }))\n\n            if (shouldSkipSubmit) {\n                onSubmit(val)\n                if (isPreviewMode) {\n                    onPreviewSubmit(val)\n                }\n            }\n            return\n        }\n\n        if (isMultipleChoiceQuestion && isArray(selectedChoices)) {\n            if (selectedChoices.includes(val)) {\n                setSelectedChoices(selectedChoices.filter((choice) => choice !== val))\n            } else {\n                setSelectedChoices([...selectedChoices, val])\n            }\n        }\n    }\n\n    const handleOpenEndedInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        e.stopPropagation()\n        const newValue = e.currentTarget.value\n\n        setOpenEndedState((prev) => ({\n            ...prev,\n            inputValue: newValue,\n        }))\n\n        if (isSingleChoiceQuestion) {\n            setSelectedChoices(newValue)\n        }\n    }\n\n    const handleOpenEndedKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        e.stopPropagation()\n\n        // Handle Enter key to submit form if valid\n        if (e.key === 'Enter' && !isSubmitDisabled()) {\n            e.preventDefault()\n            handleSubmit()\n        }\n\n        // Handle Escape key to clear input and deselect\n        if (e.key === 'Escape') {\n            e.preventDefault()\n            setOpenEndedState((prev) => ({\n                ...prev,\n                isSelected: false,\n                inputValue: '',\n            }))\n            if (isSingleChoiceQuestion) {\n                setSelectedChoices(null)\n            }\n        }\n    }\n\n    const isSubmitDisabled = (): boolean => {\n        if (question.optional) {\n            return false\n        }\n        if (isNull(selectedChoices)) {\n            return true\n        }\n        if (isArray(selectedChoices)) {\n            if (!openEndedState.isSelected && selectedChoices.length === 0) {\n                return true\n            }\n        }\n        if (openEndedState.isSelected && openEndedState.inputValue.trim() === '') {\n            return true\n        }\n        return false\n    }\n\n    const handleSubmit = () => {\n        if (openEndedState.isSelected && isMultipleChoiceQuestion) {\n            if (isArray(selectedChoices)) {\n                isPreviewMode\n                    ? onPreviewSubmit([...selectedChoices, openEndedState.inputValue])\n                    : onSubmit([...selectedChoices, openEndedState.inputValue])\n            }\n        } else {\n            isPreviewMode ? onPreviewSubmit(selectedChoices) : onSubmit(selectedChoices)\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} />\n                <fieldset className=\"multiple-choice-options limit-height\">\n                    <legend className=\"sr-only\">\n                        {isMultipleChoiceQuestion ? ' Select all that apply' : ' Select one'}\n                    </legend>\n                    {choices.map((choice: string, idx: number) => {\n                        const isOpenChoice = !!question.hasOpenChoice && idx === question.choices.length - 1\n                        const inputId = `surveyQuestion${displayQuestionIndex}Choice${idx}`\n                        const openInputId = `${inputId}Open`\n\n                        const isChecked = isOpenChoice\n                            ? openEndedState.isSelected\n                            : isSingleChoiceQuestion\n                              ? selectedChoices === choice\n                              : isArray(selectedChoices) && selectedChoices.includes(choice)\n\n                        return (\n                            <label className={isOpenChoice ? 'choice-option-open' : ''} key={idx}>\n                                <div className=\"response-choice\">\n                                    <input\n                                        type={isSingleChoiceQuestion ? 'radio' : 'checkbox'}\n                                        name={inputId}\n                                        checked={isChecked}\n                                        onChange={() => handleChoiceChange(choice, isOpenChoice)}\n                                        id={inputId}\n                                        aria-controls={openInputId}\n                                    />\n                                    <span>{isOpenChoice ? `${choice}:` : choice}</span>\n                                </div>\n                                {isOpenChoice && (\n                                    <input\n                                        type=\"text\"\n                                        ref={openChoiceInputRef}\n                                        id={openInputId}\n                                        name={`question${displayQuestionIndex}Open`}\n                                        value={openEndedState.inputValue}\n                                        onKeyDown={handleOpenEndedKeyDown}\n                                        onInput={handleOpenEndedInputChange}\n                                        onClick={(e) => {\n                                            // Ensure the checkbox/radio gets checked when clicking the input\n                                            if (!openEndedState.isSelected) {\n                                                handleChoiceChange(choice, true)\n                                            }\n                                            e.stopPropagation()\n                                        }}\n                                        aria-label={`${choice} - please specify`}\n                                    />\n                                )}\n                            </label>\n                        )\n                    })}\n                </fieldset>\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={isSubmitDisabled()}\n                appearance={appearance}\n                onSubmit={handleSubmit}\n                onPreviewSubmit={handleSubmit}\n                skipSubmitButton={shouldSkipSubmit}\n            />\n        </Fragment>\n    )\n}\n\nconst threeScaleEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\nconst fiveScaleEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\nconst fiveScaleNumbers = [1, 2, 3, 4, 5]\nconst sevenScaleNumbers = [1, 2, 3, 4, 5, 6, 7]\nconst tenScaleNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfunction getScaleNumbers(scale: number): number[] {\n    switch (scale) {\n        case 5:\n            return fiveScaleNumbers\n        case 7:\n            return sevenScaleNumbers\n        case 10:\n            return tenScaleNumbers\n        default:\n            return fiveScaleNumbers\n    }\n}\n"]}