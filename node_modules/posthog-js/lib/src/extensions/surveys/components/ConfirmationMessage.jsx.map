{"version":3,"file":"ConfirmationMessage.jsx","sourceRoot":"","sources":["../../../../../src/extensions/surveys/components/ConfirmationMessage.tsx"],"names":[],"mappings":";;AAcA,kDAkDC;AAhED,iCAA0B;AAE1B,sEAAuE;AACvE,iDAA+C;AAC/C,mDAAyC;AAEzC,sCAAoD;AACpD,sEAA0D;AAC1D,wCAAiD;AACjD,kDAA0D;AAE1D,gGAAgG;AAChG,IAAM,MAAM,GAAG,gBAAiB,CAAA;AAEhC,SAAgB,mBAAmB,CAAC,EAcnC;QAbG,MAAM,YAAA,EACN,WAAW,iBAAA,EACX,WAAW,iBAAA,EACX,gBAAgB,sBAAA,EAChB,UAAU,gBAAA,EACV,OAAO,aAAA;IASC,IAAA,OAAO,GAAK,IAAA,kBAAU,EAAC,uCAAa,CAAC,QAA9B,CAA8B;IAE7C,IAAA,iBAAS,EAAC;QACN,IAAM,aAAa,GAAG,UAAC,KAAoB;YACvC,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE,CAAC;gBAClD,KAAK,CAAC,cAAc,EAAE,CAAA;gBACtB,OAAO,EAAE,CAAA;YACb,CAAC;QACL,CAAC,CAAA;QACD,IAAA,wBAAgB,EAAC,MAAM,EAAE,SAAS,EAAE,aAA8B,CAAC,CAAA;QACnE,OAAO;YACH,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;QACxD,CAAC,CAAA;IACL,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,OAAO,CACH,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAC5E;YAAA,CAAC,OAAO,IAAI,CAAC,uBAAM,CAAC,OAAO,CAAC,CAAC,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC,EAAG,CAChD;YAAA,CAAC,EAAE,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,CACrD;YAAA,CAAC,WAAW;YACR,IAAA,oDAA0B,EAAC;gBACvB,SAAS,EAAE,IAAA,UAAC,EAAC,GAAG,EAAE,EAAE,SAAS,EAAE,wBAAwB,EAAE,CAAC;gBAC1D,QAAQ,EAAE,WAAW;gBACrB,YAAY,EAAE,CAAC,gBAAgB,IAAI,WAAW,KAAK,MAAM;aAC5D,CAAC,CACN;YAAA,CAAC,OAAO,IAAI,CACR,CAAC,6BAAa,CACV,IAAI,CAAC,CAAC,UAAU,CAAC,8BAA8B,IAAI,OAAO,CAAC,CAC3D,cAAc,CAAC,CAAC,KAAK,CAAC,CACtB,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,QAAQ,CAAC,CAAC,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC,EAC5B,CACL,CACL;QAAA,EAAE,GAAG,CAAC,CACT,CAAA;AACL,CAAC","sourcesContent":["import { h } from 'preact'\nimport { SurveyAppearance, SurveyQuestionDescriptionContentType } from '../../../posthog-surveys-types'\nimport { renderChildrenAsTextOrHtml } from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { Cancel } from './QuestionHeader'\n\nimport { useContext, useEffect } from 'preact/hooks'\nimport { SurveyContext } from '../surveys-extension-utils'\nimport { addEventListener } from '../../../utils'\nimport { window as _window } from '../../../utils/globals'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window\n\nexport function ConfirmationMessage({\n    header,\n    description,\n    contentType,\n    forceDisableHtml,\n    appearance,\n    onClose,\n}: {\n    header: string\n    description: string\n    forceDisableHtml: boolean\n    contentType?: SurveyQuestionDescriptionContentType\n    appearance: SurveyAppearance\n    onClose: () => void\n}) {\n    const { isPopup } = useContext(SurveyContext)\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'Enter' || event.key === 'Escape') {\n                event.preventDefault()\n                onClose()\n            }\n        }\n        addEventListener(window, 'keydown', handleKeyDown as EventListener)\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown)\n        }\n    }, [onClose])\n\n    return (\n        <div className=\"thank-you-message\" role=\"status\" tabIndex={0} aria-atomic=\"true\">\n            {isPopup && <Cancel onClick={() => onClose()} />}\n            <h3 className=\"thank-you-message-header\">{header}</h3>\n            {description &&\n                renderChildrenAsTextOrHtml({\n                    component: h('p', { className: 'thank-you-message-body' }),\n                    children: description,\n                    renderAsHtml: !forceDisableHtml && contentType !== 'text',\n                })}\n            {isPopup && (\n                <BottomSection\n                    text={appearance.thankYouMessageCloseButtonText || 'Close'}\n                    submitDisabled={false}\n                    appearance={appearance}\n                    onSubmit={() => onClose()}\n                />\n            )}\n        </div>\n    )\n}\n"]}