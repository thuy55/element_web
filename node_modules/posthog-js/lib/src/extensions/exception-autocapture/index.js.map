{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/extensions/exception-autocapture/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { assignableWindow, window } from '../../utils/globals'\nimport { PostHog } from '../../posthog-core'\nimport { ExceptionAutoCaptureConfig, RemoteConfig } from '../../types'\n\nimport { createLogger } from '../../utils/logger'\nimport { EXCEPTION_CAPTURE_ENABLED_SERVER_SIDE } from '../../constants'\nimport { isUndefined, BucketedRateLimiter, isObject } from '@posthog/core'\nimport { ErrorTracking } from '@posthog/core'\n\nconst logger = createLogger('[ExceptionAutocapture]')\n\nexport class ExceptionObserver {\n    private _instance: PostHog\n    private _rateLimiter: BucketedRateLimiter<string>\n    private _remoteEnabled: boolean | undefined\n    private _config: Required<ExceptionAutoCaptureConfig>\n    private _unwrapOnError: (() => void) | undefined\n    private _unwrapUnhandledRejection: (() => void) | undefined\n    private _unwrapConsoleError: (() => void) | undefined\n\n    constructor(instance: PostHog) {\n        this._instance = instance\n        this._remoteEnabled = !!this._instance.persistence?.props[EXCEPTION_CAPTURE_ENABLED_SERVER_SIDE]\n        this._config = this._requiredConfig()\n\n        // by default captures ten exceptions before rate limiting by exception type\n        // refills at a rate of one token / 10 second period\n        // e.g. will capture 1 exception rate limited exception every 10 seconds until burst ends\n        this._rateLimiter = new BucketedRateLimiter({\n            refillRate: this._instance.config.error_tracking.__exceptionRateLimiterRefillRate ?? 1,\n            bucketSize: this._instance.config.error_tracking.__exceptionRateLimiterBucketSize ?? 10,\n            refillInterval: 10000, // ten seconds in milliseconds,\n            _logger: logger,\n        })\n\n        this.startIfEnabled()\n    }\n\n    private _requiredConfig(): Required<ExceptionAutoCaptureConfig> {\n        const providedConfig = this._instance.config.capture_exceptions\n        let config = {\n            capture_unhandled_errors: false,\n            capture_unhandled_rejections: false,\n            capture_console_errors: false,\n        }\n\n        if (isObject(providedConfig)) {\n            config = { ...config, ...providedConfig }\n        } else if (isUndefined(providedConfig) ? this._remoteEnabled : providedConfig) {\n            config = { ...config, capture_unhandled_errors: true, capture_unhandled_rejections: true }\n        }\n\n        return config\n    }\n\n    public get isEnabled(): boolean {\n        return (\n            this._config.capture_console_errors ||\n            this._config.capture_unhandled_errors ||\n            this._config.capture_unhandled_rejections\n        )\n    }\n\n    startIfEnabled(): void {\n        if (this.isEnabled) {\n            logger.info('enabled')\n            this._loadScript(this._startCapturing)\n        }\n    }\n\n    private _loadScript(cb: () => void): void {\n        if (assignableWindow.__PosthogExtensions__?.errorWrappingFunctions) {\n            // already loaded\n            cb()\n        }\n\n        assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(\n            this._instance,\n            'exception-autocapture',\n            (err) => {\n                if (err) {\n                    return logger.error('failed to load script', err)\n                }\n                cb()\n            }\n        )\n    }\n\n    private _startCapturing = () => {\n        if (!window || !this.isEnabled || !assignableWindow.__PosthogExtensions__?.errorWrappingFunctions) {\n            return\n        }\n\n        const wrapOnError = assignableWindow.__PosthogExtensions__.errorWrappingFunctions.wrapOnError\n        const wrapUnhandledRejection =\n            assignableWindow.__PosthogExtensions__.errorWrappingFunctions.wrapUnhandledRejection\n        const wrapConsoleError = assignableWindow.__PosthogExtensions__.errorWrappingFunctions.wrapConsoleError\n\n        try {\n            if (!this._unwrapOnError && this._config.capture_unhandled_errors) {\n                this._unwrapOnError = wrapOnError(this.captureException.bind(this))\n            }\n            if (!this._unwrapUnhandledRejection && this._config.capture_unhandled_rejections) {\n                this._unwrapUnhandledRejection = wrapUnhandledRejection(this.captureException.bind(this))\n            }\n            if (!this._unwrapConsoleError && this._config.capture_console_errors) {\n                this._unwrapConsoleError = wrapConsoleError(this.captureException.bind(this))\n            }\n        } catch (e) {\n            logger.error('failed to start', e)\n            this._stopCapturing()\n        }\n    }\n\n    private _stopCapturing() {\n        this._unwrapOnError?.()\n        this._unwrapOnError = undefined\n\n        this._unwrapUnhandledRejection?.()\n        this._unwrapUnhandledRejection = undefined\n\n        this._unwrapConsoleError?.()\n        this._unwrapConsoleError = undefined\n    }\n\n    onRemoteConfig(response: RemoteConfig) {\n        const autocaptureExceptionsResponse = response.autocaptureExceptions\n\n        // store this in-memory in case persistence is disabled\n        this._remoteEnabled = !!autocaptureExceptionsResponse || false\n        this._config = this._requiredConfig()\n\n        if (this._instance.persistence) {\n            this._instance.persistence.register({\n                [EXCEPTION_CAPTURE_ENABLED_SERVER_SIDE]: this._remoteEnabled,\n            })\n        }\n\n        this.startIfEnabled()\n    }\n\n    captureException(errorProperties: ErrorTracking.ErrorProperties) {\n        const exceptionType = errorProperties?.$exception_list?.[0]?.type ?? 'Exception'\n        const isRateLimited = this._rateLimiter.consumeRateLimit(exceptionType)\n\n        if (isRateLimited) {\n            logger.info('Skipping exception capture because of client rate limiting.', {\n                exception: exceptionType,\n            })\n            return\n        }\n\n        this._instance.exceptions.sendExceptionEvent(errorProperties)\n    }\n}\n"]}