{"version":3,"file":"surveys.jsx","sourceRoot":"","sources":["../../../src/extensions/surveys.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as Preact from 'preact'\nimport { useContext, useEffect, useMemo, useRef, useState } from 'preact/hooks'\nimport { PostHog } from '../posthog-core'\nimport {\n    Survey,\n    SurveyCallback,\n    SurveyEventName,\n    SurveyEventProperties,\n    SurveyPosition,\n    SurveyQuestion,\n    SurveyQuestionBranchingType,\n    SurveyQuestionType,\n    SurveySchedule,\n    SurveyType,\n    SurveyWidgetType,\n    SurveyWithTypeAndAppearance,\n} from '../posthog-surveys-types'\nimport { addEventListener } from '../utils'\nimport { document as _document, window as _window } from '../utils/globals'\nimport {\n    doesSurveyActivateByAction,\n    doesSurveyActivateByEvent,\n    IN_APP_SURVEY_TYPES,\n    isSurveyRunning,\n    SURVEY_LOGGER as logger,\n} from '../utils/survey-utils'\nimport { isNull, isUndefined } from '@posthog/core'\nimport { uuidv7 } from '../uuidv7'\nimport { ConfirmationMessage } from './surveys/components/ConfirmationMessage'\nimport { Cancel } from './surveys/components/QuestionHeader'\nimport {\n    CommonQuestionProps,\n    LinkQuestion,\n    MultipleChoiceQuestion,\n    OpenTextQuestion,\n    RatingQuestion,\n} from './surveys/components/QuestionTypes'\nimport {\n    canActivateRepeatedly,\n    retrieveSurveyShadow,\n    defaultSurveyAppearance,\n    dismissedSurveyEvent,\n    doesSurveyDeviceTypesMatch,\n    doesSurveyMatchSelector,\n    doesSurveyUrlMatch,\n    getDisplayOrderQuestions,\n    getInProgressSurveyState,\n    getSurveyContainerClass,\n    getSurveyResponseKey,\n    getSurveySeen,\n    hasWaitPeriodPassed,\n    isSurveyInProgress,\n    sendSurveyEvent,\n    setInProgressSurveyState,\n    SurveyContext,\n    getSurveyStylesheet,\n    addSurveyCSSVariablesToElement,\n} from './surveys/surveys-extension-utils'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nconst DISPATCH_FEEDBACK_WIDGET_EVENT = 'ph:show_survey_widget'\nconst WIDGET_LISTENER_ATTRIBUTE = 'PHWidgetSurveyClickListener'\n\nfunction getRatingBucketForResponseValue(responseValue: number, scale: number) {\n    if (scale === 3) {\n        if (responseValue < 1 || responseValue > 3) {\n            throw new Error('The response must be in range 1-3')\n        }\n\n        return responseValue === 1 ? 'negative' : responseValue === 2 ? 'neutral' : 'positive'\n    } else if (scale === 5) {\n        if (responseValue < 1 || responseValue > 5) {\n            throw new Error('The response must be in range 1-5')\n        }\n\n        return responseValue <= 2 ? 'negative' : responseValue === 3 ? 'neutral' : 'positive'\n    } else if (scale === 7) {\n        if (responseValue < 1 || responseValue > 7) {\n            throw new Error('The response must be in range 1-7')\n        }\n\n        return responseValue <= 3 ? 'negative' : responseValue === 4 ? 'neutral' : 'positive'\n    } else if (scale === 10) {\n        if (responseValue < 0 || responseValue > 10) {\n            throw new Error('The response must be in range 0-10')\n        }\n\n        return responseValue <= 6 ? 'detractors' : responseValue <= 8 ? 'passives' : 'promoters'\n    }\n\n    throw new Error('The scale must be one of: 3, 5, 7, 10')\n}\n\nexport function getNextSurveyStep(\n    survey: Survey,\n    currentQuestionIndex: number,\n    response: string | string[] | number | null\n) {\n    const question = survey.questions[currentQuestionIndex]\n    const nextQuestionIndex = currentQuestionIndex + 1\n\n    if (!question.branching?.type) {\n        if (currentQuestionIndex === survey.questions.length - 1) {\n            return SurveyQuestionBranchingType.End\n        }\n\n        return nextQuestionIndex\n    }\n\n    if (question.branching.type === SurveyQuestionBranchingType.End) {\n        return SurveyQuestionBranchingType.End\n    } else if (question.branching.type === SurveyQuestionBranchingType.SpecificQuestion) {\n        if (Number.isInteger(question.branching.index)) {\n            return question.branching.index\n        }\n    } else if (question.branching.type === SurveyQuestionBranchingType.ResponseBased) {\n        // Single choice\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            // :KLUDGE: for now, look up the choiceIndex based on the response\n            // TODO: once QuestionTypes.MultipleChoiceQuestion is refactored, pass the selected choiceIndex into this method\n            let selectedChoiceIndex = question.choices.indexOf(`${response}`)\n\n            if (selectedChoiceIndex === -1 && question.hasOpenChoice) {\n                // if the response is not found in the choices, it must be the open choice,\n                // which is always the last choice\n                selectedChoiceIndex = question.choices.length - 1\n            }\n\n            if (question.branching?.responseValues?.hasOwnProperty(selectedChoiceIndex)) {\n                const nextStep = question.branching.responseValues[selectedChoiceIndex]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        } else if (question.type === SurveyQuestionType.Rating) {\n            if (typeof response !== 'number' || !Number.isInteger(response)) {\n                throw new Error('The response type must be an integer')\n            }\n\n            const ratingBucket = getRatingBucketForResponseValue(response, question.scale)\n\n            if (question.branching?.responseValues?.hasOwnProperty(ratingBucket)) {\n                const nextStep = question.branching.responseValues[ratingBucket]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        }\n\n        return nextQuestionIndex\n    }\n\n    logger.warn('Falling back to next question index due to unexpected branching type')\n    return nextQuestionIndex\n}\n\nconst SURVEY_NEXT_TO_TRIGGER_PARAMS = {\n    ESTIMATED_MIN_HEIGHT: 250,\n    HORIZONTAL_PADDING: 20,\n    TRIGGER_SPACING: 12,\n} as const\n\nfunction getNextToTriggerPosition(target: HTMLElement, surveyWidth: number): React.CSSProperties | null {\n    try {\n        const buttonRect = target.getBoundingClientRect()\n        const viewportHeight = window.innerHeight\n        const viewportWidth = window.innerWidth\n        const estimatedMinSurveyHeight = SURVEY_NEXT_TO_TRIGGER_PARAMS.ESTIMATED_MIN_HEIGHT\n        const buttonCenterX = buttonRect.left + buttonRect.width / 2\n        let left = buttonCenterX - surveyWidth / 2\n        const horizontalPadding = SURVEY_NEXT_TO_TRIGGER_PARAMS.HORIZONTAL_PADDING\n        if (left + surveyWidth > viewportWidth - horizontalPadding) {\n            left = viewportWidth - surveyWidth - horizontalPadding\n        }\n        if (left < horizontalPadding) {\n            left = horizontalPadding\n        }\n        const spacing = SURVEY_NEXT_TO_TRIGGER_PARAMS.TRIGGER_SPACING\n        const spaceBelow = viewportHeight - buttonRect.bottom\n        const spaceAbove = buttonRect.top\n        const showAbove = spaceBelow < estimatedMinSurveyHeight && spaceAbove > spaceBelow\n\n        return {\n            position: 'fixed',\n            top: showAbove ? 'auto' : `${buttonRect.bottom + spacing}px`,\n            left: `${left}px`,\n            right: 'auto',\n            bottom: showAbove ? `${viewportHeight - buttonRect.top + spacing}px` : 'auto',\n            zIndex: defaultSurveyAppearance.zIndex,\n        } satisfies React.CSSProperties\n    } catch (error) {\n        logger.warn('Failed to calculate trigger position:', error)\n        return null\n    }\n}\n\n// Keep in sync with posthog/constants.py on main repo\nconst SURVEY_TARGETING_FLAG_PREFIX = 'survey-targeting-'\n\nexport class SurveyManager {\n    private _posthog: PostHog\n    private _surveyInFocus: string | null\n    private _surveyTimeouts: Map<string, NodeJS.Timeout> = new Map()\n    private _widgetSelectorListeners: Map<string, { element: Element; listener: EventListener; survey: Survey }> =\n        new Map()\n\n    constructor(posthog: PostHog) {\n        this._posthog = posthog\n        // This is used to track the survey that is currently in focus. We only show one survey at a time.\n        this._surveyInFocus = null\n    }\n\n    private _clearSurveyTimeout(surveyId: string) {\n        const timeout = this._surveyTimeouts.get(surveyId)\n        if (timeout) {\n            clearTimeout(timeout)\n            this._surveyTimeouts.delete(surveyId)\n        }\n    }\n\n    public handlePopoverSurvey = (survey: Survey): void => {\n        this._clearSurveyTimeout(survey.id)\n        this._addSurveyToFocus(survey)\n        const delaySeconds = survey.appearance?.surveyPopupDelaySeconds || 0\n        const { shadow } = retrieveSurveyShadow(survey, this._posthog)\n        if (delaySeconds <= 0) {\n            return Preact.render(\n                <SurveyPopup\n                    posthog={this._posthog}\n                    survey={survey}\n                    removeSurveyFromFocus={this._removeSurveyFromFocus}\n                />,\n                shadow\n            )\n        }\n        const timeoutId = setTimeout(() => {\n            if (!doesSurveyUrlMatch(survey)) {\n                return this._removeSurveyFromFocus(survey)\n            }\n            // rendering with surveyPopupDelaySeconds = 0 because we're already handling the timeout here\n            Preact.render(\n                <SurveyPopup\n                    posthog={this._posthog}\n                    survey={{ ...survey, appearance: { ...survey.appearance, surveyPopupDelaySeconds: 0 } }}\n                    removeSurveyFromFocus={this._removeSurveyFromFocus}\n                />,\n                shadow\n            )\n        }, delaySeconds * 1000)\n        this._surveyTimeouts.set(survey.id, timeoutId)\n    }\n\n    private _handleWidget = (survey: Survey): void => {\n        // Ensure widget container exists if it doesn't\n        const { shadow, isNewlyCreated } = retrieveSurveyShadow(survey, this._posthog)\n\n        // If the widget is already rendered, do nothing. Otherwise the widget will be re-rendered every second\n        if (!isNewlyCreated) {\n            return\n        }\n\n        Preact.render(<FeedbackWidget posthog={this._posthog} survey={survey} key={survey.id} />, shadow)\n    }\n\n    private _removeWidgetSelectorListener = (survey: Pick<Survey, 'id' | 'type' | 'appearance'>): void => {\n        this._removeSurveyFromDom(survey)\n        const existing = this._widgetSelectorListeners.get(survey.id)\n        if (existing) {\n            existing.element.removeEventListener('click', existing.listener)\n            existing.element.removeAttribute(WIDGET_LISTENER_ATTRIBUTE)\n            this._widgetSelectorListeners.delete(survey.id)\n            logger.info(`Removed click listener for survey ${survey.id}`)\n        }\n    }\n\n    private _manageWidgetSelectorListener = (survey: Survey, selector: string): void => {\n        const currentElement = document.querySelector(selector)\n        const existingListenerData = this._widgetSelectorListeners.get(survey.id)\n\n        if (!currentElement) {\n            if (existingListenerData) {\n                this._removeWidgetSelectorListener(survey)\n            }\n            return\n        }\n\n        this._handleWidget(survey)\n\n        if (existingListenerData) {\n            // Listener exists, check if element changed\n            if (currentElement !== existingListenerData.element) {\n                logger.info(`Selector element changed for survey ${survey.id}. Re-attaching listener.`)\n                this._removeWidgetSelectorListener(survey)\n                // Continue to attach listener to the new element below\n            } else {\n                // Element is the same, listener already attached, do nothing\n                return\n            }\n        }\n\n        // Element found, and no listener attached (or it was just removed from old element)\n        if (!currentElement.hasAttribute(WIDGET_LISTENER_ATTRIBUTE)) {\n            const listener = (event: Event) => {\n                event.stopPropagation() // Prevent bubbling\n\n                const positionStyles =\n                    survey.appearance?.position === SurveyPosition.NextToTrigger\n                        ? getNextToTriggerPosition(\n                              event.currentTarget as HTMLElement,\n                              parseInt(survey.appearance?.maxWidth || defaultSurveyAppearance.maxWidth)\n                          )\n                        : {}\n\n                window.dispatchEvent(\n                    new CustomEvent(DISPATCH_FEEDBACK_WIDGET_EVENT, {\n                        detail: { surveyId: survey.id, position: positionStyles },\n                    })\n                )\n            }\n\n            addEventListener(currentElement, 'click', listener)\n            currentElement.setAttribute(WIDGET_LISTENER_ATTRIBUTE, 'true')\n            this._widgetSelectorListeners.set(survey.id, { element: currentElement, listener, survey })\n            logger.info(`Attached click listener for feedback button survey ${survey.id}`)\n        }\n    }\n\n    /**\n     * Sorts surveys by their appearance delay in ascending order. If a survey does not have an appearance delay,\n     * it is considered to have a delay of 0.\n     * @param surveys\n     * @returns The surveys sorted by their appearance delay\n     */\n    private _sortSurveysByAppearanceDelay(surveys: Survey[]): Survey[] {\n        return surveys.sort((a, b) => {\n            const isSurveyInProgressA = isSurveyInProgress(a)\n            const isSurveyInProgressB = isSurveyInProgress(b)\n            if (isSurveyInProgressA && !isSurveyInProgressB) {\n                return -1 // a comes before b (in progress surveys first)\n            }\n            if (!isSurveyInProgressA && isSurveyInProgressB) {\n                return 1 // a comes after b (in progress surveys first)\n            }\n            const aIsAlways = a.schedule === SurveySchedule.Always\n            const bIsAlways = b.schedule === SurveySchedule.Always\n\n            if (aIsAlways && !bIsAlways) {\n                return 1 // a comes after b\n            }\n            if (!aIsAlways && bIsAlways) {\n                return -1 // a comes before b\n            }\n            // If both are Always or neither is Always, sort by delay\n            return (a.appearance?.surveyPopupDelaySeconds || 0) - (b.appearance?.surveyPopupDelaySeconds || 0)\n        })\n    }\n\n    public renderPopover = (survey: Survey): void => {\n        const { shadow } = retrieveSurveyShadow(survey, this._posthog)\n        Preact.render(\n            <SurveyPopup posthog={this._posthog} survey={survey} removeSurveyFromFocus={this._removeSurveyFromFocus} />,\n            shadow\n        )\n    }\n\n    public renderSurvey = (survey: Survey, selector: Element): void => {\n        Preact.render(\n            <SurveyPopup\n                posthog={this._posthog}\n                survey={survey}\n                removeSurveyFromFocus={this._removeSurveyFromFocus}\n                isPopup={false}\n            />,\n            selector\n        )\n    }\n\n    private _isSurveyFeatureFlagEnabled(flagKey: string | null, flagVariant: string | undefined = undefined) {\n        if (!flagKey) {\n            return true\n        }\n        const isFeatureEnabled = !!this._posthog.featureFlags.isFeatureEnabled(flagKey, {\n            send_event: !flagKey.startsWith(SURVEY_TARGETING_FLAG_PREFIX),\n        })\n        let flagVariantCheck = true\n        if (flagVariant) {\n            const flagVariantValue = this._posthog.featureFlags.getFeatureFlag(flagKey, { send_event: false })\n            flagVariantCheck = flagVariantValue === flagVariant || flagVariant === 'any'\n        }\n        return isFeatureEnabled && flagVariantCheck\n    }\n\n    private _isSurveyConditionMatched(survey: Survey): boolean {\n        if (!survey.conditions) {\n            return true\n        }\n        return doesSurveyUrlMatch(survey) && doesSurveyDeviceTypesMatch(survey) && doesSurveyMatchSelector(survey)\n    }\n\n    private _internalFlagCheckSatisfied(survey: Survey): boolean {\n        return (\n            canActivateRepeatedly(survey) ||\n            this._isSurveyFeatureFlagEnabled(survey.internal_targeting_flag_key) ||\n            isSurveyInProgress(survey)\n        )\n    }\n\n    public checkSurveyEligibility(survey: Survey): { eligible: boolean; reason?: string } {\n        const eligibility = { eligible: true, reason: undefined as string | undefined }\n\n        if (!isSurveyRunning(survey)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey is not running. It was completed on ${survey.end_date}`\n            return eligibility\n        }\n\n        if (!IN_APP_SURVEY_TYPES.includes(survey.type)) {\n            eligibility.eligible = false\n            eligibility.reason = `Surveys of type ${survey.type} are never eligible to be shown in the app`\n            return eligibility\n        }\n\n        const linkedFlagVariant = survey.conditions?.linkedFlagVariant\n        if (!this._isSurveyFeatureFlagEnabled(survey.linked_flag_key, linkedFlagVariant)) {\n            eligibility.eligible = false\n            if (!linkedFlagVariant) {\n                eligibility.reason = `Survey linked feature flag is not enabled`\n            } else {\n                eligibility.reason = `Survey linked feature flag is not enabled for variant ${linkedFlagVariant}`\n            }\n            return eligibility\n        }\n\n        if (!this._isSurveyFeatureFlagEnabled(survey.targeting_flag_key)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey targeting feature flag is not enabled`\n            return eligibility\n        }\n\n        if (!this._internalFlagCheckSatisfied(survey)) {\n            eligibility.eligible = false\n            eligibility.reason =\n                'Survey internal targeting flag is not enabled and survey cannot activate repeatedly and survey is not in progress'\n            return eligibility\n        }\n\n        if (!hasWaitPeriodPassed(survey.conditions?.seenSurveyWaitPeriodInDays)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey wait period has not passed`\n            return eligibility\n        }\n\n        if (getSurveySeen(survey)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey has already been seen and it can't be activated again`\n            return eligibility\n        }\n\n        return eligibility\n    }\n\n    /**\n     * Surveys can be activated by events or actions. This method checks if the survey has events and actions,\n     * and if so, it checks if the survey has been activated.\n     * @param survey\n     */\n    private _hasActionOrEventTriggeredSurvey(survey: Survey): boolean {\n        if (!doesSurveyActivateByEvent(survey) && !doesSurveyActivateByAction(survey)) {\n            // If survey doesn't depend on events/actions, it's considered \"triggered\" by default\n            return true\n        }\n        const surveysActivatedByEventsOrActions: string[] | undefined =\n            this._posthog.surveys._surveyEventReceiver?.getSurveys()\n        return !!surveysActivatedByEventsOrActions?.includes(survey.id)\n    }\n\n    private _checkFlags(survey: Survey): boolean {\n        if (!survey.feature_flag_keys?.length) {\n            return true\n        }\n\n        return survey.feature_flag_keys.every(({ key, value }) => {\n            if (!key || !value) {\n                return true\n            }\n            return this._isSurveyFeatureFlagEnabled(value)\n        })\n    }\n\n    public getActiveMatchingSurveys = (callback: SurveyCallback, forceReload = false): void => {\n        this._posthog?.surveys.getSurveys((surveys) => {\n            const targetingMatchedSurveys = surveys.filter((survey) => {\n                const eligibility = this.checkSurveyEligibility(survey)\n                return (\n                    eligibility.eligible &&\n                    this._isSurveyConditionMatched(survey) &&\n                    this._hasActionOrEventTriggeredSurvey(survey) &&\n                    this._checkFlags(survey)\n                )\n            })\n\n            callback(targetingMatchedSurveys)\n        }, forceReload)\n    }\n\n    public callSurveysAndEvaluateDisplayLogic = (forceReload: boolean = false): void => {\n        this.getActiveMatchingSurveys((surveys) => {\n            const inAppSurveysWithDisplayLogic = surveys.filter(\n                (survey) => survey.type === SurveyType.Popover || survey.type === SurveyType.Widget\n            )\n\n            // Create a queue of surveys sorted by their appearance delay.  We will evaluate the display logic\n            // for each survey in the queue in order, and only display one survey at a time.\n            const inAppSurveysQueue = this._sortSurveysByAppearanceDelay(inAppSurveysWithDisplayLogic)\n\n            // Keep track of surveys processed this cycle to remove listeners for inactive ones\n            const activeSelectorSurveys = new Set<string>()\n\n            inAppSurveysQueue.forEach((survey) => {\n                // Widget Type Logic\n                if (survey.type === SurveyType.Widget) {\n                    if (survey.appearance?.widgetType === SurveyWidgetType.Tab) {\n                        this._handleWidget(survey)\n                        return\n                    }\n\n                    // For selector widget types, we need to manage the listener attachment/detachment dynamically\n                    if (\n                        survey.appearance?.widgetType === SurveyWidgetType.Selector &&\n                        survey.appearance?.widgetSelector\n                    ) {\n                        activeSelectorSurveys.add(survey.id)\n                        this._manageWidgetSelectorListener(survey, survey.appearance?.widgetSelector)\n                    }\n                }\n\n                // Popover Type Logic (only one shown at a time)\n                if (isNull(this._surveyInFocus) && survey.type === SurveyType.Popover) {\n                    this.handlePopoverSurvey(survey)\n                }\n            })\n\n            // Clean up listeners for surveys that are no longer active or matched\n            this._widgetSelectorListeners.forEach(({ survey }) => {\n                if (!activeSelectorSurveys.has(survey.id)) {\n                    this._removeWidgetSelectorListener(survey)\n                }\n            })\n        }, forceReload)\n    }\n\n    private _addSurveyToFocus = (survey: Pick<Survey, 'id'>): void => {\n        if (!isNull(this._surveyInFocus)) {\n            logger.error(`Survey ${this._surveyInFocus} already in focus. Cannot add survey ${survey.id}.`)\n        }\n        this._surveyInFocus = survey.id\n    }\n\n    private _removeSurveyFromDom(survey: Pick<Survey, 'id' | 'type' | 'appearance'>): void {\n        try {\n            const shadowContainer = document.querySelector(getSurveyContainerClass(survey, true))\n            if (shadowContainer?.shadowRoot) {\n                Preact.render(null, shadowContainer.shadowRoot)\n            }\n            shadowContainer?.remove()\n        } catch (error) {\n            logger.warn(`Failed to remove survey ${survey.id} from DOM:`, error)\n        }\n    }\n\n    private _removeSurveyFromFocus = (survey: SurveyWithTypeAndAppearance): void => {\n        if (this._surveyInFocus !== survey.id) {\n            logger.error(`Survey ${survey.id} is not in focus. Cannot remove survey ${survey.id}.`)\n        }\n        this._clearSurveyTimeout(survey.id)\n        this._surveyInFocus = null\n        this._removeSurveyFromDom(survey)\n    }\n\n    // Expose internal state and methods for testing\n    public getTestAPI() {\n        return {\n            addSurveyToFocus: this._addSurveyToFocus,\n            removeSurveyFromFocus: this._removeSurveyFromFocus,\n            surveyInFocus: this._surveyInFocus,\n            surveyTimeouts: this._surveyTimeouts,\n            handleWidget: this._handleWidget,\n            handlePopoverSurvey: this.handlePopoverSurvey,\n            manageWidgetSelectorListener: this._manageWidgetSelectorListener,\n            sortSurveysByAppearanceDelay: this._sortSurveysByAppearanceDelay,\n            checkFlags: this._checkFlags.bind(this),\n            isSurveyFeatureFlagEnabled: this._isSurveyFeatureFlagEnabled.bind(this),\n        }\n    }\n}\n\nconst DEFAULT_PREVIEW_POSITION_STYLES: React.CSSProperties = {\n    position: 'relative',\n    left: 'unset',\n    right: 'unset',\n    top: 'unset',\n    bottom: 'unset',\n    transform: 'unset',\n}\n\nexport const renderSurveysPreview = ({\n    survey,\n    parentElement,\n    previewPageIndex,\n    forceDisableHtml,\n    onPreviewSubmit,\n    positionStyles = DEFAULT_PREVIEW_POSITION_STYLES,\n}: {\n    survey: Survey\n    parentElement: HTMLElement\n    previewPageIndex: number\n    forceDisableHtml?: boolean\n    onPreviewSubmit?: (res: string | string[] | number | null) => void\n    posthog?: PostHog\n    positionStyles?: React.CSSProperties\n}) => {\n    const currentStyle = parentElement.querySelector('style[data-ph-survey-style]')\n    if (currentStyle) {\n        currentStyle.remove()\n    }\n    const stylesheet = getSurveyStylesheet()\n    if (stylesheet) {\n        parentElement.appendChild(stylesheet)\n        addSurveyCSSVariablesToElement(parentElement, survey.type, survey.appearance)\n    }\n    Preact.render(\n        <SurveyPopup\n            survey={survey}\n            forceDisableHtml={forceDisableHtml}\n            style={positionStyles}\n            onPreviewSubmit={onPreviewSubmit}\n            previewPageIndex={previewPageIndex}\n            removeSurveyFromFocus={() => {}}\n        />,\n        parentElement\n    )\n}\n\nexport const renderFeedbackWidgetPreview = ({\n    survey,\n    root,\n    forceDisableHtml,\n}: {\n    survey: Survey\n    root: HTMLElement\n    forceDisableHtml?: boolean\n}) => {\n    const stylesheet = getSurveyStylesheet()\n    if (stylesheet) {\n        root.appendChild(stylesheet)\n        addSurveyCSSVariablesToElement(root, survey.type, survey.appearance)\n    }\n\n    Preact.render(<FeedbackWidget forceDisableHtml={forceDisableHtml} survey={survey} readOnly={true} />, root)\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog, isSurveysEnabled: boolean | undefined) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n\n    const surveyManager = new SurveyManager(posthog)\n    if (posthog.config.disable_surveys_automatic_display) {\n        logger.info('Surveys automatic display is disabled. Skipping call surveys and evaluate display logic.')\n        return surveyManager\n    }\n\n    // NOTE: The `generateSurveys` function used to accept just a single parameter, without any `isSurveysEnabled` parameter.\n    // To keep compatibility with old clients, we'll consider `undefined` the same as `true`\n    if (isSurveysEnabled === false) {\n        logger.info('There are no surveys to load or Surveys is disabled in the project settings.')\n        return surveyManager\n    }\n\n    surveyManager.callSurveysAndEvaluateDisplayLogic(true)\n\n    // recalculate surveys every second to check if URL or selectors have changed\n    setInterval(() => {\n        surveyManager.callSurveysAndEvaluateDisplayLogic(false)\n    }, 1000)\n    return surveyManager\n}\n\ntype UseHideSurveyOnURLChangeProps = {\n    survey: Pick<Survey, 'id' | 'conditions' | 'type' | 'appearance'>\n    removeSurveyFromFocus?: (survey: SurveyWithTypeAndAppearance) => void\n    setSurveyVisible: (visible: boolean) => void\n    isPreviewMode?: boolean\n}\n\n/**\n * This hook handles URL-based survey visibility after the initial mount.\n * The initial URL check is handled by the `getActiveMatchingSurveys` method in  the `PostHogSurveys` class,\n * which ensures the URL matches before displaying a survey for the first time.\n * That is the method that is called every second to see if there's a matching survey.\n *\n * This separation of concerns means:\n * 1. Initial URL matching is done by `getActiveMatchingSurveys` before displaying the survey\n * 2. Subsequent URL changes are handled here to hide the survey as the user navigates\n */\nexport function useHideSurveyOnURLChange({\n    survey,\n    removeSurveyFromFocus = () => {},\n    setSurveyVisible,\n    isPreviewMode = false,\n}: UseHideSurveyOnURLChangeProps) {\n    useEffect(() => {\n        if (isPreviewMode || !survey.conditions?.url) {\n            return\n        }\n\n        const checkUrlMatch = () => {\n            const isSurveyTypeWidget = survey.type === SurveyType.Widget\n            const doesSurveyMatchUrlCondition = doesSurveyUrlMatch(survey)\n            const isSurveyWidgetTypeTab = survey.appearance?.widgetType === SurveyWidgetType.Tab && isSurveyTypeWidget\n\n            if (doesSurveyMatchUrlCondition) {\n                if (isSurveyWidgetTypeTab) {\n                    logger.info(`Showing survey ${survey.id} because it is a feedback button tab and URL matches`)\n                    setSurveyVisible(true)\n                }\n                return\n            }\n\n            logger.info(`Hiding survey ${survey.id} because URL does not match`)\n            setSurveyVisible(false)\n            return removeSurveyFromFocus(survey)\n        }\n\n        // Listen for browser back/forward browser history changes\n        addEventListener(window, 'popstate', checkUrlMatch)\n        // Listen for hash changes, for SPA frameworks that use hash-based routing\n        // The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).\n        addEventListener(window, 'hashchange', checkUrlMatch)\n\n        // Listen for SPA navigation\n        const originalPushState = window.history.pushState\n        const originalReplaceState = window.history.replaceState\n\n        window.history.pushState = function (...args) {\n            originalPushState.apply(this, args)\n            checkUrlMatch()\n        }\n\n        window.history.replaceState = function (...args) {\n            originalReplaceState.apply(this, args)\n            checkUrlMatch()\n        }\n\n        return () => {\n            window.removeEventListener('popstate', checkUrlMatch)\n            window.removeEventListener('hashchange', checkUrlMatch)\n            window.history.pushState = originalPushState\n            window.history.replaceState = originalReplaceState\n        }\n    }, [isPreviewMode, survey, removeSurveyFromFocus, setSurveyVisible])\n}\n\nexport function usePopupVisibility(\n    survey: Survey,\n    posthog: PostHog | undefined,\n    millisecondDelay: number,\n    isPreviewMode: boolean,\n    removeSurveyFromFocus: (survey: SurveyWithTypeAndAppearance) => void,\n    surveyContainerRef?: React.RefObject<HTMLDivElement>\n) {\n    const [isPopupVisible, setIsPopupVisible] = useState(\n        isPreviewMode || millisecondDelay === 0 || survey.type === SurveyType.ExternalSurvey\n    )\n    const [isSurveySent, setIsSurveySent] = useState(false)\n\n    const hidePopupWithViewTransition = () => {\n        const removeDOMAndHidePopup = () => {\n            if (survey.type === SurveyType.Popover) {\n                removeSurveyFromFocus(survey)\n            }\n            setIsPopupVisible(false)\n        }\n\n        if (!document.startViewTransition) {\n            removeDOMAndHidePopup()\n            return\n        }\n\n        const transition = document.startViewTransition(() => {\n            surveyContainerRef?.current?.remove()\n        })\n\n        transition.finished.then(() => {\n            setTimeout(() => {\n                removeDOMAndHidePopup()\n            }, 100)\n        })\n    }\n\n    const handleSurveyClosed = (event: CustomEvent) => {\n        if (event.detail.surveyId !== survey.id) {\n            return\n        }\n        hidePopupWithViewTransition()\n    }\n\n    useEffect(() => {\n        if (!posthog) {\n            logger.error('usePopupVisibility hook called without a PostHog instance.')\n            return\n        }\n        if (isPreviewMode) {\n            return\n        }\n\n        const handleSurveySent = (event: CustomEvent) => {\n            if (event.detail.surveyId !== survey.id) {\n                return\n            }\n            if (!survey.appearance?.displayThankYouMessage) {\n                return hidePopupWithViewTransition()\n            }\n            setIsSurveySent(true)\n            if (survey.appearance?.autoDisappear) {\n                setTimeout(() => {\n                    hidePopupWithViewTransition()\n                }, 5000)\n            }\n        }\n\n        const showSurvey = () => {\n            // check if the url is still matching, necessary for delayed surveys, as the URL may have changed\n            if (!doesSurveyUrlMatch(survey)) {\n                return\n            }\n            setIsPopupVisible(true)\n            window.dispatchEvent(new Event('PHSurveyShown'))\n            posthog.capture(SurveyEventName.SHOWN, {\n                [SurveyEventProperties.SURVEY_NAME]: survey.name,\n                [SurveyEventProperties.SURVEY_ID]: survey.id,\n                [SurveyEventProperties.SURVEY_ITERATION]: survey.current_iteration,\n                [SurveyEventProperties.SURVEY_ITERATION_START_DATE]: survey.current_iteration_start_date,\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n            })\n            localStorage.setItem('lastSeenSurveyDate', new Date().toISOString())\n        }\n\n        addEventListener(window, 'PHSurveyClosed', handleSurveyClosed as EventListener)\n        addEventListener(window, 'PHSurveySent', handleSurveySent as EventListener)\n\n        if (millisecondDelay > 0) {\n            // This path is only used for direct usage of SurveyPopup,\n            // not for surveys managed by SurveyManager\n            const timeoutId = setTimeout(showSurvey, millisecondDelay)\n            return () => {\n                clearTimeout(timeoutId)\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed as EventListener)\n                window.removeEventListener('PHSurveySent', handleSurveySent as EventListener)\n            }\n        } else {\n            // This is the path used for surveys managed by SurveyManager\n            showSurvey()\n            return () => {\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed as EventListener)\n                window.removeEventListener('PHSurveySent', handleSurveySent as EventListener)\n            }\n        }\n    }, [])\n\n    useHideSurveyOnURLChange({\n        survey,\n        removeSurveyFromFocus,\n        setSurveyVisible: setIsPopupVisible,\n        isPreviewMode,\n    })\n\n    return { isPopupVisible, isSurveySent, setIsPopupVisible, hidePopupWithViewTransition }\n}\n\ninterface SurveyPopupProps {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    style?: React.CSSProperties\n    previewPageIndex?: number | undefined\n    removeSurveyFromFocus?: (survey: SurveyWithTypeAndAppearance) => void\n    isPopup?: boolean\n    onPreviewSubmit?: (res: string | string[] | number | null) => void\n    onPopupSurveyDismissed?: () => void\n    onCloseConfirmationMessage?: () => void\n}\n\nfunction getPopoverPosition(\n    type: SurveyType,\n    position: SurveyPosition = SurveyPosition.Right,\n    surveyWidgetType?: SurveyWidgetType\n) {\n    if (type === SurveyType.ExternalSurvey) {\n        return {}\n    }\n\n    switch (position) {\n        case SurveyPosition.TopLeft:\n            return { top: '0', left: '0', transform: 'translate(30px, 30px)' }\n        case SurveyPosition.TopRight:\n            return { top: '0', right: '0', transform: 'translate(-30px, 30px)' }\n        case SurveyPosition.TopCenter:\n            return { top: '0', left: '50%', transform: 'translate(-50%, 30px)' }\n        case SurveyPosition.MiddleLeft:\n            return { top: '50%', left: '0', transform: 'translate(30px, -50%)' }\n        case SurveyPosition.MiddleRight:\n            return { top: '50%', right: '0', transform: 'translate(-30px, -50%)' }\n        case SurveyPosition.MiddleCenter:\n            return { top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }\n        case SurveyPosition.Left:\n            return { left: '30px' }\n        case SurveyPosition.Center:\n            return {\n                left: '50%',\n                transform: 'translateX(-50%)',\n            }\n        default:\n        case SurveyPosition.Right:\n            return { right: type === SurveyType.Widget && surveyWidgetType === SurveyWidgetType.Tab ? '60px' : '30px' }\n    }\n}\n\nexport function SurveyPopup({\n    survey,\n    forceDisableHtml,\n    posthog,\n    style = {},\n    previewPageIndex,\n    removeSurveyFromFocus = () => {},\n    isPopup = true,\n    onPreviewSubmit = () => {},\n    onPopupSurveyDismissed = () => {},\n    onCloseConfirmationMessage = () => {},\n}: SurveyPopupProps) {\n    const surveyContainerRef = useRef<HTMLDivElement>(null)\n    const isPreviewMode = Number.isInteger(previewPageIndex)\n    // NB: The client-side code passes the millisecondDelay in seconds, but setTimeout expects milliseconds, so we multiply by 1000\n    const surveyPopupDelayMilliseconds = survey.appearance?.surveyPopupDelaySeconds\n        ? survey.appearance.surveyPopupDelaySeconds * 1000\n        : 0\n    const { isPopupVisible, isSurveySent, hidePopupWithViewTransition } = usePopupVisibility(\n        survey,\n        posthog,\n        surveyPopupDelayMilliseconds,\n        isPreviewMode,\n        removeSurveyFromFocus,\n        surveyContainerRef\n    )\n\n    const shouldShowConfirmation = isSurveySent || previewPageIndex === survey.questions.length\n    const surveyContextValue = useMemo(() => {\n        const getInProgressSurvey = getInProgressSurveyState(survey)\n        return {\n            isPreviewMode,\n            previewPageIndex: previewPageIndex,\n            onPopupSurveyDismissed: () => {\n                dismissedSurveyEvent(survey, posthog, isPreviewMode)\n                onPopupSurveyDismissed()\n            },\n            isPopup: isPopup || false,\n            surveySubmissionId: getInProgressSurvey?.surveySubmissionId || uuidv7(),\n            onPreviewSubmit,\n            posthog,\n        }\n    }, [isPreviewMode, previewPageIndex, isPopup, posthog, survey, onPopupSurveyDismissed, onPreviewSubmit])\n\n    if (!isPopupVisible) {\n        return null\n    }\n\n    return (\n        <SurveyContext.Provider value={surveyContextValue}>\n            <div\n                className=\"ph-survey\"\n                style={{\n                    ...getPopoverPosition(survey.type, survey.appearance?.position, survey.appearance?.widgetType),\n                    ...style,\n                }}\n                ref={surveyContainerRef}\n            >\n                {!shouldShowConfirmation ? (\n                    <Questions survey={survey} forceDisableHtml={!!forceDisableHtml} posthog={posthog} />\n                ) : (\n                    <ConfirmationMessage\n                        header={survey.appearance?.thankYouMessageHeader || 'Thank you!'}\n                        description={survey.appearance?.thankYouMessageDescription || ''}\n                        forceDisableHtml={!!forceDisableHtml}\n                        contentType={survey.appearance?.thankYouMessageDescriptionContentType}\n                        appearance={survey.appearance || defaultSurveyAppearance}\n                        onClose={() => {\n                            hidePopupWithViewTransition()\n                            onCloseConfirmationMessage()\n                        }}\n                    />\n                )}\n            </div>\n        </SurveyContext.Provider>\n    )\n}\n\nexport function Questions({\n    survey,\n    forceDisableHtml,\n    posthog,\n}: {\n    survey: Survey\n    forceDisableHtml: boolean\n    posthog?: PostHog\n}) {\n    // Initialize responses from localStorage or empty object\n    const [questionsResponses, setQuestionsResponses] = useState(() => {\n        const inProgressSurveyData = getInProgressSurveyState(survey)\n        if (inProgressSurveyData?.responses) {\n            logger.info('Survey is already in progress, filling in initial responses')\n        }\n        return inProgressSurveyData?.responses || {}\n    })\n    const { previewPageIndex, onPopupSurveyDismissed, isPopup, onPreviewSubmit, surveySubmissionId, isPreviewMode } =\n        useContext(SurveyContext)\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(() => {\n        const inProgressSurveyData = getInProgressSurveyState(survey)\n        return previewPageIndex || inProgressSurveyData?.lastQuestionIndex || 0\n    })\n    const surveyQuestions = useMemo(() => getDisplayOrderQuestions(survey), [survey])\n\n    // Sync preview state\n    useEffect(() => {\n        if (isPreviewMode && !isUndefined(previewPageIndex)) {\n            setCurrentQuestionIndex(previewPageIndex)\n        }\n    }, [previewPageIndex, isPreviewMode])\n\n    const onNextButtonClick = ({\n        res,\n        displayQuestionIndex,\n        questionId,\n    }: {\n        res: string | string[] | number | null\n        displayQuestionIndex: number\n        questionId?: string\n    }) => {\n        if (!posthog) {\n            logger.error('onNextButtonClick called without a PostHog instance.')\n            return\n        }\n\n        if (!questionId) {\n            logger.error('onNextButtonClick called without a questionId.')\n            return\n        }\n\n        const responseKey = getSurveyResponseKey(questionId)\n\n        const newResponses = { ...questionsResponses, [responseKey]: res }\n        setQuestionsResponses(newResponses)\n\n        const nextStep = getNextSurveyStep(survey, displayQuestionIndex, res)\n        const isSurveyCompleted = nextStep === SurveyQuestionBranchingType.End\n\n        if (!isSurveyCompleted) {\n            setCurrentQuestionIndex(nextStep)\n            setInProgressSurveyState(survey, {\n                surveySubmissionId: surveySubmissionId,\n                responses: newResponses,\n                lastQuestionIndex: nextStep,\n            })\n        }\n\n        // If partial responses are enabled, send the survey sent event with with the responses,\n        // otherwise only send the event when the survey is completed\n        if (survey.enable_partial_responses || isSurveyCompleted) {\n            sendSurveyEvent({\n                responses: newResponses,\n                survey,\n                surveySubmissionId,\n                isSurveyCompleted,\n                posthog,\n            })\n        }\n    }\n\n    const currentQuestion = surveyQuestions.at(currentQuestionIndex)\n\n    if (!currentQuestion) {\n        return null\n    }\n\n    return (\n        <form className=\"survey-form\" name=\"surveyForm\">\n            {isPopup && (\n                <Cancel\n                    onClick={() => {\n                        onPopupSurveyDismissed()\n                    }}\n                />\n            )}\n            <div className=\"survey-box\">\n                {getQuestionComponent({\n                    question: currentQuestion,\n                    forceDisableHtml,\n                    displayQuestionIndex: currentQuestionIndex,\n                    appearance: survey.appearance || defaultSurveyAppearance,\n                    onSubmit: (res) =>\n                        onNextButtonClick({\n                            res,\n                            displayQuestionIndex: currentQuestionIndex,\n                            questionId: currentQuestion.id,\n                        }),\n                    onPreviewSubmit,\n                    initialValue: currentQuestion.id\n                        ? questionsResponses[getSurveyResponseKey(currentQuestion.id)]\n                        : undefined,\n                })}\n            </div>\n        </form>\n    )\n}\n\nexport function FeedbackWidget({\n    survey,\n    forceDisableHtml,\n    posthog,\n    readOnly,\n}: {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    readOnly?: boolean\n}): JSX.Element | null {\n    const [isFeedbackButtonVisible, setIsFeedbackButtonVisible] = useState(true)\n    const [showSurvey, setShowSurvey] = useState(false)\n    const [styleOverrides, setStyleOverrides] = useState<React.CSSProperties>({})\n\n    const toggleSurvey = () => {\n        setShowSurvey(!showSurvey)\n    }\n\n    useEffect(() => {\n        if (!posthog) {\n            logger.error('FeedbackWidget called without a PostHog instance.')\n            return\n        }\n        if (readOnly) {\n            return\n        }\n\n        if (survey.appearance?.widgetType === 'tab') {\n            setStyleOverrides({\n                top: '50%',\n                bottom: 'auto',\n            })\n        }\n        const handleShowSurvey = (event: Event) => {\n            const customEvent = event as CustomEvent\n            // Check if the event is for this specific survey instance\n            if (customEvent.detail?.surveyId === survey.id) {\n                logger.info(`Received show event for feedback button survey ${survey.id}`)\n                setStyleOverrides(customEvent.detail.position || {})\n                toggleSurvey()\n            }\n        }\n\n        addEventListener(window, DISPATCH_FEEDBACK_WIDGET_EVENT, handleShowSurvey)\n\n        // Cleanup listener on component unmount\n        return () => {\n            window.removeEventListener(DISPATCH_FEEDBACK_WIDGET_EVENT, handleShowSurvey)\n        }\n    }, [\n        posthog,\n        readOnly,\n        survey.id,\n        survey.appearance?.widgetType,\n        survey.appearance?.widgetSelector,\n        survey.appearance?.borderColor,\n    ])\n\n    useHideSurveyOnURLChange({\n        survey,\n        setSurveyVisible: setIsFeedbackButtonVisible,\n    })\n\n    if (!isFeedbackButtonVisible) {\n        return null\n    }\n\n    const resetShowSurvey = () => {\n        // hide the feedback button after answering or closing the survey if it's not always show\n        if (survey.schedule !== SurveySchedule.Always) {\n            setIsFeedbackButtonVisible(false)\n        }\n        // important so our view transition has time to run\n        setTimeout(() => {\n            setShowSurvey(false)\n        }, 200)\n    }\n\n    return (\n        <Preact.Fragment>\n            {survey.appearance?.widgetType === 'tab' && (\n                <button className=\"ph-survey-widget-tab\" onClick={toggleSurvey} disabled={readOnly}>\n                    {survey.appearance?.widgetLabel || ''}\n                </button>\n            )}\n            {showSurvey && (\n                <SurveyPopup\n                    posthog={posthog}\n                    survey={survey}\n                    forceDisableHtml={forceDisableHtml}\n                    style={styleOverrides}\n                    onPopupSurveyDismissed={resetShowSurvey}\n                    onCloseConfirmationMessage={resetShowSurvey}\n                />\n            )}\n        </Preact.Fragment>\n    )\n}\n\ninterface GetQuestionComponentProps extends CommonQuestionProps {\n    question: SurveyQuestion\n    displayQuestionIndex: number\n}\n\nconst getQuestionComponent = ({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: GetQuestionComponentProps): JSX.Element | null => {\n    const baseProps = {\n        forceDisableHtml,\n        appearance,\n        onPreviewSubmit: (res: string | string[] | number | null) => {\n            onPreviewSubmit(res)\n        },\n        onSubmit: (res: string | string[] | number | null) => {\n            onSubmit(res)\n        },\n        initialValue,\n        displayQuestionIndex,\n    }\n\n    switch (question.type) {\n        case SurveyQuestionType.Open:\n            return <OpenTextQuestion {...baseProps} question={question} key={question.id} />\n        case SurveyQuestionType.Link:\n            return <LinkQuestion {...baseProps} question={question} key={question.id} />\n        case SurveyQuestionType.Rating:\n            return <RatingQuestion {...baseProps} question={question} key={question.id} />\n        case SurveyQuestionType.SingleChoice:\n        case SurveyQuestionType.MultipleChoice:\n            return <MultipleChoiceQuestion {...baseProps} question={question} key={question.id} />\n        default:\n            logger.error(`Unsupported question type: ${(question as any).type}`)\n            return null\n    }\n}\n"]}