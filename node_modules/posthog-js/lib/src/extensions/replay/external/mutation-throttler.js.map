{"version":3,"file":"mutation-throttler.js","sourceRoot":"","sources":["../../../../../src/extensions/replay/external/mutation-throttler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { eventWithTime, mutationCallbackParam } from '@rrweb/types'\nimport { INCREMENTAL_SNAPSHOT_EVENT_TYPE, MUTATION_SOURCE_TYPE } from './sessionrecording-utils'\nimport type { rrwebRecord } from '../types/rrweb'\nimport { BucketedRateLimiter } from '@posthog/core'\nimport { logger } from '../../../utils/logger'\n\nexport class MutationThrottler {\n    private _loggedTracker: Record<string, boolean> = {}\n    private _rateLimiter: BucketedRateLimiter<number>\n\n    constructor(\n        private readonly _rrweb: rrwebRecord,\n        private readonly _options: {\n            bucketSize?: number\n            refillRate?: number\n            onBlockedNode?: (id: number, node: Node | null) => void\n        } = {}\n    ) {\n        this._rateLimiter = new BucketedRateLimiter({\n            bucketSize: this._options.bucketSize ?? 100,\n            refillRate: this._options.refillRate ?? 10,\n            refillInterval: 1000, // one second\n            _onBucketRateLimited: this._onNodeRateLimited,\n            _logger: logger,\n        })\n    }\n\n    private _onNodeRateLimited = (key: number) => {\n        if (!this._loggedTracker[key]) {\n            this._loggedTracker[key] = true\n            const node = this._getNode(key)\n            this._options.onBlockedNode?.(key, node)\n        }\n    }\n\n    private _getNodeOrRelevantParent = (id: number): [number, Node | null] => {\n        // For some nodes we know they are part of a larger tree such as an SVG.\n        // For those we want to block the entire node, not just the specific attribute\n\n        const node = this._getNode(id)\n\n        // Check if the node is an Element and then find the closest parent that is an SVG\n        if (node?.nodeName !== 'svg' && node instanceof Element) {\n            const closestSVG = node.closest('svg')\n\n            if (closestSVG) {\n                return [this._rrweb.mirror.getId(closestSVG), closestSVG]\n            }\n        }\n\n        return [id, node]\n    }\n\n    private _getNode = (id: number) => this._rrweb.mirror.getNode(id)\n\n    private _numberOfChanges = (data: Partial<mutationCallbackParam>) => {\n        return (\n            (data.removes?.length ?? 0) +\n            (data.attributes?.length ?? 0) +\n            (data.texts?.length ?? 0) +\n            (data.adds?.length ?? 0)\n        )\n    }\n\n    public throttleMutations = (event: eventWithTime) => {\n        if (event.type !== INCREMENTAL_SNAPSHOT_EVENT_TYPE || event.data.source !== MUTATION_SOURCE_TYPE) {\n            return event\n        }\n\n        const data = event.data as Partial<mutationCallbackParam>\n        const initialMutationCount = this._numberOfChanges(data)\n\n        if (data.attributes) {\n            // Most problematic mutations come from attrs where the style or minor properties are changed rapidly\n            data.attributes = data.attributes.filter((attr) => {\n                const [nodeId] = this._getNodeOrRelevantParent(attr.id)\n\n                const isRateLimited = this._rateLimiter.consumeRateLimit(nodeId)\n\n                if (isRateLimited) {\n                    return false\n                }\n\n                return attr\n            })\n        }\n\n        // Check if every part of the mutation is empty in which case there is nothing to do\n        const mutationCount = this._numberOfChanges(data)\n\n        if (mutationCount === 0 && initialMutationCount !== mutationCount) {\n            // If we have modified the mutation count and the remaining count is 0, then we don't need the event.\n            return\n        }\n        return event\n    }\n\n    public reset() {\n        this._loggedTracker = {}\n    }\n\n    public stop() {\n        this._rateLimiter.stop()\n        this.reset()\n    }\n}\n"]}