{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/extensions/web-vitals/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../../posthog-core'\nimport { RemoteConfig, SupportedWebVitalsMetrics } from '../../types'\nimport { createLogger } from '../../utils/logger'\nimport { isBoolean, isNullish, isNumber, isUndefined, isObject } from '@posthog/core'\nimport { WEB_VITALS_ALLOWED_METRICS, WEB_VITALS_ENABLED_SERVER_SIDE } from '../../constants'\nimport { assignableWindow, window, location } from '../../utils/globals'\nimport { maskQueryParams } from '../../utils/request-utils'\nimport { PERSONAL_DATA_CAMPAIGN_PARAMS, MASKED } from '../../utils/event-utils'\nimport { extendArray } from '../../utils'\n\nconst logger = createLogger('[Web Vitals]')\n\ntype WebVitalsMetricCallback = (metric: any) => void\n\nexport const DEFAULT_FLUSH_TO_CAPTURE_TIMEOUT_MILLISECONDS = 5000\nconst ONE_MINUTE_IN_MILLIS = 60 * 1000\nexport const FIFTEEN_MINUTES_IN_MILLIS = 15 * ONE_MINUTE_IN_MILLIS\n\ntype WebVitalsEventBuffer = { url: string | undefined; metrics: any[]; firstMetricTimestamp: number | undefined }\n\nexport class WebVitalsAutocapture {\n    private _enabledServerSide: boolean = false\n    private _initialized = false\n\n    private _buffer: WebVitalsEventBuffer = { url: undefined, metrics: [], firstMetricTimestamp: undefined }\n    private _delayedFlushTimer: ReturnType<typeof setTimeout> | undefined\n\n    constructor(private readonly _instance: PostHog) {\n        this._enabledServerSide = !!this._instance.persistence?.props[WEB_VITALS_ENABLED_SERVER_SIDE]\n\n        this.startIfEnabled()\n    }\n\n    public get allowedMetrics(): SupportedWebVitalsMetrics[] {\n        const clientConfigMetricAllowList: SupportedWebVitalsMetrics[] | undefined = isObject(\n            this._instance.config.capture_performance\n        )\n            ? this._instance.config.capture_performance?.web_vitals_allowed_metrics\n            : undefined\n        return !isUndefined(clientConfigMetricAllowList)\n            ? clientConfigMetricAllowList\n            : this._instance.persistence?.props[WEB_VITALS_ALLOWED_METRICS] || ['CLS', 'FCP', 'INP', 'LCP']\n    }\n\n    public get flushToCaptureTimeoutMs(): number {\n        const clientConfig: number | undefined = isObject(this._instance.config.capture_performance)\n            ? this._instance.config.capture_performance.web_vitals_delayed_flush_ms\n            : undefined\n        return clientConfig || DEFAULT_FLUSH_TO_CAPTURE_TIMEOUT_MILLISECONDS\n    }\n\n    public get _maxAllowedValue(): number {\n        const configured =\n            isObject(this._instance.config.capture_performance) &&\n            isNumber(this._instance.config.capture_performance.__web_vitals_max_value)\n                ? this._instance.config.capture_performance.__web_vitals_max_value\n                : FIFTEEN_MINUTES_IN_MILLIS\n        // you can set to 0 to disable the check or any value over ten seconds\n        // 1 milli to 1 minute will be set to 15 minutes, cos that would be a silly low maximum\n        return 0 < configured && configured <= ONE_MINUTE_IN_MILLIS ? FIFTEEN_MINUTES_IN_MILLIS : configured\n    }\n\n    public get isEnabled(): boolean {\n        // Always disable web vitals if we're not on http or https\n        const protocol = location?.protocol\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            logger.info('Web Vitals are disabled on non-http/https protocols')\n            return false\n        }\n\n        // Otherwise, check config\n        const clientConfig = isObject(this._instance.config.capture_performance)\n            ? this._instance.config.capture_performance.web_vitals\n            : isBoolean(this._instance.config.capture_performance)\n              ? this._instance.config.capture_performance\n              : undefined\n        return isBoolean(clientConfig) ? clientConfig : this._enabledServerSide\n    }\n\n    public startIfEnabled(): void {\n        if (this.isEnabled && !this._initialized) {\n            logger.info('enabled, starting...')\n            this._loadScript(this._startCapturing)\n        }\n    }\n\n    public onRemoteConfig(response: RemoteConfig) {\n        const webVitalsOptIn = isObject(response.capturePerformance) && !!response.capturePerformance.web_vitals\n\n        const allowedMetrics = isObject(response.capturePerformance)\n            ? response.capturePerformance.web_vitals_allowed_metrics\n            : undefined\n\n        if (this._instance.persistence) {\n            this._instance.persistence.register({\n                [WEB_VITALS_ENABLED_SERVER_SIDE]: webVitalsOptIn,\n            })\n\n            this._instance.persistence.register({\n                [WEB_VITALS_ALLOWED_METRICS]: allowedMetrics,\n            })\n        }\n        // store this in-memory in case persistence is disabled\n        this._enabledServerSide = webVitalsOptIn\n\n        this.startIfEnabled()\n    }\n\n    private _loadScript(cb: () => void): void {\n        if (assignableWindow.__PosthogExtensions__?.postHogWebVitalsCallbacks) {\n            // already loaded\n            cb()\n        }\n        assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(this._instance, 'web-vitals', (err) => {\n            if (err) {\n                logger.error('failed to load script', err)\n                return\n            }\n            cb()\n        })\n    }\n\n    private _currentURL(): string | undefined {\n        const href = window ? window.location.href : undefined\n        if (!href) {\n            logger.error('Could not determine current URL')\n            return undefined\n        }\n\n        // mask url query params\n        const maskPersonalDataProperties = this._instance.config.mask_personal_data_properties\n        const customPersonalDataProperties = this._instance.config.custom_personal_data_properties\n\n        const paramsToMask = maskPersonalDataProperties\n            ? extendArray([], PERSONAL_DATA_CAMPAIGN_PARAMS, customPersonalDataProperties || [])\n            : []\n\n        return maskQueryParams(href, paramsToMask, MASKED)\n    }\n\n    private _flushToCapture = () => {\n        clearTimeout(this._delayedFlushTimer)\n        if (this._buffer.metrics.length === 0) {\n            return\n        }\n\n        this._instance.capture(\n            '$web_vitals',\n            this._buffer.metrics.reduce(\n                (acc, metric) => ({\n                    ...acc,\n                    // the entire event so we can use it in the future e.g. includes google's rating\n                    [`$web_vitals_${metric.name}_event`]: { ...metric },\n                    [`$web_vitals_${metric.name}_value`]: metric.value,\n                }),\n                {}\n            )\n        )\n        this._buffer = { url: undefined, metrics: [], firstMetricTimestamp: undefined }\n    }\n\n    private _addToBuffer = (metric: any) => {\n        const sessionIds = this._instance.sessionManager?.checkAndGetSessionAndWindowId(true)\n        if (isUndefined(sessionIds)) {\n            logger.error('Could not read session ID. Dropping metrics!')\n            return\n        }\n\n        this._buffer = this._buffer || { url: undefined, metrics: [], firstMetricTimestamp: undefined }\n\n        const $currentUrl = this._currentURL()\n        if (isUndefined($currentUrl)) {\n            return\n        }\n\n        if (isNullish(metric?.name) || isNullish(metric?.value)) {\n            logger.error('Invalid metric received', metric)\n            return\n        }\n\n        // we observe some very large values sometimes, we'll ignore them\n        // since the likelihood of LCP > 1 hour being correct is very low\n        if (this._maxAllowedValue && metric.value >= this._maxAllowedValue) {\n            logger.error('Ignoring metric with value >= ' + this._maxAllowedValue, metric)\n            return\n        }\n\n        const urlHasChanged = this._buffer.url !== $currentUrl\n\n        if (urlHasChanged) {\n            // we need to send what we have\n            this._flushToCapture()\n            // poor performance is >4s, we wait twice that time to send\n            // this is in case we haven't received all metrics\n            // we'll at least gather some\n            this._delayedFlushTimer = setTimeout(this._flushToCapture, this.flushToCaptureTimeoutMs)\n        }\n\n        if (isUndefined(this._buffer.url)) {\n            this._buffer.url = $currentUrl\n        }\n\n        this._buffer.firstMetricTimestamp = isUndefined(this._buffer.firstMetricTimestamp)\n            ? Date.now()\n            : this._buffer.firstMetricTimestamp\n\n        if (metric.attribution && metric.attribution.interactionTargetElement) {\n            // we don't want to send the entire element\n            // they can be very large\n            // TODO we could run this through autocapture code so that we get elements chain info\n            //  and can display the element in the UI\n            metric.attribution.interactionTargetElement = undefined\n        }\n\n        this._buffer.metrics.push({\n            ...metric,\n            $current_url: $currentUrl,\n            $session_id: sessionIds.sessionId,\n            $window_id: sessionIds.windowId,\n            timestamp: Date.now(),\n        })\n\n        if (this._buffer.metrics.length === this.allowedMetrics.length) {\n            // we have all allowed metrics\n            this._flushToCapture()\n        }\n    }\n\n    private _startCapturing = () => {\n        let onLCP: WebVitalsMetricCallback | undefined\n        let onCLS: WebVitalsMetricCallback | undefined\n        let onFCP: WebVitalsMetricCallback | undefined\n        let onINP: WebVitalsMetricCallback | undefined\n\n        const posthogExtensions = assignableWindow.__PosthogExtensions__\n        if (!isUndefined(posthogExtensions) && !isUndefined(posthogExtensions.postHogWebVitalsCallbacks)) {\n            ;({ onLCP, onCLS, onFCP, onINP } = posthogExtensions.postHogWebVitalsCallbacks)\n        }\n\n        if (!onLCP || !onCLS || !onFCP || !onINP) {\n            logger.error('web vitals callbacks not loaded - not starting')\n            return\n        }\n\n        // register performance observers\n        if (this.allowedMetrics.indexOf('LCP') > -1) {\n            onLCP(this._addToBuffer.bind(this))\n        }\n        if (this.allowedMetrics.indexOf('CLS') > -1) {\n            onCLS(this._addToBuffer.bind(this))\n        }\n        if (this.allowedMetrics.indexOf('FCP') > -1) {\n            onFCP(this._addToBuffer.bind(this))\n        }\n        if (this.allowedMetrics.indexOf('INP') > -1) {\n            onINP(this._addToBuffer.bind(this))\n        }\n\n        this._initialized = true\n    }\n}\n"]}