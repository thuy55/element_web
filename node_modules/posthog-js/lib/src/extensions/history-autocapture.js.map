{"version":3,"file":"history-autocapture.js","sourceRoot":"","sources":["../../../src/extensions/history-autocapture.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { window } from '../utils/globals'\nimport { addEventListener } from '../utils'\nimport { logger } from '../utils/logger'\nimport { patch } from './replay/rrweb-plugins/patch'\n\n/**\n * This class is used to capture pageview events when the user navigates using the history API (pushState, replaceState)\n * and when the user navigates using the browser's back/forward buttons.\n *\n * The behavior is controlled by the `capture_pageview` configuration option:\n * - When set to `'history_change'`, this class will capture pageviews on history API changes\n */\nexport class HistoryAutocapture {\n    private _instance: PostHog\n    private _popstateListener: (() => void) | undefined\n    private _lastPathname: string\n\n    constructor(instance: PostHog) {\n        this._instance = instance\n        this._lastPathname = window?.location?.pathname || ''\n    }\n\n    public get isEnabled(): boolean {\n        return this._instance.config.capture_pageview === 'history_change'\n    }\n\n    public startIfEnabled(): void {\n        if (this.isEnabled) {\n            logger.info('History API monitoring enabled, starting...')\n            this.monitorHistoryChanges()\n        }\n    }\n\n    public stop(): void {\n        if (this._popstateListener) {\n            this._popstateListener()\n        }\n        this._popstateListener = undefined\n        logger.info('History API monitoring stopped')\n    }\n\n    public monitorHistoryChanges(): void {\n        if (!window || !window.history) {\n            return\n        }\n\n        // Old fashioned, we could also use arrow functions but I think the closure for a patch is more reliable\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n\n        if (!(window.history.pushState as any)?.__posthog_wrapped__) {\n            patch(window.history, 'pushState', (originalPushState) => {\n                return function patchedPushState(\n                    this: History,\n                    state: any,\n                    title: string,\n                    url?: string | URL | null\n                ): void {\n                    ;(originalPushState as History['pushState']).call(this, state, title, url)\n                    self._capturePageview('pushState')\n                }\n            })\n        }\n\n        if (!(window.history.replaceState as any)?.__posthog_wrapped__) {\n            patch(window.history, 'replaceState', (originalReplaceState) => {\n                return function patchedReplaceState(\n                    this: History,\n                    state: any,\n                    title: string,\n                    url?: string | URL | null\n                ): void {\n                    ;(originalReplaceState as History['replaceState']).call(this, state, title, url)\n                    self._capturePageview('replaceState')\n                }\n            })\n        }\n\n        this._setupPopstateListener()\n    }\n\n    private _capturePageview(navigationType: 'pushState' | 'replaceState' | 'popstate'): void {\n        try {\n            const currentPathname = window?.location?.pathname\n\n            if (!currentPathname) {\n                return\n            }\n\n            // Only capture pageview if the pathname has changed and the feature is enabled\n            if (currentPathname !== this._lastPathname && this.isEnabled) {\n                this._instance.capture('$pageview', { navigation_type: navigationType })\n            }\n\n            this._lastPathname = currentPathname\n        } catch (error) {\n            logger.error(`Error capturing ${navigationType} pageview`, error)\n        }\n    }\n\n    private _setupPopstateListener(): void {\n        if (this._popstateListener) {\n            return\n        }\n\n        const handler = () => {\n            this._capturePageview('popstate')\n        }\n\n        addEventListener(window, 'popstate', handler)\n        this._popstateListener = () => {\n            if (window) {\n                window.removeEventListener('popstate', handler)\n            }\n        }\n    }\n}\n"]}