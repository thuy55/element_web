{"version":3,"file":"property-utils.js","sourceRoot":"","sources":["../../../src/utils/property-utils.ts"],"names":[],"mappings":";;;AAIA,0DAMC;AAVD,sCAA0C;AAE1C,6CAA+C;AAE/C,SAAgB,uBAAuB,CACnC,WAAmB,EACnB,mBAAgC,EAChC,uBAAoC;IAEpC,OAAO,IAAA,uBAAa,EAAC,EAAE,WAAW,aAAA,EAAE,mBAAmB,qBAAA,EAAE,uBAAuB,yBAAA,EAAE,CAAC,CAAA;AACvF,CAAC;AAEY,QAAA,mBAAmB,GAAgF;IAC5G,KAAK,EAAE,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,KAAK,KAAK,MAAM,EAAhB,CAAgB,CAAC,EAA1C,CAA0C,CAAC,EAAlE,CAAkE;IAC9F,MAAM,EAAE,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,UAAC,MAAM,IAAK,OAAA,KAAK,KAAK,MAAM,EAAhB,CAAgB,CAAC,EAA3C,CAA2C,CAAC,EAApE,CAAoE;IACjG,KAAK,EAAE,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,IAAA,6BAAe,EAAC,KAAK,EAAE,MAAM,CAAC,EAA9B,CAA8B,CAAC,EAAxD,CAAwD,CAAC,EAAhF,CAAgF;IAC5G,SAAS,EAAE,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,IAAA,6BAAe,EAAC,KAAK,EAAE,MAAM,CAAC,EAA/B,CAA+B,CAAC,EAA1D,CAA0D,CAAC,EAAnF,CAAmF;IACnH,SAAS,EAAE,UAAC,OAAO,EAAE,MAAM;QACvB,OAAA,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAtB,CAAsB,CAAC,EAAjE,CAAiE,CAAC;IAA1G,CAA0G;IAC9G,aAAa,EAAE,UAAC,OAAO,EAAE,MAAM;QAC3B,OAAA,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAvB,CAAuB,CAAC,EAAnE,CAAmE,CAAC;IAA7G,CAA6G;CACpH,CAAA;AAED,IAAM,WAAW,GAAG,UAAC,CAAS,IAAa,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAA","sourcesContent":["import { jsonStringify } from '../request'\nimport type { Properties, PropertyMatchType } from '../types'\nimport { isMatchingRegex } from './regex-utils'\n\nexport function getPersonPropertiesHash(\n    distinct_id: string,\n    userPropertiesToSet?: Properties,\n    userPropertiesToSetOnce?: Properties\n): string {\n    return jsonStringify({ distinct_id, userPropertiesToSet, userPropertiesToSetOnce })\n}\n\nexport const propertyComparisons: Record<PropertyMatchType, (targets: string[], values: string[]) => boolean> = {\n    exact: (targets, values) => values.some((value) => targets.some((target) => value === target)),\n    is_not: (targets, values) => values.every((value) => targets.every((target) => value !== target)),\n    regex: (targets, values) => values.some((value) => targets.some((target) => isMatchingRegex(value, target))),\n    not_regex: (targets, values) => values.every((value) => targets.every((target) => !isMatchingRegex(value, target))),\n    icontains: (targets, values) =>\n        values.map(toLowerCase).some((value) => targets.map(toLowerCase).some((target) => value.includes(target))),\n    not_icontains: (targets, values) =>\n        values.map(toLowerCase).every((value) => targets.map(toLowerCase).every((target) => !value.includes(target))),\n}\n\nconst toLowerCase = (v: string): string => v.toLowerCase()\n"]}