{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/utils/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAA8B;AAC9B,sCAA2C;AAC3C,qCAAoD;AASpD,IAAM,aAAa,GAAG,UAAC,MAAc;IACjC,IAAM,MAAM,GAAoB;QAC5B,IAAI,EAAE,UAAC,KAA+B;YAAE,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,6BAAc;;YAClD,IACI,gBAAM;gBACN,CAAC,gBAAM,CAAC,KAAK,IAAI,0BAAgB,CAAC,aAAa,CAAC;gBAChD,CAAC,IAAA,kBAAW,EAAC,gBAAM,CAAC,OAAO,CAAC;gBAC5B,gBAAM,CAAC,OAAO,EAChB,CAAC;gBACC,IAAM,UAAU,GACZ,oBAAoB,IAAI,gBAAM,CAAC,OAAO,CAAC,KAAK,CAAC;oBACzC,CAAC,CAAE,gBAAM,CAAC,OAAO,CAAC,KAAK,CAAS,CAAC,oBAAoB,CAAC;oBACtD,CAAC,CAAC,gBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;gBAE/B,sCAAsC;gBACtC,UAAU,8BAAC,MAAM,UAAK,IAAI,WAAC;YAC/B,CAAC;QACL,CAAC;QAED,IAAI,EAAE;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACjB,MAAM,CAAC,IAAI,OAAX,MAAM,iBAAM,KAAK,UAAK,IAAI,WAAC;QAC/B,CAAC;QAED,IAAI,EAAE;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACjB,MAAM,CAAC,IAAI,OAAX,MAAM,iBAAM,MAAM,UAAK,IAAI,WAAC;QAChC,CAAC;QAED,KAAK,EAAE;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAClB,MAAM,CAAC,IAAI,OAAX,MAAM,iBAAM,OAAO,UAAK,IAAI,WAAC;QACjC,CAAC;QAED,QAAQ,EAAE;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACrB,mDAAmD;YACnD,sCAAsC;YACtC,OAAO,CAAC,KAAK,OAAb,OAAO,iBAAO,MAAM,UAAK,IAAI,WAAC;QAClC,CAAC;QAED,oBAAoB,EAAE,UAAC,UAAkB;YACrC,MAAM,CAAC,KAAK,CAAC,qDAA8C,UAAU,CAAE,CAAC,CAAA;QAC5E,CAAC;QAED,YAAY,EAAE,UAAC,gBAAwB,IAAK,OAAA,aAAa,CAAC,UAAG,MAAM,cAAI,gBAAgB,CAAE,CAAC,EAA9C,CAA8C;KAC7F,CAAA;IACD,OAAO,MAAM,CAAA;AACjB,CAAC,CAAA;AAEY,QAAA,MAAM,GAAG,aAAa,CAAC,cAAc,CAAC,CAAA;AAEtC,QAAA,YAAY,GAAG,cAAM,CAAC,YAAY,CAAA","sourcesContent":["import Config from '../config'\nimport { isUndefined } from '@posthog/core'\nimport { assignableWindow, window } from './globals'\nimport type { Logger } from '@posthog/core'\n\ntype PosthogJsLogger = Omit<Logger, 'createLogger'> & {\n    _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => void\n    uninitializedWarning: (methodName: string) => void\n    createLogger: (prefix: string) => PosthogJsLogger\n}\n\nconst _createLogger = (prefix: string): PosthogJsLogger => {\n    const logger: PosthogJsLogger = {\n        _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => {\n            if (\n                window &&\n                (Config.DEBUG || assignableWindow.POSTHOG_DEBUG) &&\n                !isUndefined(window.console) &&\n                window.console\n            ) {\n                const consoleLog =\n                    '__rrweb_original__' in window.console[level]\n                        ? (window.console[level] as any)['__rrweb_original__']\n                        : window.console[level]\n\n                // eslint-disable-next-line no-console\n                consoleLog(prefix, ...args)\n            }\n        },\n\n        info: (...args: any[]) => {\n            logger._log('log', ...args)\n        },\n\n        warn: (...args: any[]) => {\n            logger._log('warn', ...args)\n        },\n\n        error: (...args: any[]) => {\n            logger._log('error', ...args)\n        },\n\n        critical: (...args: any[]) => {\n            // Critical errors are always logged to the console\n            // eslint-disable-next-line no-console\n            console.error(prefix, ...args)\n        },\n\n        uninitializedWarning: (methodName: string) => {\n            logger.error(`You must initialize PostHog before calling ${methodName}`)\n        },\n\n        createLogger: (additionalPrefix: string) => _createLogger(`${prefix} ${additionalPrefix}`),\n    }\n    return logger\n}\n\nexport const logger = _createLogger('[PostHog.js]')\n\nexport const createLogger = logger.createLogger\n"]}