{"version":3,"file":"posthog-surveys-types.js","sourceRoot":"","sources":["../../src/posthog-surveys-types.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAIH,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IACxB,qCAAiB,CAAA;IACjB,+BAAW,CAAA;IACX,yCAAqB,CAAA;AACzB,CAAC,EAJW,gBAAgB,gCAAhB,gBAAgB,QAI3B;AAED,IAAY,cAWX;AAXD,WAAY,cAAc;IACtB,sCAAoB,CAAA;IACpB,wCAAsB,CAAA;IACtB,0CAAwB,CAAA;IACxB,4CAA0B,CAAA;IAC1B,8CAA4B,CAAA;IAC5B,gDAA8B,CAAA;IAC9B,+BAAa,CAAA;IACb,mCAAiB,CAAA;IACjB,iCAAe,CAAA;IACf,mDAAiC,CAAA;AACrC,CAAC,EAXW,cAAc,8BAAd,cAAc,QAWzB;AAwCD,IAAY,UAKX;AALD,WAAY,UAAU;IAClB,iCAAmB,CAAA;IACnB,yBAAW,CAAA;IACX,+BAAiB,CAAA;IACjB,gDAAkC,CAAA;AACtC,CAAC,EALW,UAAU,0BAAV,UAAU,QAKrB;AA0CD,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC1B,mCAAa,CAAA;IACb,wDAAkC,CAAA;IAClC,oDAA8B,CAAA;IAC9B,uCAAiB,CAAA;IACjB,mCAAa,CAAA;AACjB,CAAC,EANW,kBAAkB,kCAAlB,kBAAkB,QAM7B;AAED,IAAY,2BAKX;AALD,WAAY,2BAA2B;IACnC,6DAA8B,CAAA;IAC9B,0CAAW,CAAA;IACX,+DAAgC,CAAA;IAChC,qEAAsC,CAAA;AAC1C,CAAC,EALW,2BAA2B,2CAA3B,2BAA2B,QAKtC;AAyCD,IAAY,cAIX;AAJD,WAAY,cAAc;IACtB,+BAAa,CAAA;IACb,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;AACrB,CAAC,EAJW,cAAc,8BAAd,cAAc,QAIzB;AAkFD,IAAY,eAIX;AAJD,WAAY,eAAe;IACvB,yCAAsB,CAAA;IACtB,iDAA8B,CAAA;IAC9B,uCAAoB,CAAA;AACxB,CAAC,EAJW,eAAe,+BAAf,eAAe,QAI1B;AAED,IAAY,qBAUX;AAVD,WAAY,qBAAqB;IAC7B,iDAAwB,CAAA;IACxB,qDAA4B,CAAA;IAC5B,6DAAoC,CAAA;IACpC,+DAAsC,CAAA;IACtC,qFAA4D,CAAA;IAC5D,mFAA0D,CAAA;IAC1D,uEAA8C,CAAA;IAC9C,+DAAsC,CAAA;IACtC,+DAAsC,CAAA;AAC1C,CAAC,EAVW,qBAAqB,qCAArB,qBAAqB,QAUhC;AAED,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IACzB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;AACrB,CAAC,EAHW,iBAAiB,iCAAjB,iBAAiB,QAG5B","sourcesContent":["/**\n * Having Survey types in types.ts was confusing tsc\n * and generating an invalid module.d.ts\n * See https://github.com/PostHog/posthog-js/issues/698\n */\n\nimport type { PropertyMatchType } from './types'\n\nexport enum SurveyWidgetType {\n    Button = 'button',\n    Tab = 'tab',\n    Selector = 'selector',\n}\n\nexport enum SurveyPosition {\n    TopLeft = 'top_left',\n    TopRight = 'top_right',\n    TopCenter = 'top_center',\n    MiddleLeft = 'middle_left',\n    MiddleRight = 'middle_right',\n    MiddleCenter = 'middle_center',\n    Left = 'left',\n    Center = 'center',\n    Right = 'right',\n    NextToTrigger = 'next_to_trigger',\n}\n\nexport interface SurveyAppearance {\n    // keep in sync with frontend/src/types.ts -> SurveyAppearance\n    backgroundColor?: string\n    submitButtonColor?: string\n    // text color is deprecated, use auto contrast text color instead\n    textColor?: string\n    // deprecate submit button text eventually\n    submitButtonText?: string\n    submitButtonTextColor?: string\n    descriptionTextColor?: string\n    ratingButtonColor?: string\n    ratingButtonActiveColor?: string\n    ratingButtonHoverColor?: string\n    whiteLabel?: boolean\n    autoDisappear?: boolean\n    displayThankYouMessage?: boolean\n    thankYouMessageHeader?: string\n    thankYouMessageDescription?: string\n    thankYouMessageDescriptionContentType?: SurveyQuestionDescriptionContentType\n    thankYouMessageCloseButtonText?: string\n    borderColor?: string\n    position?: SurveyPosition\n    placeholder?: string\n    shuffleQuestions?: boolean\n    surveyPopupDelaySeconds?: number\n    // widget options\n    widgetType?: SurveyWidgetType\n    widgetSelector?: string\n    widgetLabel?: string\n    widgetColor?: string\n    fontFamily?: string\n    // questionable: Not in frontend/src/types.ts -> SurveyAppearance, but used in site app\n    maxWidth?: string\n    zIndex?: string\n    disabledButtonOpacity?: string\n    boxPadding?: string\n}\n\nexport enum SurveyType {\n    Popover = 'popover',\n    API = 'api',\n    Widget = 'widget',\n    ExternalSurvey = 'external_survey',\n}\n\nexport type SurveyQuestion = BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion | MultipleSurveyQuestion\n\nexport type SurveyQuestionDescriptionContentType = 'html' | 'text'\n\ninterface SurveyQuestionBase {\n    question: string\n    id?: string\n    description?: string | null\n    descriptionContentType?: SurveyQuestionDescriptionContentType\n    optional?: boolean\n    buttonText?: string\n    branching?: NextQuestionBranching | EndBranching | ResponseBasedBranching | SpecificQuestionBranching\n}\n\nexport interface BasicSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Open\n}\n\nexport interface LinkSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Link\n    link?: string | null\n}\n\nexport interface RatingSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Rating\n    display: 'number' | 'emoji'\n    scale: 3 | 5 | 7 | 10\n    lowerBoundLabel: string\n    upperBoundLabel: string\n    skipSubmitButton?: boolean\n}\n\nexport interface MultipleSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.SingleChoice | SurveyQuestionType.MultipleChoice\n    choices: string[]\n    hasOpenChoice?: boolean\n    shuffleOptions?: boolean\n    skipSubmitButton?: boolean\n}\n\nexport enum SurveyQuestionType {\n    Open = 'open',\n    MultipleChoice = 'multiple_choice',\n    SingleChoice = 'single_choice',\n    Rating = 'rating',\n    Link = 'link',\n}\n\nexport enum SurveyQuestionBranchingType {\n    NextQuestion = 'next_question',\n    End = 'end',\n    ResponseBased = 'response_based',\n    SpecificQuestion = 'specific_question',\n}\n\ninterface NextQuestionBranching {\n    type: SurveyQuestionBranchingType.NextQuestion\n}\n\ninterface EndBranching {\n    type: SurveyQuestionBranchingType.End\n}\n\ninterface ResponseBasedBranching {\n    type: SurveyQuestionBranchingType.ResponseBased\n    responseValues: Record<string, any>\n}\n\ninterface SpecificQuestionBranching {\n    type: SurveyQuestionBranchingType.SpecificQuestion\n    index: number\n}\n\nexport type SurveyCallback = (surveys: Survey[], context?: { isLoaded: boolean; error?: string }) => void\n\nexport interface SurveyElement {\n    text?: string\n    $el_text?: string\n    tag_name?: string\n    href?: string\n    attr_id?: string\n    attr_class?: string[]\n    nth_child?: number\n    nth_of_type?: number\n    attributes?: Record<string, any>\n    event_id?: number\n    order?: number\n    group_id?: number\n}\nexport interface SurveyRenderReason {\n    visible: boolean\n    disabledReason?: string\n}\n\nexport enum SurveySchedule {\n    Once = 'once',\n    Recurring = 'recurring',\n    Always = 'always',\n}\n\nexport interface Survey {\n    // Sync this with the backend's SurveyAPISerializer!\n    id: string\n    name: string\n    description: string\n    type: SurveyType\n    feature_flag_keys:\n        | {\n              key: string\n              value?: string\n          }[]\n        | null\n    // the linked flag key is the flag key that is used to link the survey to a flag\n    linked_flag_key: string | null\n    targeting_flag_key: string | null\n    // the internal targeting flag key is the flag key that is used to target users who have seen the survey\n    // eg survey-targeting-<survey-id>\n    internal_targeting_flag_key: string | null\n    questions: SurveyQuestion[]\n    appearance: SurveyAppearance | null\n    conditions: {\n        url?: string\n        selector?: string\n        seenSurveyWaitPeriodInDays?: number\n        urlMatchType?: PropertyMatchType\n        events: {\n            repeatedActivation?: boolean\n            values: {\n                name: string\n                /** Property filters for event matching */\n                propertyFilters?: {\n                    [propertyName: string]: {\n                        values: string[]\n                        operator: PropertyMatchType\n                    }\n                }\n            }[]\n        } | null\n        actions: {\n            values: SurveyActionType[]\n        } | null\n        deviceTypes?: string[]\n        deviceTypesMatchType?: PropertyMatchType\n        linkedFlagVariant?: string\n    } | null\n    start_date: string | null\n    end_date: string | null\n    current_iteration: number | null\n    current_iteration_start_date: string | null\n    schedule?: SurveySchedule | null\n    enable_partial_responses?: boolean | null\n}\n\nexport type SurveyWithTypeAndAppearance = Pick<Survey, 'id' | 'type' | 'appearance'>\n\nexport interface SurveyActionType {\n    id: number\n    name: string | null\n    steps?: ActionStepType[]\n}\n\n/** Sync with plugin-server/src/types.ts */\nexport type ActionStepStringMatching = 'contains' | 'exact' | 'regex'\n\nexport interface ActionStepType {\n    event?: string | null\n    selector?: string | null\n    /** @deprecated Only `selector` should be used now. */\n    tag_name?: string\n    text?: string | null\n    /** @default StringMatching.Exact */\n    text_matching?: ActionStepStringMatching | null\n    href?: string | null\n    /** @default ActionStepStringMatching.Exact */\n    href_matching?: ActionStepStringMatching | null\n    url?: string | null\n    /** @default StringMatching.Contains */\n    url_matching?: ActionStepStringMatching | null\n}\n\nexport enum SurveyEventName {\n    SHOWN = 'survey shown',\n    DISMISSED = 'survey dismissed',\n    SENT = 'survey sent',\n}\n\nexport enum SurveyEventProperties {\n    SURVEY_ID = '$survey_id',\n    SURVEY_NAME = '$survey_name',\n    SURVEY_RESPONSE = '$survey_response',\n    SURVEY_ITERATION = '$survey_iteration',\n    SURVEY_ITERATION_START_DATE = '$survey_iteration_start_date',\n    SURVEY_PARTIALLY_COMPLETED = '$survey_partially_completed',\n    SURVEY_SUBMISSION_ID = '$survey_submission_id',\n    SURVEY_QUESTIONS = '$survey_questions',\n    SURVEY_COMPLETED = '$survey_completed',\n}\n\nexport enum DisplaySurveyType {\n    Popover = 'popover',\n    Inline = 'inline',\n}\n\ninterface DisplaySurveyOptionsBase {\n    ignoreConditions: boolean\n    ignoreDelay: boolean\n    displayType: DisplaySurveyType\n}\n\ninterface DisplaySurveyPopoverOptions extends DisplaySurveyOptionsBase {\n    displayType: DisplaySurveyType.Popover\n}\n\ninterface DisplaySurveyInlineOptions extends DisplaySurveyOptionsBase {\n    displayType: DisplaySurveyType.Inline\n    selector: string\n}\n\nexport type DisplaySurveyOptions = DisplaySurveyPopoverOptions | DisplaySurveyInlineOptions\n"]}