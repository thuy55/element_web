{"version":3,"file":"posthog-surveys.js","sourceRoot":"","sources":["../../src/posthog-surveys.ts"],"names":[],"mappings":"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","sourcesContent":["import { SURVEYS } from './constants'\nimport { SurveyManager } from './extensions/surveys'\nimport { PostHog } from './posthog-core'\nimport {\n    DisplaySurveyOptions,\n    DisplaySurveyType,\n    Survey,\n    SurveyCallback,\n    SurveyRenderReason,\n} from './posthog-surveys-types'\nimport { RemoteConfig } from './types'\nimport { assignableWindow, document } from './utils/globals'\nimport { SurveyEventReceiver } from './utils/survey-event-receiver'\nimport {\n    doesSurveyActivateByAction,\n    doesSurveyActivateByEvent,\n    IN_APP_SURVEY_TYPES,\n    isSurveyRunning,\n    SURVEY_LOGGER as logger,\n    SURVEY_IN_PROGRESS_PREFIX,\n    SURVEY_SEEN_PREFIX,\n} from './utils/survey-utils'\nimport { isNullish, isUndefined, isArray } from '@posthog/core'\n\nexport class PostHogSurveys {\n    // this is set to undefined until the remote config is loaded\n    // then it's set to true if there are surveys to load\n    // or false if there are no surveys to load\n    // or false if the surveys feature is disabled in the project settings\n    private _isSurveysEnabled?: boolean = undefined\n    public _surveyEventReceiver: SurveyEventReceiver | null\n    private _surveyManager: SurveyManager | null = null\n    private _isFetchingSurveys: boolean = false\n    private _isInitializingSurveys: boolean = false\n    private _surveyCallbacks: SurveyCallback[] = []\n\n    constructor(private readonly _instance: PostHog) {\n        // we set this to undefined here because we need the persistence storage for this type\n        // but that's not initialized until loadIfEnabled is called.\n        this._surveyEventReceiver = null\n    }\n\n    onRemoteConfig(response: RemoteConfig) {\n        // only load surveys if they are enabled and there are surveys to load\n        if (this._instance.config.disable_surveys) {\n            return\n        }\n\n        const surveys = response['surveys']\n        if (isNullish(surveys)) {\n            return logger.warn('Flags not loaded yet. Not loading surveys.')\n        }\n        const isArrayResponse = isArray(surveys)\n        this._isSurveysEnabled = isArrayResponse ? surveys.length > 0 : surveys\n        logger.info(`flags response received, isSurveysEnabled: ${this._isSurveysEnabled}`)\n        this.loadIfEnabled()\n    }\n\n    reset(): void {\n        localStorage.removeItem('lastSeenSurveyDate')\n        const surveyKeys = []\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i)\n            if (key?.startsWith(SURVEY_SEEN_PREFIX) || key?.startsWith(SURVEY_IN_PROGRESS_PREFIX)) {\n                surveyKeys.push(key)\n            }\n        }\n\n        surveyKeys.forEach((key) => localStorage.removeItem(key))\n    }\n\n    loadIfEnabled() {\n        // Initial guard clauses\n        if (this._surveyManager) {\n            return\n        } // Already loaded\n        if (this._isInitializingSurveys) {\n            logger.info('Already initializing surveys, skipping...')\n            return\n        }\n        if (this._instance.config.disable_surveys) {\n            logger.info('Disabled. Not loading surveys.')\n            return\n        }\n        if (this._instance.config.cookieless_mode && this._instance.consent.isOptedOut()) {\n            logger.info('Not loading surveys in cookieless mode without consent.')\n            return\n        }\n\n        const phExtensions = assignableWindow?.__PosthogExtensions__\n        if (!phExtensions) {\n            logger.error('PostHog Extensions not found.')\n            return\n        }\n\n        // waiting for remote config to load\n        // if surveys is forced enable (like external surveys), ignore the remote config and load surveys\n        if (isUndefined(this._isSurveysEnabled) && !this._instance.config.advanced_enable_surveys) {\n            return\n        }\n\n        const isSurveysEnabled = this._isSurveysEnabled || this._instance.config.advanced_enable_surveys\n\n        this._isInitializingSurveys = true\n\n        try {\n            const generateSurveys = phExtensions.generateSurveys\n            if (generateSurveys) {\n                // Surveys code is already loaded\n                this._completeSurveyInitialization(generateSurveys, isSurveysEnabled)\n                return\n            }\n\n            // If we reach here, surveys code is not loaded yet\n            const loadExternalDependency = phExtensions.loadExternalDependency\n            if (!loadExternalDependency) {\n                // Cannot load surveys code\n                this._handleSurveyLoadError('PostHog loadExternalDependency extension not found.')\n                return\n            }\n\n            // If we reach here, we need to load the dependency\n            loadExternalDependency(this._instance, 'surveys', (err) => {\n                if (err || !phExtensions.generateSurveys) {\n                    this._handleSurveyLoadError('Could not load surveys script', err)\n                } else {\n                    // Need to get the function reference again inside the callback\n                    this._completeSurveyInitialization(phExtensions.generateSurveys, isSurveysEnabled)\n                }\n            })\n        } catch (e) {\n            this._handleSurveyLoadError('Error initializing surveys', e)\n            throw e\n        } finally {\n            // Ensure the flag is always reset\n            this._isInitializingSurveys = false\n        }\n    }\n\n    /** Helper to finalize survey initialization */\n    private _completeSurveyInitialization(\n        generateSurveysFn: (instance: PostHog, isSurveysEnabled: boolean) => any,\n        isSurveysEnabled: boolean\n    ): void {\n        this._surveyManager = generateSurveysFn(this._instance, isSurveysEnabled)\n        this._surveyEventReceiver = new SurveyEventReceiver(this._instance)\n        logger.info('Surveys loaded successfully')\n        this._notifySurveyCallbacks({ isLoaded: true })\n    }\n\n    /** Helper to handle errors during survey loading */\n    private _handleSurveyLoadError(message: string, error?: any): void {\n        logger.error(message, error)\n        this._notifySurveyCallbacks({ isLoaded: false, error: message })\n    }\n\n    /**\n     * Register a callback that runs when surveys are initialized.\n     * ### Usage:\n     *\n     *     posthog.onSurveysLoaded((surveys) => {\n     *         // You can work with all surveys\n     *         console.log('All available surveys:', surveys)\n     *\n     *         // Or get active matching surveys\n     *         posthog.getActiveMatchingSurveys((activeMatchingSurveys) => {\n     *             if (activeMatchingSurveys.length > 0) {\n     *                 posthog.renderSurvey(activeMatchingSurveys[0].id, '#survey-container')\n     *             }\n     *         })\n     *     })\n     *\n     * @param {Function} callback The callback function will be called when surveys are loaded or updated.\n     *                           It receives the array of all surveys and a context object with error status.\n     * @returns {Function} A function that can be called to unsubscribe the listener.\n     */\n    onSurveysLoaded(callback: SurveyCallback): () => void {\n        this._surveyCallbacks.push(callback)\n\n        if (this._surveyManager) {\n            this._notifySurveyCallbacks({\n                isLoaded: true,\n            })\n        }\n        // Return unsubscribe function\n        return () => {\n            this._surveyCallbacks = this._surveyCallbacks.filter((cb: SurveyCallback) => cb !== callback)\n        }\n    }\n\n    getSurveys(callback: SurveyCallback, forceReload = false) {\n        // In case we manage to load the surveys script, but config says not to load surveys\n        // then we shouldn't return survey data\n        if (this._instance.config.disable_surveys) {\n            logger.info('Disabled. Not loading surveys.')\n            return callback([])\n        }\n\n        const existingSurveys = this._instance.get_property(SURVEYS)\n        if (existingSurveys && !forceReload) {\n            return callback(existingSurveys, {\n                isLoaded: true,\n            })\n        }\n\n        // Prevent concurrent API calls\n        if (this._isFetchingSurveys) {\n            return callback([], {\n                isLoaded: false,\n                error: 'Surveys are already being loaded',\n            })\n        }\n\n        try {\n            this._isFetchingSurveys = true\n            this._instance._send_request({\n                url: this._instance.requestRouter.endpointFor(\n                    'api',\n                    `/api/surveys/?token=${this._instance.config.token}`\n                ),\n                method: 'GET',\n                timeout: this._instance.config.surveys_request_timeout_ms,\n                callback: (response) => {\n                    this._isFetchingSurveys = false\n                    const statusCode = response.statusCode\n                    if (statusCode !== 200 || !response.json) {\n                        const error = `Surveys API could not be loaded, status: ${statusCode}`\n                        logger.error(error)\n                        return callback([], {\n                            isLoaded: false,\n                            error,\n                        })\n                    }\n                    const surveys = response.json.surveys || []\n\n                    const eventOrActionBasedSurveys = surveys.filter(\n                        (survey: Survey) =>\n                            isSurveyRunning(survey) &&\n                            (doesSurveyActivateByEvent(survey) || doesSurveyActivateByAction(survey))\n                    )\n\n                    if (eventOrActionBasedSurveys.length > 0) {\n                        this._surveyEventReceiver?.register(eventOrActionBasedSurveys)\n                    }\n\n                    this._instance.persistence?.register({ [SURVEYS]: surveys })\n                    return callback(surveys, {\n                        isLoaded: true,\n                    })\n                },\n            })\n        } catch (e) {\n            this._isFetchingSurveys = false\n            throw e\n        }\n    }\n\n    /** Helper method to notify all registered callbacks */\n    private _notifySurveyCallbacks(context: { isLoaded: boolean; error?: string }): void {\n        for (const callback of this._surveyCallbacks) {\n            try {\n                if (!context.isLoaded) {\n                    return callback([], context)\n                }\n                this.getSurveys(callback)\n            } catch (error) {\n                logger.error('Error in survey callback', error)\n            }\n        }\n    }\n\n    getActiveMatchingSurveys(callback: SurveyCallback, forceReload = false) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return\n        }\n        return this._surveyManager.getActiveMatchingSurveys(callback, forceReload)\n    }\n\n    private _getSurveyById(surveyId: string): Survey | null {\n        let survey: Survey | null = null\n        this.getSurveys((surveys) => {\n            survey = surveys.find((x) => x.id === surveyId) ?? null\n        })\n        return survey\n    }\n\n    private _checkSurveyEligibility(surveyId: string | Survey): { eligible: boolean; reason?: string } {\n        if (isNullish(this._surveyManager)) {\n            return { eligible: false, reason: 'SDK is not enabled or survey functionality is not yet loaded' }\n        }\n        const survey = typeof surveyId === 'string' ? this._getSurveyById(surveyId) : surveyId\n        if (!survey) {\n            return { eligible: false, reason: 'Survey not found' }\n        }\n        return this._surveyManager.checkSurveyEligibility(survey)\n    }\n\n    canRenderSurvey(surveyId: string | Survey): SurveyRenderReason {\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return { visible: false, disabledReason: 'SDK is not enabled or survey functionality is not yet loaded' }\n        }\n        const eligibility = this._checkSurveyEligibility(surveyId)\n\n        return { visible: eligibility.eligible, disabledReason: eligibility.reason }\n    }\n\n    canRenderSurveyAsync(surveyId: string, forceReload: boolean): Promise<SurveyRenderReason> {\n        // Ensure surveys are loaded before checking\n        // Using Promise to wrap the callback-based getSurveys method\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return Promise.resolve({\n                visible: false,\n                disabledReason: 'SDK is not enabled or survey functionality is not yet loaded',\n            })\n        }\n\n        // eslint-disable-next-line compat/compat\n        return new Promise<SurveyRenderReason>((resolve) => {\n            this.getSurveys((surveys) => {\n                const survey = surveys.find((x) => x.id === surveyId) ?? null\n                if (!survey) {\n                    resolve({ visible: false, disabledReason: 'Survey not found' })\n                } else {\n                    const eligibility = this._checkSurveyEligibility(survey)\n                    resolve({ visible: eligibility.eligible, disabledReason: eligibility.reason })\n                }\n            }, forceReload)\n        })\n    }\n\n    renderSurvey(surveyId: string | Survey, selector: string) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return\n        }\n        const survey = typeof surveyId === 'string' ? this._getSurveyById(surveyId) : surveyId\n        if (!survey?.id) {\n            logger.warn('Survey not found')\n            return\n        }\n        if (!IN_APP_SURVEY_TYPES.includes(survey.type)) {\n            logger.warn(`Surveys of type ${survey.type} cannot be rendered in the app`)\n            return\n        }\n        const elem = document?.querySelector(selector)\n        if (!elem) {\n            logger.warn('Survey element not found')\n            return\n        }\n        if (survey.appearance?.surveyPopupDelaySeconds) {\n            logger.info(\n                `Rendering survey ${survey.id} with delay of ${survey.appearance.surveyPopupDelaySeconds} seconds`\n            )\n            setTimeout(() => {\n                logger.info(\n                    `Rendering survey ${survey.id} with delay of ${survey.appearance?.surveyPopupDelaySeconds} seconds`\n                )\n                this._surveyManager?.renderSurvey(survey, elem)\n                logger.info(`Survey ${survey.id} rendered`)\n            }, survey.appearance.surveyPopupDelaySeconds * 1000)\n            return\n        }\n        this._surveyManager.renderSurvey(survey, elem)\n    }\n\n    displaySurvey(surveyId: string, options: DisplaySurveyOptions) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return\n        }\n        const survey = this._getSurveyById(surveyId)\n        if (!survey) {\n            logger.warn('Survey not found')\n            return\n        }\n        let surveyToDisplay = survey\n        if (survey.appearance?.surveyPopupDelaySeconds && options.ignoreDelay) {\n            surveyToDisplay = {\n                ...survey,\n                appearance: {\n                    ...survey.appearance,\n                    surveyPopupDelaySeconds: 0,\n                },\n            }\n        }\n        if (options.ignoreConditions === false) {\n            const canRender = this.canRenderSurvey(survey)\n            if (!canRender.visible) {\n                logger.warn('Survey is not eligible to be displayed: ', canRender.disabledReason)\n                return\n            }\n        }\n        if (options.displayType === DisplaySurveyType.Inline) {\n            this.renderSurvey(surveyToDisplay, options.selector)\n            return\n        }\n        this._surveyManager.handlePopoverSurvey(surveyToDisplay)\n    }\n}\n"]}