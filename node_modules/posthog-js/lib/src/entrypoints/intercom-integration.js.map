{"version":3,"file":"intercom-integration.js","sourceRoot":"","sources":["../../../src/entrypoints/intercom-integration.ts"],"names":[],"mappings":";;AACA,4CAAmD;AACnD,0CAA8C;AAE9C,IAAM,MAAM,GAAG,IAAA,qBAAY,EAAC,gCAAgC,CAAC,CAAA;AAE7D,IAAM,kBAAkB,GAAG,IAAI,GAAG,EAAU,CAAA;AAC5C,IAAI,4BAA4B,GAA6B,SAAS,CAAA;AAEtE,0BAAgB,CAAC,qBAAqB,GAAG,0BAAgB,CAAC,qBAAqB,IAAI,EAAE,CAAA;AACrF,0BAAgB,CAAC,qBAAqB,CAAC,YAAY,GAAG,0BAAgB,CAAC,qBAAqB,CAAC,YAAY,IAAI,EAAE,CAAA;AAC/G,0BAAgB,CAAC,qBAAqB,CAAC,YAAY,CAAC,QAAQ,GAAG;IAC3D,KAAK,EAAE,UAAC,OAAgB;;QACpB,IAAI,CAAC,CAAA,MAAA,OAAO,CAAC,MAAM,CAAC,YAAY,0CAAE,QAAQ,CAAA,EAAE,CAAC;YACzC,OAAM;QACV,CAAC;QAED,IAAM,QAAQ,GAAI,0BAAwB,CAAC,QAAQ,CAAA;QACnD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,MAAM,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAA;YACpE,OAAM;QACV,CAAC;QAED,IAAM,cAAc,GAAG;YACnB,IAAM,SAAS,GAAG,OAAO,CAAC,sBAAsB,EAAE,CAAA;YAClD,IAAM,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,WAAW,CAC/C,IAAI,EACJ,mBAAY,OAAO,CAAC,MAAM,CAAC,KAAK,qBAAW,OAAO,CAAC,eAAe,EAAE,CAAE,CACzE,CAAA;YAED,QAAQ,CAAC,QAAQ,EAAE;gBACf,sBAAsB,EAAE,SAAS;gBACjC,sBAAsB,EAAE,SAAS;aACpC,CAAC,CAAA;YACF,QAAQ,CAAC,YAAY,EAAE,qBAAqB,EAAE,EAAE,SAAS,WAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAA;QAC3E,CAAC,CAAA;QAED,qDAAqD;QACrD,iDAAiD;QACjD,4BAA4B,GAAG,OAAO,CAAC,WAAW,CAAC,UAAC,SAAS;YACzD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;gBACrC,cAAc,EAAE,CAAA;gBAChB,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACrC,CAAC;QACL,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;IACtC,CAAC;IACD,IAAI,EAAE;QACF,4BAA4B,aAA5B,4BAA4B,uBAA5B,4BAA4B,EAAI,CAAA;QAChC,4BAA4B,GAAG,SAAS,CAAA;IAC5C,CAAC;CACJ,CAAA","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { assignableWindow } from '../utils/globals'\nimport { createLogger } from '../utils/logger'\n\nconst logger = createLogger('[PostHog Intercom integration]')\n\nconst reportedSessionIds = new Set<string>()\nlet sessionIdListenerUnsubscribe: undefined | (() => void) = undefined\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.integrations = assignableWindow.__PosthogExtensions__.integrations || {}\nassignableWindow.__PosthogExtensions__.integrations.intercom = {\n    start: (posthog: PostHog) => {\n        if (!posthog.config.integrations?.intercom) {\n            return\n        }\n\n        const intercom = (assignableWindow as any).Intercom\n        if (!intercom) {\n            logger.warn('Intercom not found while initializing the integration')\n            return\n        }\n\n        const updateIntercom = () => {\n            const replayUrl = posthog.get_session_replay_url()\n            const personUrl = posthog.requestRouter.endpointFor(\n                'ui',\n                `/project/${posthog.config.token}/person/${posthog.get_distinct_id()}`\n            )\n\n            intercom('update', {\n                latestPosthogReplayURL: replayUrl,\n                latestPosthogPersonURL: personUrl,\n            })\n            intercom('trackEvent', 'posthog:sessionInfo', { replayUrl, personUrl })\n        }\n\n        // this is called immediately if there's a session id\n        // and then again whenever the session id changes\n        sessionIdListenerUnsubscribe = posthog.onSessionId((sessionId) => {\n            if (!reportedSessionIds.has(sessionId)) {\n                updateIntercom()\n                reportedSessionIds.add(sessionId)\n            }\n        })\n\n        logger.info('integration started')\n    },\n    stop: () => {\n        sessionIdListenerUnsubscribe?.()\n        sessionIdListenerUnsubscribe = undefined\n    },\n}\n"]}