{"version":3,"file":"surveys-preview.js","sources":["../../../node_modules/.pnpm/preact@10.19.3/node_modules/preact/dist/preact.module.js","../../../node_modules/.pnpm/preact@10.19.3/node_modules/preact/hooks/dist/hooks.module.js","../src/posthog-surveys-types.ts","../src/utils/globals.ts","../../core/dist/utils/type-utils.mjs","../src/utils/logger.ts","../src/utils/index.ts","../src/utils/survey-utils.ts","../src/uuidv7.ts","../src/request.ts","../src/utils/regex-utils.ts","../src/utils/property-utils.ts","../src/extensions/utils/stylesheet-loader.ts","../src/extensions/surveys/surveys-extension-utils.tsx","../src/extensions/surveys/icons.tsx","../src/extensions/surveys/components/PostHogLogo.tsx","../src/extensions/surveys/components/BottomSection.tsx","../src/extensions/surveys/components/QuestionHeader.tsx","../src/extensions/surveys/components/ConfirmationMessage.tsx","../src/extensions/surveys/components/QuestionTypes.tsx","../src/extensions/surveys.tsx"],"sourcesContent":["var n,l,u,t,i,o,r,f,e,c={},s=[],a=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,h=Array.isArray;function v(n,l){for(var u in l)n[u]=l[u];return n}function p(n){var l=n.parentNode;l&&l.removeChild(n)}function y(l,u,t){var i,o,r,f={};for(r in u)\"key\"==r?i=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),\"function\"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return d(l,f,i,o,null)}function d(n,t,i,o,r){var f={type:n,props:t,key:i,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==r?++u:r,__i:-1,__u:0};return null==r&&null!=l.vnode&&l.vnode(f),f}function _(){return{current:null}}function g(n){return n.children}function b(n,l){this.props=n,this.context=l}function m(n,l){if(null==l)return n.__?m(n.__,n.__i+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?m(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function w(n){(!n.__d&&(n.__d=!0)&&i.push(n)&&!x.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||r)(x)}function x(){var n,u,t,o,r,e,c,s,a;for(i.sort(f);n=i.shift();)n.__d&&(u=i.length,o=void 0,e=(r=(t=n).__v).__e,s=[],a=[],(c=t.__P)&&((o=v({},r)).__v=r.__v+1,l.vnode&&l.vnode(o),L(c,o,r,t.__n,void 0!==c.ownerSVGElement,32&r.__u?[e]:null,s,null==e?m(r):e,!!(32&r.__u),a),o.__.__k[o.__i]=o,M(s,o,a),o.__e!=e&&k(o)),i.length>u&&i.sort(f));x.__r=0}function C(n,l,u,t,i,o,r,f,e,a,h){var v,p,y,d,_,g=t&&t.__k||s,b=l.length;for(u.__d=e,P(u,l,g),e=u.__d,v=0;v<b;v++)null!=(y=u.__k[v])&&\"boolean\"!=typeof y&&\"function\"!=typeof y&&(p=-1===y.__i?c:g[y.__i]||c,y.__i=v,L(n,y,p,i,o,r,f,e,a,h),d=y.__e,y.ref&&p.ref!=y.ref&&(p.ref&&z(p.ref,null,y),h.push(y.ref,y.__c||d,y)),null==_&&null!=d&&(_=d),65536&y.__u||p.__k===y.__k?e=S(y,e,n):\"function\"==typeof y.type&&void 0!==y.__d?e=y.__d:d&&(e=d.nextSibling),y.__d=void 0,y.__u&=-196609);u.__d=e,u.__e=_}function P(n,l,u){var t,i,o,r,f,e=l.length,c=u.length,s=c,a=0;for(n.__k=[],t=0;t<e;t++)null!=(i=n.__k[t]=null==(i=l[t])||\"boolean\"==typeof i||\"function\"==typeof i?null:\"string\"==typeof i||\"number\"==typeof i||\"bigint\"==typeof i||i.constructor==String?d(null,i,null,null,i):h(i)?d(g,{children:i},null,null,null):void 0===i.constructor&&i.__b>0?d(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i)?(i.__=n,i.__b=n.__b+1,f=H(i,u,r=t+a,s),i.__i=f,o=null,-1!==f&&(s--,(o=u[f])&&(o.__u|=131072)),null==o||null===o.__v?(-1==f&&a--,\"function\"!=typeof i.type&&(i.__u|=65536)):f!==r&&(f===r+1?a++:f>r?s>e-r?a+=f-r:a--:a=f<r&&f==r-1?f-r:0,f!==t+a&&(i.__u|=65536))):(o=u[t])&&null==o.key&&o.__e&&(o.__e==n.__d&&(n.__d=m(o)),N(o,o,!1),u[t]=null,s--);if(s)for(t=0;t<c;t++)null!=(o=u[t])&&0==(131072&o.__u)&&(o.__e==n.__d&&(n.__d=m(o)),N(o,o))}function S(n,l,u){var t,i;if(\"function\"==typeof n.type){for(t=n.__k,i=0;t&&i<t.length;i++)t[i]&&(t[i].__=n,l=S(t[i],l,u));return l}return n.__e!=l&&(u.insertBefore(n.__e,l||null),l=n.__e),l&&l.nextSibling}function $(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(h(n)?n.some(function(n){$(n,l)}):l.push(n)),l}function H(n,l,u,t){var i=n.key,o=n.type,r=u-1,f=u+1,e=l[u];if(null===e||e&&i==e.key&&o===e.type)return u;if(t>(null!=e&&0==(131072&e.__u)?1:0))for(;r>=0||f<l.length;){if(r>=0){if((e=l[r])&&0==(131072&e.__u)&&i==e.key&&o===e.type)return r;r--}if(f<l.length){if((e=l[f])&&0==(131072&e.__u)&&i==e.key&&o===e.type)return f;f++}}return-1}function I(n,l,u){\"-\"===l[0]?n.setProperty(l,null==u?\"\":u):n[l]=null==u?\"\":\"number\"!=typeof u||a.test(l)?u:u+\"px\"}function T(n,l,u,t,i){var o;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof t&&(n.style.cssText=t=\"\"),t)for(l in t)u&&l in u||I(n.style,l,\"\");if(u)for(l in u)t&&u[l]===t[l]||I(n.style,l,u[l])}else if(\"o\"===l[0]&&\"n\"===l[1])o=l!==(l=l.replace(/(PointerCapture)$|Capture$/,\"$1\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?t?u.u=t.u:(u.u=Date.now(),n.addEventListener(l,o?D:A,o)):n.removeEventListener(l,o?D:A,o);else{if(i)l=l.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(\"width\"!==l&&\"height\"!==l&&\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&\"rowSpan\"!==l&&\"colSpan\"!==l&&\"role\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null==u||!1===u&&\"-\"!==l[4]?n.removeAttribute(l):n.setAttribute(l,u))}}function A(n){var u=this.l[n.type+!1];if(n.t){if(n.t<=u.u)return}else n.t=Date.now();return u(l.event?l.event(n):n)}function D(n){return this.l[n.type+!0](l.event?l.event(n):n)}function L(n,u,t,i,o,r,f,e,c,s){var a,p,y,d,_,m,k,w,x,P,S,$,H,I,T,A=u.type;if(void 0!==u.constructor)return null;128&t.__u&&(c=!!(32&t.__u),r=[e=u.__e=t.__e]),(a=l.__b)&&a(u);n:if(\"function\"==typeof A)try{if(w=u.props,x=(a=A.contextType)&&i[a.__c],P=a?x?x.props.value:a.__:i,t.__c?k=(p=u.__c=t.__c).__=p.__E:(\"prototype\"in A&&A.prototype.render?u.__c=p=new A(w,P):(u.__c=p=new b(w,P),p.constructor=A,p.render=O),x&&x.sub(p),p.props=w,p.state||(p.state={}),p.context=P,p.__n=i,y=p.__d=!0,p.__h=[],p._sb=[]),null==p.__s&&(p.__s=p.state),null!=A.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=v({},p.__s)),v(p.__s,A.getDerivedStateFromProps(w,p.__s))),d=p.props,_=p.state,p.__v=u,y)null==A.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==A.getDerivedStateFromProps&&w!==d&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(w,P),!p.__e&&(null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(w,p.__s,P)||u.__v===t.__v)){for(u.__v!==t.__v&&(p.props=w,p.state=p.__s,p.__d=!1),u.__e=t.__e,u.__k=t.__k,u.__k.forEach(function(n){n&&(n.__=u)}),S=0;S<p._sb.length;S++)p.__h.push(p._sb[S]);p._sb=[],p.__h.length&&f.push(p);break n}null!=p.componentWillUpdate&&p.componentWillUpdate(w,p.__s,P),null!=p.componentDidUpdate&&p.__h.push(function(){p.componentDidUpdate(d,_,m)})}if(p.context=P,p.props=w,p.__P=n,p.__e=!1,$=l.__r,H=0,\"prototype\"in A&&A.prototype.render){for(p.state=p.__s,p.__d=!1,$&&$(u),a=p.render(p.props,p.state,p.context),I=0;I<p._sb.length;I++)p.__h.push(p._sb[I]);p._sb=[]}else do{p.__d=!1,$&&$(u),a=p.render(p.props,p.state,p.context),p.state=p.__s}while(p.__d&&++H<25);p.state=p.__s,null!=p.getChildContext&&(i=v(v({},i),p.getChildContext())),y||null==p.getSnapshotBeforeUpdate||(m=p.getSnapshotBeforeUpdate(d,_)),C(n,h(T=null!=a&&a.type===g&&null==a.key?a.props.children:a)?T:[T],u,t,i,o,r,f,e,c,s),p.base=u.__e,u.__u&=-161,p.__h.length&&f.push(p),k&&(p.__E=p.__=null)}catch(n){u.__v=null,c||null!=r?(u.__e=e,u.__u|=c?160:32,r[r.indexOf(e)]=null):(u.__e=t.__e,u.__k=t.__k),l.__e(n,u,t)}else null==r&&u.__v===t.__v?(u.__k=t.__k,u.__e=t.__e):u.__e=j(t.__e,u,t,i,o,r,f,c,s);(a=l.diffed)&&a(u)}function M(n,u,t){u.__d=void 0;for(var i=0;i<t.length;i++)z(t[i],t[++i],t[++i]);l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function j(l,u,t,i,o,r,f,e,s){var a,v,y,d,_,g,b,k=t.props,w=u.props,x=u.type;if(\"svg\"===x&&(o=!0),null!=r)for(a=0;a<r.length;a++)if((_=r[a])&&\"setAttribute\"in _==!!x&&(x?_.localName===x:3===_.nodeType)){l=_,r[a]=null;break}if(null==l){if(null===x)return document.createTextNode(w);l=o?document.createElementNS(\"http://www.w3.org/2000/svg\",x):document.createElement(x,w.is&&w),r=null,e=!1}if(null===x)k===w||e&&l.data===w||(l.data=w);else{if(r=r&&n.call(l.childNodes),k=t.props||c,!e&&null!=r)for(k={},a=0;a<l.attributes.length;a++)k[(_=l.attributes[a]).name]=_.value;for(a in k)_=k[a],\"children\"==a||(\"dangerouslySetInnerHTML\"==a?y=_:\"key\"===a||a in w||T(l,a,null,_,o));for(a in w)_=w[a],\"children\"==a?d=_:\"dangerouslySetInnerHTML\"==a?v=_:\"value\"==a?g=_:\"checked\"==a?b=_:\"key\"===a||e&&\"function\"!=typeof _||k[a]===_||T(l,a,_,k[a],o);if(v)e||y&&(v.__html===y.__html||v.__html===l.innerHTML)||(l.innerHTML=v.__html),u.__k=[];else if(y&&(l.innerHTML=\"\"),C(l,h(d)?d:[d],u,t,i,o&&\"foreignObject\"!==x,r,f,r?r[0]:t.__k&&m(t,0),e,s),null!=r)for(a=r.length;a--;)null!=r[a]&&p(r[a]);e||(a=\"value\",void 0!==g&&(g!==l[a]||\"progress\"===x&&!g||\"option\"===x&&g!==k[a])&&T(l,a,g,k[a],!1),a=\"checked\",void 0!==b&&b!==l[a]&&T(l,a,b,k[a],!1))}return l}function z(n,u,t){try{\"function\"==typeof n?n(u):n.current=u}catch(n){l.__e(n,t)}}function N(n,u,t){var i,o;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||z(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(n){l.__e(n,u)}i.base=i.__P=null,n.__c=void 0}if(i=n.__k)for(o=0;o<i.length;o++)i[o]&&N(i[o],u,t||\"function\"!=typeof n.type);t||null==n.__e||p(n.__e),n.__=n.__e=n.__d=void 0}function O(n,l,u){return this.constructor(n,u)}function q(u,t,i){var o,r,f,e;l.__&&l.__(u,t),r=(o=\"function\"==typeof i)?null:i&&i.__k||t.__k,f=[],e=[],L(t,u=(!o&&i||t).__k=y(g,null,[u]),r||c,c,void 0!==t.ownerSVGElement,!o&&i?[i]:r?null:t.firstChild?n.call(t.childNodes):null,f,!o&&i?i:r?r.__e:t.firstChild,o,e),M(f,u,e)}function B(n,l){q(n,l,B)}function E(l,u,t){var i,o,r,f,e=v({},l.props);for(r in l.type&&l.type.defaultProps&&(f=l.type.defaultProps),u)\"key\"==r?i=u[r]:\"ref\"==r?o=u[r]:e[r]=void 0===u[r]&&void 0!==f?f[r]:u[r];return arguments.length>2&&(e.children=arguments.length>3?n.call(arguments,2):t),d(l.type,e,i||l.key,o||l.ref,null)}function F(n,l){var u={__c:l=\"__cC\"+e++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,t;return this.getChildContext||(u=[],(t={})[l]=this,this.getChildContext=function(){return t},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(function(n){n.__e=!0,w(n)})},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=s.slice,l={__e:function(n,l,u,t){for(var i,o,r;l=l.__;)if((i=l.__c)&&!i.__)try{if((o=i.constructor)&&null!=o.getDerivedStateFromError&&(i.setState(o.getDerivedStateFromError(n)),r=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(n,t||{}),r=i.__d),r)return i.__E=i}catch(l){n=l}throw n}},u=0,t=function(n){return null!=n&&null==n.constructor},b.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=v({},this.state),\"function\"==typeof n&&(n=n(v({},u),this.props)),n&&v(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),w(this))},b.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),w(this))},b.prototype.render=g,i=[],r=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,f=function(n,l){return n.__v.__b-l.__v.__b},x.__r=0,e=0;export{b as Component,g as Fragment,E as cloneElement,F as createContext,y as createElement,_ as createRef,y as h,B as hydrate,t as isValidElement,l as options,q as render,$ as toChildArray};\n//# sourceMappingURL=preact.module.js.map\n","import{options as n}from\"preact\";var t,r,u,i,o=0,f=[],c=[],e=n.__b,a=n.__r,v=n.diffed,l=n.__c,m=n.unmount;function d(t,u){n.__h&&n.__h(r,t,o||u),o=0;var i=r.__H||(r.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t]}function h(n){return o=1,s(B,n)}function s(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}))}],o.__c=r,!r.u)){var f=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return!n.__N}))return!c||c.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0)}}),!(!i&&o.__c.props===n)&&(!c||c.call(this,n,t,r))};r.u=!0;var c=r.shouldComponentUpdate,e=r.componentWillUpdate;r.componentWillUpdate=function(n,t,r){if(this.__e){var u=c;c=void 0,f(n,t,r),c=u}e&&e.call(this,n,t,r)},r.shouldComponentUpdate=f}return o.__N||o.__}function p(u,i){var o=d(t++,3);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__H.__h.push(o))}function y(u,i){var o=d(t++,4);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__h.push(o))}function _(n){return o=5,F(function(){return{current:n}},[])}function A(n,t,r){o=6,y(function(){return\"function\"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n))}function F(n,r){var u=d(t++,7);return z(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T(n,t){return o=8,F(function(){return n},t)}function q(n){var u=r.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function x(t,r){n.useDebugValue&&n.useDebugValue(r?r(t):t)}function P(n){var u=d(t++,10),i=h();return u.__=n,r.componentDidCatch||(r.componentDidCatch=function(n,t){u.__&&u.__(n,t),i[1](n)}),[i[0],function(){i[1](void 0)}]}function V(){var n=d(t++,11);if(!n.__){for(var u=r.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__=\"P\"+i[0]+\"-\"+i[1]++}return n.__}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k),t.__H.__h.forEach(w),t.__H.__h=[]}catch(r){t.__H.__h=[],n.__e(r,t.__v)}}n.__b=function(n){r=null,e&&e(n)},n.__r=function(n){a&&a(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0})):(i.__h.forEach(k),i.__h.forEach(w),i.__h=[],t=0)),u=r},n.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===n.requestAnimationFrame||((i=n.requestAnimationFrame)||j)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c})),u=r=null},n.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k),t.__h=t.__h.filter(function(n){return!n.__||w(n)})}catch(u){r.some(function(n){n.__h&&(n.__h=[])}),r=[],n.__e(u,t.__v)}}),l&&l(t,r)},n.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k(n)}catch(n){r=n}}),u.__H=void 0,r&&n.__e(r,u.__v))};var g=\"function\"==typeof requestAnimationFrame;function j(n){var t,r=function(){clearTimeout(u),g&&cancelAnimationFrame(t),setTimeout(n)},u=setTimeout(r,100);g&&(t=requestAnimationFrame(r))}function k(n){var t=r,u=n.__c;\"function\"==typeof u&&(n.__c=void 0,u()),r=t}function w(n){var t=r;n.__c=n.__(),r=t}function z(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B(n,t){return\"function\"==typeof t?t(n):t}export{T as useCallback,q as useContext,x as useDebugValue,p as useEffect,P as useErrorBoundary,V as useId,A as useImperativeHandle,y as useLayoutEffect,F as useMemo,s as useReducer,_ as useRef,h as useState};\n//# sourceMappingURL=hooks.module.js.map\n","/**\n * Having Survey types in types.ts was confusing tsc\n * and generating an invalid module.d.ts\n * See https://github.com/PostHog/posthog-js/issues/698\n */\n\nimport type { PropertyMatchType } from './types'\n\nexport enum SurveyWidgetType {\n    Button = 'button',\n    Tab = 'tab',\n    Selector = 'selector',\n}\n\nexport enum SurveyPosition {\n    TopLeft = 'top_left',\n    TopRight = 'top_right',\n    TopCenter = 'top_center',\n    MiddleLeft = 'middle_left',\n    MiddleRight = 'middle_right',\n    MiddleCenter = 'middle_center',\n    Left = 'left',\n    Center = 'center',\n    Right = 'right',\n    NextToTrigger = 'next_to_trigger',\n}\n\nexport interface SurveyAppearance {\n    // keep in sync with frontend/src/types.ts -> SurveyAppearance\n    backgroundColor?: string\n    submitButtonColor?: string\n    // text color is deprecated, use auto contrast text color instead\n    textColor?: string\n    // deprecate submit button text eventually\n    submitButtonText?: string\n    submitButtonTextColor?: string\n    descriptionTextColor?: string\n    ratingButtonColor?: string\n    ratingButtonActiveColor?: string\n    ratingButtonHoverColor?: string\n    whiteLabel?: boolean\n    autoDisappear?: boolean\n    displayThankYouMessage?: boolean\n    thankYouMessageHeader?: string\n    thankYouMessageDescription?: string\n    thankYouMessageDescriptionContentType?: SurveyQuestionDescriptionContentType\n    thankYouMessageCloseButtonText?: string\n    borderColor?: string\n    position?: SurveyPosition\n    placeholder?: string\n    shuffleQuestions?: boolean\n    surveyPopupDelaySeconds?: number\n    // widget options\n    widgetType?: SurveyWidgetType\n    widgetSelector?: string\n    widgetLabel?: string\n    widgetColor?: string\n    fontFamily?: string\n    // questionable: Not in frontend/src/types.ts -> SurveyAppearance, but used in site app\n    maxWidth?: string\n    zIndex?: string\n    disabledButtonOpacity?: string\n    boxPadding?: string\n}\n\nexport enum SurveyType {\n    Popover = 'popover',\n    API = 'api',\n    Widget = 'widget',\n    ExternalSurvey = 'external_survey',\n}\n\nexport type SurveyQuestion = BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion | MultipleSurveyQuestion\n\nexport type SurveyQuestionDescriptionContentType = 'html' | 'text'\n\ninterface SurveyQuestionBase {\n    question: string\n    id?: string\n    description?: string | null\n    descriptionContentType?: SurveyQuestionDescriptionContentType\n    optional?: boolean\n    buttonText?: string\n    branching?: NextQuestionBranching | EndBranching | ResponseBasedBranching | SpecificQuestionBranching\n}\n\nexport interface BasicSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Open\n}\n\nexport interface LinkSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Link\n    link?: string | null\n}\n\nexport interface RatingSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Rating\n    display: 'number' | 'emoji'\n    scale: 3 | 5 | 7 | 10\n    lowerBoundLabel: string\n    upperBoundLabel: string\n    skipSubmitButton?: boolean\n}\n\nexport interface MultipleSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.SingleChoice | SurveyQuestionType.MultipleChoice\n    choices: string[]\n    hasOpenChoice?: boolean\n    shuffleOptions?: boolean\n    skipSubmitButton?: boolean\n}\n\nexport enum SurveyQuestionType {\n    Open = 'open',\n    MultipleChoice = 'multiple_choice',\n    SingleChoice = 'single_choice',\n    Rating = 'rating',\n    Link = 'link',\n}\n\nexport enum SurveyQuestionBranchingType {\n    NextQuestion = 'next_question',\n    End = 'end',\n    ResponseBased = 'response_based',\n    SpecificQuestion = 'specific_question',\n}\n\ninterface NextQuestionBranching {\n    type: SurveyQuestionBranchingType.NextQuestion\n}\n\ninterface EndBranching {\n    type: SurveyQuestionBranchingType.End\n}\n\ninterface ResponseBasedBranching {\n    type: SurveyQuestionBranchingType.ResponseBased\n    responseValues: Record<string, any>\n}\n\ninterface SpecificQuestionBranching {\n    type: SurveyQuestionBranchingType.SpecificQuestion\n    index: number\n}\n\nexport type SurveyCallback = (surveys: Survey[], context?: { isLoaded: boolean; error?: string }) => void\n\nexport interface SurveyElement {\n    text?: string\n    $el_text?: string\n    tag_name?: string\n    href?: string\n    attr_id?: string\n    attr_class?: string[]\n    nth_child?: number\n    nth_of_type?: number\n    attributes?: Record<string, any>\n    event_id?: number\n    order?: number\n    group_id?: number\n}\nexport interface SurveyRenderReason {\n    visible: boolean\n    disabledReason?: string\n}\n\nexport enum SurveySchedule {\n    Once = 'once',\n    Recurring = 'recurring',\n    Always = 'always',\n}\n\nexport interface Survey {\n    // Sync this with the backend's SurveyAPISerializer!\n    id: string\n    name: string\n    description: string\n    type: SurveyType\n    feature_flag_keys:\n        | {\n              key: string\n              value?: string\n          }[]\n        | null\n    // the linked flag key is the flag key that is used to link the survey to a flag\n    linked_flag_key: string | null\n    targeting_flag_key: string | null\n    // the internal targeting flag key is the flag key that is used to target users who have seen the survey\n    // eg survey-targeting-<survey-id>\n    internal_targeting_flag_key: string | null\n    questions: SurveyQuestion[]\n    appearance: SurveyAppearance | null\n    conditions: {\n        url?: string\n        selector?: string\n        seenSurveyWaitPeriodInDays?: number\n        urlMatchType?: PropertyMatchType\n        events: {\n            repeatedActivation?: boolean\n            values: {\n                name: string\n                /** Property filters for event matching */\n                propertyFilters?: {\n                    [propertyName: string]: {\n                        values: string[]\n                        operator: PropertyMatchType\n                    }\n                }\n            }[]\n        } | null\n        actions: {\n            values: SurveyActionType[]\n        } | null\n        deviceTypes?: string[]\n        deviceTypesMatchType?: PropertyMatchType\n        linkedFlagVariant?: string\n    } | null\n    start_date: string | null\n    end_date: string | null\n    current_iteration: number | null\n    current_iteration_start_date: string | null\n    schedule?: SurveySchedule | null\n    enable_partial_responses?: boolean | null\n}\n\nexport type SurveyWithTypeAndAppearance = Pick<Survey, 'id' | 'type' | 'appearance'>\n\nexport interface SurveyActionType {\n    id: number\n    name: string | null\n    steps?: ActionStepType[]\n}\n\n/** Sync with plugin-server/src/types.ts */\nexport type ActionStepStringMatching = 'contains' | 'exact' | 'regex'\n\nexport interface ActionStepType {\n    event?: string | null\n    selector?: string | null\n    /** @deprecated Only `selector` should be used now. */\n    tag_name?: string\n    text?: string | null\n    /** @default StringMatching.Exact */\n    text_matching?: ActionStepStringMatching | null\n    href?: string | null\n    /** @default ActionStepStringMatching.Exact */\n    href_matching?: ActionStepStringMatching | null\n    url?: string | null\n    /** @default StringMatching.Contains */\n    url_matching?: ActionStepStringMatching | null\n}\n\nexport enum SurveyEventName {\n    SHOWN = 'survey shown',\n    DISMISSED = 'survey dismissed',\n    SENT = 'survey sent',\n}\n\nexport enum SurveyEventProperties {\n    SURVEY_ID = '$survey_id',\n    SURVEY_NAME = '$survey_name',\n    SURVEY_RESPONSE = '$survey_response',\n    SURVEY_ITERATION = '$survey_iteration',\n    SURVEY_ITERATION_START_DATE = '$survey_iteration_start_date',\n    SURVEY_PARTIALLY_COMPLETED = '$survey_partially_completed',\n    SURVEY_SUBMISSION_ID = '$survey_submission_id',\n    SURVEY_QUESTIONS = '$survey_questions',\n    SURVEY_COMPLETED = '$survey_completed',\n}\n\nexport enum DisplaySurveyType {\n    Popover = 'popover',\n    Inline = 'inline',\n}\n\ninterface DisplaySurveyOptionsBase {\n    ignoreConditions: boolean\n    ignoreDelay: boolean\n    displayType: DisplaySurveyType\n}\n\ninterface DisplaySurveyPopoverOptions extends DisplaySurveyOptionsBase {\n    displayType: DisplaySurveyType.Popover\n}\n\ninterface DisplaySurveyInlineOptions extends DisplaySurveyOptionsBase {\n    displayType: DisplaySurveyType.Inline\n    selector: string\n}\n\nexport type DisplaySurveyOptions = DisplaySurveyPopoverOptions | DisplaySurveyInlineOptions\n","import type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport {\n    DeadClicksAutoCaptureConfig,\n    ExternalIntegrationKind,\n    Properties,\n    RemoteConfig,\n    SiteAppLoader,\n    SessionStartReason,\n} from '../types'\n// only importing types here, so won't affect the bundle\n// eslint-disable-next-line posthog-js/no-external-replay-imports\nimport type { SessionRecordingStatus, TriggerType } from '../extensions/replay/external/triggerMatching'\nimport { eventWithTime } from '@rrweb/types'\nimport { ErrorTracking } from '@posthog/core'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\nexport type AssignableWindow = Window &\n    typeof globalThis & {\n        /*\n         * Main PostHog instance\n         */\n        posthog: any\n\n        /*\n         * This is our contract between (potentially) lazily loaded extensions and the SDK\n         */\n        __PosthogExtensions__?: PostHogExtensions\n\n        /**\n         * When loading remote config, we assign it to this global configuration\n         * for ease of sharing it with the rest of the SDK\n         */\n        _POSTHOG_REMOTE_CONFIG?: Record<\n            string,\n            {\n                config: RemoteConfig\n                siteApps: SiteAppLoader[]\n            }\n        >\n\n        /**\n         * If this is set on the window, our logger will log to the console\n         * for ease of debugging. Used for testing purposes only.\n         *\n         * @see {Config.DEBUG} from config.ts\n         */\n        POSTHOG_DEBUG: any\n\n        // Exposed by the browser\n        doNotTrack: any\n\n        // See entrypoints/customizations.full.ts\n        posthogCustomizations: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/exception-autocapture.ts\n         *\n         * @deprecated use `__PosthogExtensions__.errorWrappingFunctions` instead\n         */\n        posthogErrorWrappingFunctions: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.rrweb` instead\n         */\n        rrweb: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.rrwebConsoleRecord` instead\n         */\n        rrwebConsoleRecord: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.getRecordNetworkPlugin` instead\n         */\n        getRecordNetworkPlugin: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/web-vitals.ts\n         *\n         * @deprecated use `__PosthogExtensions__.postHogWebVitalsCallbacks` instead\n         */\n        postHogWebVitalsCallbacks: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/tracing-headers.ts\n         *\n         * @deprecated use `__PosthogExtensions__.postHogTracingHeadersPatchFns` instead\n         */\n        postHogTracingHeadersPatchFns: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/surveys.ts\n         *\n         * @deprecated use `__PosthogExtensions__.generateSurveys` instead\n         */\n        extendPostHogWithSurveys: any\n\n        /*\n         * These are used to handle our toolbar state.\n         * @see {Toolbar} from extensions/toolbar.ts\n         */\n        ph_load_toolbar: any\n        ph_load_editor: any\n        ph_toolbar_state: any\n    } & Record<`__$$ph_site_app_${string}`, any>\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type ExternalExtensionKind = 'intercom-integration' | 'crisp-chat-integration'\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'lazy-recorder'\n    | 'tracing-headers'\n    | 'surveys'\n    | 'dead-clicks-autocapture'\n    | 'remote-config'\n    | ExternalExtensionKind\n\nexport interface LazyLoadedSessionRecordingInterface {\n    start: (startReason?: SessionStartReason) => void\n    stop: () => void\n    sessionId: string\n    status: SessionRecordingStatus\n    onRRwebEmit: (rawEvent: eventWithTime) => void\n    log: (message: string, level: 'log' | 'warn' | 'error') => void\n    sdkDebugProperties: Properties\n    overrideLinkedFlag: () => void\n    overrideSampling: () => void\n    overrideTrigger: (triggerType: TriggerType) => void\n    isStarted: boolean\n    tryAddCustomEvent(tag: string, payload: any): boolean\n}\n\nexport interface LazyLoadedDeadClicksAutocaptureInterface {\n    start: (observerTarget: Node) => void\n    stop: () => void\n}\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: ErrorTracking.ErrorProperties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: ErrorTracking.ErrorProperties) => void) => () => void\n        wrapConsoleError: (captureFn: (props: ErrorTracking.ErrorProperties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    generateSurveys?: (posthog: PostHog, isSurveysEnabled: boolean) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager) => () => void\n        _patchXHR: (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager) => () => void\n    }\n    initDeadClicksAutocapture?: (\n        ph: PostHog,\n        config: DeadClicksAutoCaptureConfig\n    ) => LazyLoadedDeadClicksAutocaptureInterface\n    integrations?: {\n        [K in ExternalIntegrationKind]?: { start: (posthog: PostHog) => void; stop: () => void }\n    }\n    initSessionRecording?: (ph: PostHog) => LazyLoadedSessionRecordingInterface\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: AssignableWindow = win ?? ({} as any)\n\nexport { win as window }\n","import { knownUnsafeEditableEvent } from \"../types.mjs\";\nimport { includes } from \"./string-utils.mjs\";\nconst nativeIsArray = Array.isArray;\nconst ObjProto = Object.prototype;\nconst type_utils_hasOwnProperty = ObjProto.hasOwnProperty;\nconst type_utils_toString = ObjProto.toString;\nconst isArray = nativeIsArray || function(obj) {\n    return '[object Array]' === type_utils_toString.call(obj);\n};\nconst isFunction = (x)=>'function' == typeof x;\nconst isNativeFunction = (x)=>isFunction(x) && -1 !== x.toString().indexOf('[native code]');\nconst isObject = (x)=>x === Object(x) && !isArray(x);\nconst isEmptyObject = (x)=>{\n    if (isObject(x)) {\n        for(const key in x)if (type_utils_hasOwnProperty.call(x, key)) return false;\n        return true;\n    }\n    return false;\n};\nconst isUndefined = (x)=>void 0 === x;\nconst isString = (x)=>'[object String]' == type_utils_toString.call(x);\nconst isEmptyString = (x)=>isString(x) && 0 === x.trim().length;\nconst isNull = (x)=>null === x;\nconst isNullish = (x)=>isUndefined(x) || isNull(x);\nconst isNumber = (x)=>'[object Number]' == type_utils_toString.call(x);\nconst isBoolean = (x)=>'[object Boolean]' === type_utils_toString.call(x);\nconst isFormData = (x)=>x instanceof FormData;\nconst isFile = (x)=>x instanceof File;\nconst isPlainError = (x)=>x instanceof Error;\nconst isKnownUnsafeEditableEvent = (x)=>includes(knownUnsafeEditableEvent, x);\nfunction isInstanceOf(candidate, base) {\n    try {\n        return candidate instanceof base;\n    } catch  {\n        return false;\n    }\n}\nfunction isPrimitive(value) {\n    return null === value || 'object' != typeof value;\n}\nfunction isBuiltin(candidate, className) {\n    return Object.prototype.toString.call(candidate) === `[object ${className}]`;\n}\nfunction isError(candidate) {\n    switch(Object.prototype.toString.call(candidate)){\n        case '[object Error]':\n        case '[object Exception]':\n        case '[object DOMException]':\n        case '[object DOMError]':\n        case '[object WebAssembly.Exception]':\n            return true;\n        default:\n            return isInstanceOf(candidate, Error);\n    }\n}\nfunction isErrorEvent(event) {\n    return isBuiltin(event, 'ErrorEvent');\n}\nfunction isEvent(candidate) {\n    return !isUndefined(Event) && isInstanceOf(candidate, Event);\n}\nfunction isPlainObject(candidate) {\n    return isBuiltin(candidate, 'Object');\n}\nconst yesLikeValues = [\n    true,\n    'true',\n    1,\n    '1',\n    'yes'\n];\nconst isYesLike = (val)=>includes(yesLikeValues, val);\nconst noLikeValues = [\n    false,\n    'false',\n    0,\n    '0',\n    'no'\n];\nconst isNoLike = (val)=>includes(noLikeValues, val);\nexport { type_utils_hasOwnProperty as hasOwnProperty, isArray, isBoolean, isBuiltin, isEmptyObject, isEmptyString, isError, isErrorEvent, isEvent, isFile, isFormData, isFunction, isInstanceOf, isKnownUnsafeEditableEvent, isNativeFunction, isNoLike, isNull, isNullish, isNumber, isObject, isPlainError, isPlainObject, isPrimitive, isString, isUndefined, isYesLike, noLikeValues, yesLikeValues };\n","import Config from '../config'\nimport { isUndefined } from '@posthog/core'\nimport { assignableWindow, window } from './globals'\nimport type { Logger } from '@posthog/core'\n\ntype PosthogJsLogger = Omit<Logger, 'createLogger'> & {\n    _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => void\n    uninitializedWarning: (methodName: string) => void\n    createLogger: (prefix: string) => PosthogJsLogger\n}\n\nconst _createLogger = (prefix: string): PosthogJsLogger => {\n    const logger: PosthogJsLogger = {\n        _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => {\n            if (\n                window &&\n                (Config.DEBUG || assignableWindow.POSTHOG_DEBUG) &&\n                !isUndefined(window.console) &&\n                window.console\n            ) {\n                const consoleLog =\n                    '__rrweb_original__' in window.console[level]\n                        ? (window.console[level] as any)['__rrweb_original__']\n                        : window.console[level]\n\n                // eslint-disable-next-line no-console\n                consoleLog(prefix, ...args)\n            }\n        },\n\n        info: (...args: any[]) => {\n            logger._log('log', ...args)\n        },\n\n        warn: (...args: any[]) => {\n            logger._log('warn', ...args)\n        },\n\n        error: (...args: any[]) => {\n            logger._log('error', ...args)\n        },\n\n        critical: (...args: any[]) => {\n            // Critical errors are always logged to the console\n            // eslint-disable-next-line no-console\n            console.error(prefix, ...args)\n        },\n\n        uninitializedWarning: (methodName: string) => {\n            logger.error(`You must initialize PostHog before calling ${methodName}`)\n        },\n\n        createLogger: (additionalPrefix: string) => _createLogger(`${prefix} ${additionalPrefix}`),\n    }\n    return logger\n}\n\nexport const logger = _createLogger('[PostHog.js]')\n\nexport const createLogger = logger.createLogger\n","import { Breaker, Properties } from '../types'\nimport { nativeForEach, nativeIndexOf } from './globals'\nimport { logger } from './logger'\nimport { isFormData, isNull, isNullish, isNumber, isString, isUndefined, hasOwnProperty, isArray } from '@posthog/core'\n\nconst breaker: Breaker = {}\n\nexport function eachArray<E = any>(\n    obj: E[] | null | undefined,\n    iterator: (value: E, key: number) => void | Breaker,\n    thisArg?: any\n): void {\n    if (isArray(obj)) {\n        if (nativeForEach && obj.forEach === nativeForEach) {\n            obj.forEach(iterator, thisArg)\n        } else if ('length' in obj && obj.length === +obj.length) {\n            for (let i = 0, l = obj.length; i < l; i++) {\n                if (i in obj && iterator.call(thisArg, obj[i], i) === breaker) {\n                    return\n                }\n            }\n        }\n    }\n}\n\n/**\n * @param {*=} obj\n * @param {function(...*)=} iterator\n * @param {Object=} thisArg\n */\nexport function each(obj: any, iterator: (value: any, key: any) => void | Breaker, thisArg?: any): void {\n    if (isNullish(obj)) {\n        return\n    }\n    if (isArray(obj)) {\n        return eachArray(obj, iterator, thisArg)\n    }\n    if (isFormData(obj)) {\n        for (const pair of obj.entries()) {\n            if (iterator.call(thisArg, pair[1], pair[0]) === breaker) {\n                return\n            }\n        }\n        return\n    }\n    for (const key in obj) {\n        if (hasOwnProperty.call(obj, key)) {\n            if (iterator.call(thisArg, obj[key], key) === breaker) {\n                return\n            }\n        }\n    }\n}\n\nexport const extend = function (obj: Record<string, any>, ...args: Record<string, any>[]): Record<string, any> {\n    eachArray(args, function (source) {\n        for (const prop in source) {\n            if (source[prop] !== void 0) {\n                obj[prop] = source[prop]\n            }\n        }\n    })\n    return obj\n}\n\nexport const extendArray = function <T>(obj: T[], ...args: T[][]): T[] {\n    eachArray(args, function (source) {\n        eachArray(source, function (item) {\n            obj.push(item)\n        })\n    })\n    return obj\n}\n\nexport const include = function (\n    obj: null | string | Array<any> | Record<string, any>,\n    target: any\n): boolean | Breaker {\n    let found = false\n    if (isNull(obj)) {\n        return found\n    }\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) {\n        return obj.indexOf(target) != -1\n    }\n    each(obj, function (value) {\n        if (found || (found = value === target)) {\n            return breaker\n        }\n        return\n    })\n    return found\n}\n\n/**\n * Object.entries() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n */\nexport function entries<T = any>(obj: Record<string, T>): [string, T][] {\n    const ownProps = Object.keys(obj)\n    let i = ownProps.length\n    const resArray = new Array(i) // preallocate the Array\n\n    while (i--) {\n        resArray[i] = [ownProps[i], obj[ownProps[i]]]\n    }\n    return resArray\n}\n\nexport const trySafe = function <T>(fn: () => T): T | undefined {\n    try {\n        return fn()\n    } catch {\n        return undefined\n    }\n}\n\nexport const safewrap = function <F extends (...args: any[]) => any = (...args: any[]) => any>(f: F): F {\n    return function (...args) {\n        try {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            return f.apply(this, args)\n        } catch (e) {\n            logger.critical(\n                'Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A.'\n            )\n            logger.critical(e)\n        }\n    } as F\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const safewrapClass = function (klass: Function, functions: string[]): void {\n    for (let i = 0; i < functions.length; i++) {\n        klass.prototype[functions[i]] = safewrap(klass.prototype[functions[i]])\n    }\n}\n\nexport const stripEmptyProperties = function (p: Properties): Properties {\n    const ret: Properties = {}\n    each(p, function (v, k) {\n        if ((isString(v) && v.length > 0) || isNumber(v)) {\n            ret[k] = v\n        }\n    })\n    return ret\n}\n\n/**\n * Deep copies an object.\n * It handles cycles by replacing all references to them with `undefined`\n * Also supports customizing native values\n *\n * @param value\n * @param customizer\n * @returns {{}|undefined|*}\n */\nfunction deepCircularCopy<T extends Record<string, any> = Record<string, any>>(\n    value: T,\n    customizer?: <K extends keyof T = keyof T>(value: T[K], key?: K) => T[K]\n): T | undefined {\n    const COPY_IN_PROGRESS_SET = new Set()\n\n    function internalDeepCircularCopy(value: T, key?: string): T | undefined {\n        if (value !== Object(value)) return customizer ? customizer(value as any, key) : value // primitive value\n\n        if (COPY_IN_PROGRESS_SET.has(value)) return undefined\n        COPY_IN_PROGRESS_SET.add(value)\n        let result: T\n\n        if (isArray(value)) {\n            result = [] as any as T\n            eachArray(value, (it) => {\n                result.push(internalDeepCircularCopy(it))\n            })\n        } else {\n            result = {} as T\n            each(value, (val, key) => {\n                if (!COPY_IN_PROGRESS_SET.has(val)) {\n                    ;(result as any)[key] = internalDeepCircularCopy(val, key)\n                }\n            })\n        }\n        return result\n    }\n    return internalDeepCircularCopy(value)\n}\n\nexport function _copyAndTruncateStrings<T extends Record<string, any> = Record<string, any>>(\n    object: T,\n    maxStringLength: number | null\n): T {\n    return deepCircularCopy(object, (value: any) => {\n        if (isString(value) && !isNull(maxStringLength)) {\n            return (value as string).slice(0, maxStringLength)\n        }\n        return value\n    }) as T\n}\n\n// NOTE: Update PostHogConfig docs if you change this list\n// We will not try to catch all bullets here, but we should make an effort to catch the most common ones\n// You should be highly against adding more to this list, because ultimately customers can configure\n// their `cross_subdomain_cookie` setting to anything they want.\nconst EXCLUDED_FROM_CROSS_SUBDOMAIN_COOKIE = ['herokuapp.com', 'vercel.app', 'netlify.app']\nexport function isCrossDomainCookie(documentLocation: Location | undefined) {\n    const hostname = documentLocation?.hostname\n\n    if (!isString(hostname)) {\n        return false\n    }\n    // split and slice isn't a great way to match arbitrary domains,\n    // but it's good enough for ensuring we only match herokuapp.com when it is the TLD\n    // for the hostname\n    const lastTwoParts = hostname.split('.').slice(-2).join('.')\n\n    for (const excluded of EXCLUDED_FROM_CROSS_SUBDOMAIN_COOKIE) {\n        if (lastTwoParts === excluded) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function find<T>(value: T[], predicate: (value: T) => boolean): T | undefined {\n    for (let i = 0; i < value.length; i++) {\n        if (predicate(value[i])) {\n            return value[i]\n        }\n    }\n    return undefined\n}\n\n// Use this instead of element.addEventListener to avoid eslint errors\n// this properly implements the default options for passive event listeners\nexport function addEventListener(\n    element: Window | Document | Element | undefined,\n    event: string,\n    callback: EventListener,\n    options?: AddEventListenerOptions\n): void {\n    const { capture = false, passive = true } = options ?? {}\n\n    // This is the only place where we are allowed to call this function\n    // because the whole idea is that we should be calling this instead of the built-in one\n    // eslint-disable-next-line posthog-js/no-add-event-listener\n    element?.addEventListener(event, callback, { capture, passive })\n}\n\n/**\n * Helper to migrate deprecated config fields to new field names with appropriate warnings\n * @param config - The config object to check\n * @param newField - The new field name to use\n * @param oldField - The deprecated field name to check for\n * @param defaultValue - The default value if neither field is set\n * @param loggerInstance - Optional logger instance for deprecation warnings\n * @returns The value to use (new field takes precedence over old field)\n */\nexport function migrateConfigField<T>(\n    config: Record<string, any>,\n    newField: string,\n    oldField: string,\n    defaultValue: T,\n    loggerInstance?: { warn: (message: string) => void }\n): T {\n    const hasNewField = newField in config && !isUndefined(config[newField])\n    const hasOldField = oldField in config && !isUndefined(config[oldField])\n\n    if (hasNewField) {\n        return config[newField]\n    }\n\n    if (hasOldField) {\n        if (loggerInstance) {\n            loggerInstance.warn(\n                `Config field '${oldField}' is deprecated. Please use '${newField}' instead. ` +\n                    `The old field will be removed in a future major version.`\n            )\n        }\n        return config[oldField]\n    }\n\n    return defaultValue\n}\n","import { DisplaySurveyOptions, DisplaySurveyType, Survey, SurveyType } from '../posthog-surveys-types'\nimport { createLogger } from '../utils/logger'\n\nexport const SURVEY_LOGGER = createLogger('[Surveys]')\n\nexport function isSurveyRunning(survey: Survey): boolean {\n    return !!(survey.start_date && !survey.end_date)\n}\n\nexport function doesSurveyActivateByEvent(survey: Pick<Survey, 'conditions'>): boolean {\n    return !!survey.conditions?.events?.values?.length\n}\n\nexport function doesSurveyActivateByAction(survey: Pick<Survey, 'conditions'>): boolean {\n    return !!survey.conditions?.actions?.values?.length\n}\n\nexport const SURVEY_SEEN_PREFIX = 'seenSurvey_'\nexport const SURVEY_IN_PROGRESS_PREFIX = 'inProgressSurvey_'\n\nexport const getSurveyInteractionProperty = (\n    survey: Pick<Survey, 'id' | 'current_iteration'>,\n    action: 'responded' | 'dismissed'\n): string => {\n    let surveyProperty = `$survey_${action}/${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        surveyProperty = `$survey_${action}/${survey.id}/${survey.current_iteration}`\n    }\n\n    return surveyProperty\n}\n\nexport const getSurveySeenKey = (survey: Pick<Survey, 'id' | 'current_iteration'>): string => {\n    let surveySeenKey = `${SURVEY_SEEN_PREFIX}${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        surveySeenKey = `${SURVEY_SEEN_PREFIX}${survey.id}_${survey.current_iteration}`\n    }\n\n    return surveySeenKey\n}\n\nexport const setSurveySeenOnLocalStorage = (survey: Pick<Survey, 'id' | 'current_iteration'>) => {\n    const isSurveySeen = localStorage.getItem(getSurveySeenKey(survey))\n    // if survey is already seen, no need to set it again\n    if (isSurveySeen) {\n        return\n    }\n\n    localStorage.setItem(getSurveySeenKey(survey), 'true')\n}\n\n// These surveys are relevant for the getActiveMatchingSurveys method. They are used to\n// display surveys in our customer's application. Any new in-app survey type should be added here.\nexport const IN_APP_SURVEY_TYPES = [SurveyType.Popover, SurveyType.Widget, SurveyType.API]\n\nexport const DEFAULT_DISPLAY_SURVEY_OPTIONS: DisplaySurveyOptions = {\n    ignoreConditions: false,\n    ignoreDelay: false,\n    displayType: DisplaySurveyType.Popover,\n}\n","/**\n * uuidv7: An experimental implementation of the proposed UUID Version 7\n *\n * @license Apache-2.0\n * @copyright 2021-2023 LiosK\n * @packageDocumentation\n *\n * from https://github.com/LiosK/uuidv7/blob/e501462ea3d23241de13192ceae726956f9b3b7d/src/index.ts\n */\n\n// polyfill for IE11\nimport { window } from './utils/globals'\n\nimport { isNumber, isUndefined } from '@posthog/core'\n\nif (!Math.trunc) {\n    Math.trunc = function (v) {\n        return v < 0 ? Math.ceil(v) : Math.floor(v)\n    }\n}\n\n// polyfill for IE11\nif (!Number.isInteger) {\n    Number.isInteger = function (value) {\n        return isNumber(value) && isFinite(value) && Math.floor(value) === value\n    }\n}\n\nconst DIGITS = '0123456789abcdef'\n\n/** Represents a UUID as a 16-byte byte array. */\nexport class UUID {\n    /** @param bytes - The 16-byte byte array representation. */\n    constructor(readonly bytes: Readonly<Uint8Array>) {\n        if (bytes.length !== 16) {\n            throw new TypeError('not 128-bit length')\n        }\n    }\n\n    /**\n     * Builds a byte array from UUIDv7 field values.\n     *\n     * @param unixTsMs - A 48-bit `unix_ts_ms` field value.\n     * @param randA - A 12-bit `rand_a` field value.\n     * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.\n     * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.\n     */\n    static fromFieldsV7(unixTsMs: number, randA: number, randBHi: number, randBLo: number): UUID {\n        if (\n            !Number.isInteger(unixTsMs) ||\n            !Number.isInteger(randA) ||\n            !Number.isInteger(randBHi) ||\n            !Number.isInteger(randBLo) ||\n            unixTsMs < 0 ||\n            randA < 0 ||\n            randBHi < 0 ||\n            randBLo < 0 ||\n            unixTsMs > 0xffff_ffff_ffff ||\n            randA > 0xfff ||\n            randBHi > 0x3fff_ffff ||\n            randBLo > 0xffff_ffff\n        ) {\n            throw new RangeError('invalid field value')\n        }\n\n        const bytes = new Uint8Array(16)\n        bytes[0] = unixTsMs / 2 ** 40\n        bytes[1] = unixTsMs / 2 ** 32\n        bytes[2] = unixTsMs / 2 ** 24\n        bytes[3] = unixTsMs / 2 ** 16\n        bytes[4] = unixTsMs / 2 ** 8\n        bytes[5] = unixTsMs\n        bytes[6] = 0x70 | (randA >>> 8)\n        bytes[7] = randA\n        bytes[8] = 0x80 | (randBHi >>> 24)\n        bytes[9] = randBHi >>> 16\n        bytes[10] = randBHi >>> 8\n        bytes[11] = randBHi\n        bytes[12] = randBLo >>> 24\n        bytes[13] = randBLo >>> 16\n        bytes[14] = randBLo >>> 8\n        bytes[15] = randBLo\n        return new UUID(bytes)\n    }\n\n    /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */\n    toString(): string {\n        let text = ''\n        for (let i = 0; i < this.bytes.length; i++) {\n            text = text + DIGITS.charAt(this.bytes[i] >>> 4) + DIGITS.charAt(this.bytes[i] & 0xf)\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\n                text += '-'\n            }\n        }\n\n        if (text.length !== 36) {\n            // We saw one customer whose bundling code was mangling the UUID generation\n            // rather than accept a bad UUID, we throw an error here.\n            throw new Error('Invalid UUIDv7 was generated')\n        }\n        return text\n    }\n\n    /** Creates an object from `this`. */\n    clone(): UUID {\n        return new UUID(this.bytes.slice(0))\n    }\n\n    /** Returns true if `this` is equivalent to `other`. */\n    equals(other: UUID): boolean {\n        return this.compareTo(other) === 0\n    }\n\n    /**\n     * Returns a negative integer, zero, or positive integer if `this` is less\n     * than, equal to, or greater than `other`, respectively.\n     */\n    compareTo(other: UUID): number {\n        for (let i = 0; i < 16; i++) {\n            const diff = this.bytes[i] - other.bytes[i]\n            if (diff !== 0) {\n                return Math.sign(diff)\n            }\n        }\n        return 0\n    }\n}\n\n/** Encapsulates the monotonic counter state. */\nclass V7Generator {\n    private _timestamp = 0\n    private _counter = 0\n    private readonly _random = new DefaultRandom()\n\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or resets the\n     * generator upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method resets the generator and returns a new\n     * UUID based on the current timestamp.\n     */\n    generate(): UUID {\n        const value = this.generateOrAbort()\n        if (!isUndefined(value)) {\n            return value\n        } else {\n            // reset state and resume\n            this._timestamp = 0\n            const valueAfterReset = this.generateOrAbort()\n            if (isUndefined(valueAfterReset)) {\n                throw new Error('Could not generate UUID after timestamp reset')\n            }\n            return valueAfterReset\n        }\n    }\n\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or returns\n     * `undefined` upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method aborts and returns `undefined`.\n     */\n    generateOrAbort(): UUID | undefined {\n        const MAX_COUNTER = 0x3ff_ffff_ffff\n        const ROLLBACK_ALLOWANCE = 10_000 // 10 seconds\n\n        const ts = Date.now()\n        if (ts > this._timestamp) {\n            this._timestamp = ts\n            this._resetCounter()\n        } else if (ts + ROLLBACK_ALLOWANCE > this._timestamp) {\n            // go on with previous timestamp if new one is not much smaller\n            this._counter++\n            if (this._counter > MAX_COUNTER) {\n                // increment timestamp at counter overflow\n                this._timestamp++\n                this._resetCounter()\n            }\n        } else {\n            // abort if clock went backwards to unbearable extent\n            return undefined\n        }\n\n        return UUID.fromFieldsV7(\n            this._timestamp,\n            Math.trunc(this._counter / 2 ** 30),\n            this._counter & (2 ** 30 - 1),\n            this._random.nextUint32()\n        )\n    }\n\n    /** Initializes the counter at a 42-bit random integer. */\n    private _resetCounter(): void {\n        this._counter = this._random.nextUint32() * 0x400 + (this._random.nextUint32() & 0x3ff)\n    }\n}\n\n/** A global flag to force use of cryptographically strong RNG. */\ndeclare const UUIDV7_DENY_WEAK_RNG: boolean\n\n/** Stores `crypto.getRandomValues()` available in the environment. */\nlet getRandomValues: <T extends Uint8Array | Uint32Array>(buffer: T) => T = (buffer) => {\n    // fall back on Math.random() unless the flag is set to true\n    // TRICKY: don't use the isUndefined method here as can't pass the reference\n    if (typeof UUIDV7_DENY_WEAK_RNG !== 'undefined' && UUIDV7_DENY_WEAK_RNG) {\n        throw new Error('no cryptographically strong RNG available')\n    }\n\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = Math.trunc(Math.random() * 0x1_0000) * 0x1_0000 + Math.trunc(Math.random() * 0x1_0000)\n    }\n    return buffer\n}\n\n// detect Web Crypto API\nif (window && !isUndefined(window.crypto) && crypto.getRandomValues) {\n    getRandomValues = (buffer) => crypto.getRandomValues(buffer)\n}\n\n/**\n * Wraps `crypto.getRandomValues()` and compatibles to enable buffering; this\n * uses a small buffer by default to avoid unbearable throughput decline in some\n * environments as well as the waste of time and space for unused values.\n */\nclass DefaultRandom {\n    private readonly _buffer = new Uint32Array(8)\n    private _cursor = Infinity\n    nextUint32(): number {\n        if (this._cursor >= this._buffer.length) {\n            getRandomValues(this._buffer)\n            this._cursor = 0\n        }\n        return this._buffer[this._cursor++]\n    }\n}\n\nlet defaultGenerator: V7Generator | undefined\n\n/**\n * Generates a UUIDv7 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv7 = (): string => uuidv7obj().toString()\n\n/** Generates a UUIDv7 object. */\nconst uuidv7obj = (): UUID => (defaultGenerator || (defaultGenerator = new V7Generator())).generate()\n\nexport const uuid7ToTimestampMs = (uuid: string): number => {\n    // remove hyphens\n    const hex = uuid.replace(/-/g, '')\n    // ensure that it's a version 7 UUID\n    if (hex.length !== 32) {\n        throw new Error('Not a valid UUID')\n    }\n    if (hex[12] !== '7') {\n        throw new Error('Not a UUIDv7')\n    }\n    // the first 6 bytes are the timestamp, which means that we can read only the first 12 hex characters\n    return parseInt(hex.substring(0, 12), 16)\n}\n","import { each, find } from './utils'\nimport Config from './config'\nimport { Compression, RequestWithOptions, RequestResponse } from './types'\nimport { formDataToQuery } from './utils/request-utils'\n\nimport { logger } from './utils/logger'\nimport { AbortController, fetch, navigator, XMLHttpRequest } from './utils/globals'\nimport { gzipSync, strToU8 } from 'fflate'\n\nimport { _base64Encode } from './utils/encode-utils'\n\n// eslint-disable-next-line compat/compat\nexport const SUPPORTS_REQUEST = !!XMLHttpRequest || !!fetch\n\nconst CONTENT_TYPE_PLAIN = 'text/plain'\nconst CONTENT_TYPE_JSON = 'application/json'\nconst CONTENT_TYPE_FORM = 'application/x-www-form-urlencoded'\nconst SIXTY_FOUR_KILOBYTES = 64 * 1024\n/*\n fetch will fail if we request keepalive with a body greater than 64kb\n sets the threshold lower than that so that\n any overhead doesn't push over the threshold after checking here\n*/\nconst KEEP_ALIVE_THRESHOLD = SIXTY_FOUR_KILOBYTES * 0.8\ntype EncodedBody = {\n    contentType: string\n    body: string | BlobPart\n    estimatedSize: number\n}\n\nexport const extendURLParams = (url: string, params: Record<string, any>): string => {\n    const [baseUrl, search] = url.split('?')\n    const newParams = { ...params }\n\n    search?.split('&').forEach((pair) => {\n        const [key] = pair.split('=')\n        delete newParams[key]\n    })\n\n    let newSearch = formDataToQuery(newParams)\n    newSearch = newSearch ? (search ? search + '&' : '') + newSearch : search\n\n    return `${baseUrl}?${newSearch}`\n}\n\nexport const jsonStringify = (data: any, space?: string | number): string => {\n    // With plain JSON.stringify, we get an exception when a property is a BigInt. This has caused problems for some users,\n    // see https://github.com/PostHog/posthog-js/issues/1440\n    // To work around this, we convert BigInts to strings before stringifying the data. This is not ideal, as we lose\n    // information that this was originally a number, but given ClickHouse doesn't support BigInts, the customer\n    // would not be able to operate on these numerically anyway.\n    return JSON.stringify(data, (_, value) => (typeof value === 'bigint' ? value.toString() : value), space)\n}\n\nconst encodeToDataString = (data: string | Record<string, any>): string => {\n    return 'data=' + encodeURIComponent(typeof data === 'string' ? data : jsonStringify(data))\n}\n\nconst encodePostData = ({ data, compression }: RequestWithOptions): EncodedBody | undefined => {\n    if (!data) {\n        return\n    }\n\n    if (compression === Compression.GZipJS) {\n        const gzipData = gzipSync(strToU8(jsonStringify(data)), { mtime: 0 })\n        const blob = new Blob([gzipData], { type: CONTENT_TYPE_PLAIN })\n        return {\n            contentType: CONTENT_TYPE_PLAIN,\n            body: blob,\n            estimatedSize: blob.size,\n        }\n    }\n\n    if (compression === Compression.Base64) {\n        const b64data = _base64Encode(jsonStringify(data))\n        const encodedBody = encodeToDataString(b64data)\n\n        return {\n            contentType: CONTENT_TYPE_FORM,\n            body: encodedBody,\n            estimatedSize: new Blob([encodedBody]).size,\n        }\n    }\n\n    const jsonBody = jsonStringify(data)\n    return {\n        contentType: CONTENT_TYPE_JSON,\n        body: jsonBody,\n        estimatedSize: new Blob([jsonBody]).size,\n    }\n}\n\nconst xhr = (options: RequestWithOptions) => {\n    const req = new XMLHttpRequest!()\n    req.open(options.method || 'GET', options.url, true)\n    const { contentType, body } = encodePostData(options) ?? {}\n\n    each(options.headers, function (headerValue, headerName) {\n        req.setRequestHeader(headerName, headerValue)\n    })\n\n    if (contentType) {\n        req.setRequestHeader('Content-Type', contentType)\n    }\n\n    if (options.timeout) {\n        req.timeout = options.timeout\n    }\n    if (!options.disableXHRCredentials) {\n        // send the ph_optout cookie\n        // withCredentials cannot be modified until after calling .open on Android and Mobile Safari\n        req.withCredentials = true\n    }\n    req.onreadystatechange = () => {\n        // XMLHttpRequest.DONE == 4, except in safari 4\n        if (req.readyState === 4) {\n            const response: RequestResponse = {\n                statusCode: req.status,\n                text: req.responseText,\n            }\n            if (req.status === 200) {\n                try {\n                    response.json = JSON.parse(req.responseText)\n                } catch {\n                    // logger.error(e)\n                }\n            }\n\n            options.callback?.(response)\n        }\n    }\n    req.send(body)\n}\n\nconst _fetch = (options: RequestWithOptions) => {\n    const { contentType, body, estimatedSize } = encodePostData(options) ?? {}\n\n    // eslint-disable-next-line compat/compat\n    const headers = new Headers()\n    each(options.headers, function (headerValue, headerName) {\n        headers.append(headerName, headerValue)\n    })\n\n    if (contentType) {\n        headers.append('Content-Type', contentType)\n    }\n\n    const url = options.url\n    let aborter: { signal: any; timeout: ReturnType<typeof setTimeout> } | null = null\n\n    if (AbortController) {\n        const controller = new AbortController()\n        aborter = {\n            signal: controller.signal,\n            timeout: setTimeout(() => controller.abort(), options.timeout),\n        }\n    }\n\n    fetch!(url, {\n        method: options?.method || 'GET',\n        headers,\n        // if body is greater than 64kb, then fetch with keepalive will error\n        // see 8:10:5 at https://fetch.spec.whatwg.org/#http-network-or-cache-fetch,\n        // but we do want to set keepalive sometimes as it can  help with success\n        // when e.g. a page is being closed\n        // so let's get the best of both worlds and only set keepalive for POST requests\n        // where the body is less than 64kb\n        // NB this is fetch keepalive and not http keepalive\n        keepalive: options.method === 'POST' && (estimatedSize || 0) < KEEP_ALIVE_THRESHOLD,\n        body,\n        signal: aborter?.signal,\n        ...options.fetchOptions,\n    })\n        .then((response) => {\n            return response.text().then((responseText) => {\n                const res: RequestResponse = {\n                    statusCode: response.status,\n                    text: responseText,\n                }\n\n                if (response.status === 200) {\n                    try {\n                        res.json = JSON.parse(responseText)\n                    } catch (e) {\n                        logger.error(e)\n                    }\n                }\n\n                options.callback?.(res)\n            })\n        })\n        .catch((error) => {\n            logger.error(error)\n            options.callback?.({ statusCode: 0, text: error })\n        })\n        .finally(() => (aborter ? clearTimeout(aborter.timeout) : null))\n\n    return\n}\n\nconst _sendBeacon = (options: RequestWithOptions) => {\n    // beacon documentation https://w3c.github.io/beacon/\n    // beacons format the message and use the type property\n\n    const url = extendURLParams(options.url, {\n        beacon: '1',\n    })\n\n    try {\n        const { contentType, body } = encodePostData(options) ?? {}\n        // sendBeacon requires a blob so we convert it\n        const sendBeaconBody = typeof body === 'string' ? new Blob([body], { type: contentType }) : body\n        navigator!.sendBeacon!(url, sendBeaconBody)\n    } catch {\n        // send beacon is a best-effort, fire-and-forget mechanism on page unload,\n        // we don't want to throw errors here\n    }\n}\n\nconst AVAILABLE_TRANSPORTS: {\n    transport: RequestWithOptions['transport']\n    method: (options: RequestWithOptions) => void\n}[] = []\n\n// We add the transports in order of preference\nif (fetch) {\n    AVAILABLE_TRANSPORTS.push({\n        transport: 'fetch',\n        method: _fetch,\n    })\n}\n\nif (XMLHttpRequest) {\n    AVAILABLE_TRANSPORTS.push({\n        transport: 'XHR',\n        method: xhr,\n    })\n}\n\nif (navigator?.sendBeacon) {\n    AVAILABLE_TRANSPORTS.push({\n        transport: 'sendBeacon',\n        method: _sendBeacon,\n    })\n}\n\n// This is the entrypoint. It takes care of sanitizing the options and then calls the appropriate request method.\nexport const request = (_options: RequestWithOptions) => {\n    // Clone the options so we don't modify the original object\n    const options = { ..._options }\n    options.timeout = options.timeout || 60000\n\n    options.url = extendURLParams(options.url, {\n        _: new Date().getTime().toString(),\n        ver: Config.LIB_VERSION,\n        compression: options.compression,\n    })\n\n    const transport = options.transport ?? 'fetch'\n\n    const availableTransports = AVAILABLE_TRANSPORTS.filter(\n        (t) => !options.disableTransport || !t.transport || !options.disableTransport.includes(t.transport)\n    )\n\n    const transportMethod =\n        find(availableTransports, (t) => t.transport === transport)?.method ?? availableTransports[0].method\n\n    if (!transportMethod) {\n        throw new Error('No available transport method')\n    }\n\n    transportMethod(options)\n}\n","export const isValidRegex = function (str: string): boolean {\n    try {\n        new RegExp(str)\n    } catch {\n        return false\n    }\n    return true\n}\n\nexport const isMatchingRegex = function (value: string, pattern: string): boolean {\n    if (!isValidRegex(pattern)) return false\n\n    try {\n        return new RegExp(pattern).test(value)\n    } catch {\n        return false\n    }\n}\n","import { jsonStringify } from '../request'\nimport type { Properties, PropertyMatchType } from '../types'\nimport { isMatchingRegex } from './regex-utils'\n\nexport function getPersonPropertiesHash(\n    distinct_id: string,\n    userPropertiesToSet?: Properties,\n    userPropertiesToSetOnce?: Properties\n): string {\n    return jsonStringify({ distinct_id, userPropertiesToSet, userPropertiesToSetOnce })\n}\n\nexport const propertyComparisons: Record<PropertyMatchType, (targets: string[], values: string[]) => boolean> = {\n    exact: (targets, values) => values.some((value) => targets.some((target) => value === target)),\n    is_not: (targets, values) => values.every((value) => targets.every((target) => value !== target)),\n    regex: (targets, values) => values.some((value) => targets.some((target) => isMatchingRegex(value, target))),\n    not_regex: (targets, values) => values.every((value) => targets.every((target) => !isMatchingRegex(value, target))),\n    icontains: (targets, values) =>\n        values.map(toLowerCase).some((value) => targets.map(toLowerCase).some((target) => value.includes(target))),\n    not_icontains: (targets, values) =>\n        values.map(toLowerCase).every((value) => targets.map(toLowerCase).every((target) => !value.includes(target))),\n}\n\nconst toLowerCase = (v: string): string => v.toLowerCase()\n","import { PostHog } from '../../posthog-core'\nimport { createLogger } from '../../utils/logger'\n\nconst logger = createLogger('[Stylesheet Loader]')\n\nexport const prepareStylesheet = (document: Document, innerText: string, posthog?: PostHog) => {\n    // Forcing the existence of `document` requires this function to be called in a browser environment\n    let stylesheet: HTMLStyleElement | null = document.createElement('style')\n    stylesheet.innerText = innerText\n\n    if (posthog?.config?.prepare_external_dependency_stylesheet) {\n        stylesheet = posthog.config.prepare_external_dependency_stylesheet(stylesheet)\n    }\n\n    if (!stylesheet) {\n        logger.error('prepare_external_dependency_stylesheet returned null')\n        return null\n    }\n\n    return stylesheet\n}\n","import { VNode, cloneElement, createContext } from 'preact'\nimport { PostHog } from '../../posthog-core'\nimport {\n    MultipleSurveyQuestion,\n    Survey,\n    SurveyAppearance,\n    SurveyEventName,\n    SurveyEventProperties,\n    SurveyPosition,\n    SurveyQuestion,\n    SurveySchedule,\n    SurveyType,\n    SurveyWidgetType,\n} from '../../posthog-surveys-types'\nimport { document as _document, window as _window, userAgent } from '../../utils/globals'\nimport {\n    getSurveyInteractionProperty,\n    getSurveySeenKey,\n    SURVEY_LOGGER as logger,\n    setSurveySeenOnLocalStorage,\n    SURVEY_IN_PROGRESS_PREFIX,\n} from '../../utils/survey-utils'\nimport { isArray, isNullish } from '@posthog/core'\n\nimport { detectDeviceType } from '../../utils/user-agent-utils'\nimport { propertyComparisons } from '../../utils/property-utils'\nimport { PropertyMatchType } from '../../types'\nimport { prepareStylesheet } from '../utils/stylesheet-loader'\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\nimport surveyStyles from './survey.css'\nimport { useContext } from 'preact/hooks'\n\nexport function getFontFamily(fontFamily?: string): string {\n    if (fontFamily === 'inherit') {\n        return 'inherit'\n    }\n\n    const defaultFontStack =\n        'BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n    return fontFamily ? `${fontFamily}, ${defaultFontStack}` : `-apple-system, ${defaultFontStack}`\n}\n\nexport function getSurveyResponseKey(questionId: string) {\n    return `$survey_response_${questionId}`\n}\n\nconst BLACK_TEXT_COLOR = '#020617' // Maps out to text-slate-950 from tailwind colors. Intended for text use outside interactive elements like buttons\n\n// Keep in sync with defaultSurveyAppearance on the main app\nexport const defaultSurveyAppearance = {\n    fontFamily: 'inherit',\n    backgroundColor: '#eeeded',\n    submitButtonColor: 'black',\n    submitButtonTextColor: 'white',\n    ratingButtonColor: 'white',\n    ratingButtonActiveColor: 'black',\n    borderColor: '#c9c6c6',\n    placeholder: 'Start typing...',\n    whiteLabel: false,\n    displayThankYouMessage: true,\n    thankYouMessageHeader: 'Thank you for your feedback!',\n    position: SurveyPosition.Right,\n    widgetType: SurveyWidgetType.Tab,\n    widgetLabel: 'Feedback',\n    widgetColor: 'black',\n    zIndex: '2147483647',\n    disabledButtonOpacity: '0.6',\n    maxWidth: '300px',\n    textSubtleColor: '#939393',\n    boxPadding: '20px 24px',\n    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n    borderRadius: '10px',\n    shuffleQuestions: false,\n    surveyPopupDelaySeconds: undefined,\n    // Not customizable atm\n    outlineColor: 'rgba(59, 130, 246, 0.8)',\n    inputBackground: 'white',\n    inputTextColor: BLACK_TEXT_COLOR,\n    scrollbarThumbColor: 'var(--ph-survey-border-color)',\n    scrollbarTrackColor: 'var(--ph-survey-background-color)',\n} as const\n\nexport const addSurveyCSSVariablesToElement = (\n    element: HTMLElement,\n    type: SurveyType,\n    appearance?: SurveyAppearance | null\n) => {\n    const effectiveAppearance = { ...defaultSurveyAppearance, ...appearance }\n    const hostStyle = element.style\n\n    const surveyHasBottomBorder =\n        ![SurveyPosition.Center, SurveyPosition.Left, SurveyPosition.Right].includes(effectiveAppearance.position) ||\n        (type === SurveyType.Widget && appearance?.widgetType === SurveyWidgetType.Tab)\n\n    hostStyle.setProperty('--ph-survey-font-family', getFontFamily(effectiveAppearance.fontFamily))\n    hostStyle.setProperty('--ph-survey-box-padding', effectiveAppearance.boxPadding)\n    hostStyle.setProperty('--ph-survey-max-width', effectiveAppearance.maxWidth)\n    hostStyle.setProperty('--ph-survey-z-index', effectiveAppearance.zIndex)\n    hostStyle.setProperty('--ph-survey-border-color', effectiveAppearance.borderColor)\n    // Non-bottom surveys or tab surveys have the border bottom\n    if (surveyHasBottomBorder) {\n        hostStyle.setProperty('--ph-survey-border-radius', effectiveAppearance.borderRadius)\n        hostStyle.setProperty('--ph-survey-border-bottom', '1.5px solid var(--ph-survey-border-color)')\n    } else {\n        hostStyle.setProperty('--ph-survey-border-bottom', 'none')\n        hostStyle.setProperty(\n            '--ph-survey-border-radius',\n            `${effectiveAppearance.borderRadius} ${effectiveAppearance.borderRadius} 0 0`\n        )\n    }\n    hostStyle.setProperty('--ph-survey-background-color', effectiveAppearance.backgroundColor)\n    hostStyle.setProperty('--ph-survey-box-shadow', effectiveAppearance.boxShadow)\n    hostStyle.setProperty('--ph-survey-disabled-button-opacity', effectiveAppearance.disabledButtonOpacity)\n    hostStyle.setProperty('--ph-survey-submit-button-color', effectiveAppearance.submitButtonColor)\n    hostStyle.setProperty(\n        '--ph-survey-submit-button-text-color',\n        appearance?.submitButtonTextColor || getContrastingTextColor(effectiveAppearance.submitButtonColor)\n    )\n    hostStyle.setProperty('--ph-survey-rating-bg-color', effectiveAppearance.ratingButtonColor)\n    hostStyle.setProperty(\n        '--ph-survey-rating-text-color',\n        getContrastingTextColor(effectiveAppearance.ratingButtonColor)\n    )\n    hostStyle.setProperty('--ph-survey-rating-active-bg-color', effectiveAppearance.ratingButtonActiveColor)\n    hostStyle.setProperty(\n        '--ph-survey-rating-active-text-color',\n        getContrastingTextColor(effectiveAppearance.ratingButtonActiveColor)\n    )\n    hostStyle.setProperty(\n        '--ph-survey-text-primary-color',\n        getContrastingTextColor(effectiveAppearance.backgroundColor)\n    )\n    hostStyle.setProperty('--ph-survey-text-subtle-color', effectiveAppearance.textSubtleColor)\n    hostStyle.setProperty('--ph-widget-color', effectiveAppearance.widgetColor)\n    hostStyle.setProperty('--ph-widget-text-color', getContrastingTextColor(effectiveAppearance.widgetColor))\n    hostStyle.setProperty('--ph-widget-z-index', effectiveAppearance.zIndex)\n\n    // Adjust input/choice background slightly if main background is white\n    if (effectiveAppearance.backgroundColor === 'white') {\n        hostStyle.setProperty('--ph-survey-input-background', '#f8f8f8')\n    }\n\n    hostStyle.setProperty('--ph-survey-input-background', effectiveAppearance.inputBackground)\n    hostStyle.setProperty('--ph-survey-input-text-color', getContrastingTextColor(effectiveAppearance.inputBackground))\n    hostStyle.setProperty('--ph-survey-scrollbar-thumb-color', effectiveAppearance.scrollbarThumbColor)\n    hostStyle.setProperty('--ph-survey-scrollbar-track-color', effectiveAppearance.scrollbarTrackColor)\n    hostStyle.setProperty('--ph-survey-outline-color', effectiveAppearance.outlineColor)\n}\n\nfunction nameToHex(name: string) {\n    return {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        'indianred ': '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrodyellow: '#fafad2',\n        lightgrey: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370d8',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#d87093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32',\n    }[name.toLowerCase()]\n}\n\nfunction hex2rgb(c: string) {\n    if (c[0] === '#') {\n        const hexColor = c.replace(/^#/, '')\n        const r = parseInt(hexColor.slice(0, 2), 16)\n        const g = parseInt(hexColor.slice(2, 4), 16)\n        const b = parseInt(hexColor.slice(4, 6), 16)\n        return 'rgb(' + r + ',' + g + ',' + b + ')'\n    }\n    return 'rgb(255, 255, 255)'\n}\n\nfunction getContrastingTextColor(color: string = defaultSurveyAppearance.backgroundColor) {\n    let rgb\n    if (color[0] === '#') {\n        rgb = hex2rgb(color)\n    }\n    if (color.startsWith('rgb')) {\n        rgb = color\n    }\n    // otherwise it's a color name\n    const nameColorToHex = nameToHex(color)\n    if (nameColorToHex) {\n        rgb = hex2rgb(nameColorToHex)\n    }\n    if (!rgb) {\n        return BLACK_TEXT_COLOR\n    }\n    const colorMatch = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)\n    if (colorMatch) {\n        const r = parseInt(colorMatch[1])\n        const g = parseInt(colorMatch[2])\n        const b = parseInt(colorMatch[3])\n        const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b))\n        return hsp > 127.5 ? BLACK_TEXT_COLOR : 'white'\n    }\n    return BLACK_TEXT_COLOR\n}\n\nexport function getSurveyStylesheet(posthog?: PostHog) {\n    const stylesheet = prepareStylesheet(document, typeof surveyStyles === 'string' ? surveyStyles : '', posthog)\n    stylesheet?.setAttribute('data-ph-survey-style', 'true')\n    return stylesheet\n}\n\nexport const retrieveSurveyShadow = (\n    survey: Pick<Survey, 'id' | 'appearance' | 'type'>,\n    posthog?: PostHog,\n    element?: Element\n) => {\n    const widgetClassName = getSurveyContainerClass(survey)\n    const existingDiv = document.querySelector(`.${widgetClassName}`)\n\n    if (existingDiv && existingDiv.shadowRoot) {\n        return {\n            shadow: existingDiv.shadowRoot,\n            isNewlyCreated: false,\n        }\n    }\n\n    // If it doesn't exist, create it\n    const div = document.createElement('div')\n    addSurveyCSSVariablesToElement(div, survey.type, survey.appearance)\n    div.className = widgetClassName\n    const shadow = div.attachShadow({ mode: 'open' })\n    const stylesheet = getSurveyStylesheet(posthog)\n    if (stylesheet) {\n        const existingStylesheet = shadow.querySelector('style')\n        if (existingStylesheet) {\n            shadow.removeChild(existingStylesheet)\n        }\n        shadow.appendChild(stylesheet)\n    }\n    ;(element ? element : document.body).appendChild(div)\n    return {\n        shadow,\n        isNewlyCreated: true,\n    }\n}\n\ninterface SendSurveyEventArgs {\n    responses: Record<string, string | number | string[] | null>\n    survey: Survey\n    surveySubmissionId: string\n    isSurveyCompleted: boolean\n    posthog?: PostHog\n}\n\nconst getSurveyResponseValue = (responses: Record<string, string | number | string[] | null>, questionId?: string) => {\n    if (!questionId) {\n        return null\n    }\n    const response = responses[getSurveyResponseKey(questionId)]\n    if (isArray(response)) {\n        return [...response]\n    }\n    return response\n}\n\nexport const sendSurveyEvent = ({\n    responses,\n    survey,\n    surveySubmissionId,\n    posthog,\n    isSurveyCompleted,\n}: SendSurveyEventArgs) => {\n    if (!posthog) {\n        logger.error('[survey sent] event not captured, PostHog instance not found.')\n        return\n    }\n    setSurveySeenOnLocalStorage(survey)\n    posthog.capture(SurveyEventName.SENT, {\n        [SurveyEventProperties.SURVEY_NAME]: survey.name,\n        [SurveyEventProperties.SURVEY_ID]: survey.id,\n        [SurveyEventProperties.SURVEY_ITERATION]: survey.current_iteration,\n        [SurveyEventProperties.SURVEY_ITERATION_START_DATE]: survey.current_iteration_start_date,\n        [SurveyEventProperties.SURVEY_QUESTIONS]: survey.questions.map((question) => ({\n            id: question.id,\n            question: question.question,\n            response: getSurveyResponseValue(responses, question.id),\n        })),\n        [SurveyEventProperties.SURVEY_SUBMISSION_ID]: surveySubmissionId,\n        [SurveyEventProperties.SURVEY_COMPLETED]: isSurveyCompleted,\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        ...responses,\n        $set: {\n            [getSurveyInteractionProperty(survey, 'responded')]: true,\n        },\n    })\n    if (isSurveyCompleted) {\n        // Only dispatch PHSurveySent if the survey is completed, as that removes the survey from focus\n        window.dispatchEvent(new CustomEvent('PHSurveySent', { detail: { surveyId: survey.id } }))\n        clearInProgressSurveyState(survey)\n    }\n}\n\nexport const dismissedSurveyEvent = (survey: Survey, posthog?: PostHog, readOnly?: boolean) => {\n    if (!posthog) {\n        logger.error('[survey dismissed] event not captured, PostHog instance not found.')\n        return\n    }\n    if (readOnly) {\n        return\n    }\n\n    const inProgressSurvey = getInProgressSurveyState(survey)\n    posthog.capture(SurveyEventName.DISMISSED, {\n        [SurveyEventProperties.SURVEY_NAME]: survey.name,\n        [SurveyEventProperties.SURVEY_ID]: survey.id,\n        [SurveyEventProperties.SURVEY_ITERATION]: survey.current_iteration,\n        [SurveyEventProperties.SURVEY_ITERATION_START_DATE]: survey.current_iteration_start_date,\n        // check if the survey is partially completed\n        [SurveyEventProperties.SURVEY_PARTIALLY_COMPLETED]:\n            Object.values(inProgressSurvey?.responses || {}).filter((resp) => !isNullish(resp)).length > 0,\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        ...inProgressSurvey?.responses,\n        [SurveyEventProperties.SURVEY_SUBMISSION_ID]: inProgressSurvey?.surveySubmissionId,\n        [SurveyEventProperties.SURVEY_QUESTIONS]: survey.questions.map((question) => ({\n            id: question.id,\n            question: question.question,\n            response: getSurveyResponseValue(inProgressSurvey?.responses || {}, question.id),\n        })),\n        $set: {\n            [getSurveyInteractionProperty(survey, 'dismissed')]: true,\n        },\n    })\n    // Clear in-progress state on dismissal\n    clearInProgressSurveyState(survey)\n    setSurveySeenOnLocalStorage(survey)\n    window.dispatchEvent(new CustomEvent('PHSurveyClosed', { detail: { surveyId: survey.id } }))\n}\n\n// Use the Fisher-yates algorithm to shuffle this array\n// https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\nexport const shuffle = (array: any[]) => {\n    return array\n        .map((a) => ({ sort: Math.floor(Math.random() * 10), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value)\n}\n\nconst reverseIfUnshuffled = (unshuffled: any[], shuffled: any[]): any[] => {\n    if (unshuffled.length === shuffled.length && unshuffled.every((val, index) => val === shuffled[index])) {\n        return shuffled.reverse()\n    }\n\n    return shuffled\n}\n\nexport const getDisplayOrderChoices = (question: MultipleSurveyQuestion): string[] => {\n    if (!question.shuffleOptions) {\n        return question.choices\n    }\n\n    const displayOrderChoices = question.choices\n    let openEndedChoice = ''\n    if (question.hasOpenChoice) {\n        // if the question has an open-ended choice, its always the last element in the choices array.\n        openEndedChoice = displayOrderChoices.pop()!\n    }\n\n    const shuffledOptions = reverseIfUnshuffled(displayOrderChoices, shuffle(displayOrderChoices))\n\n    if (question.hasOpenChoice) {\n        question.choices.push(openEndedChoice)\n        shuffledOptions.push(openEndedChoice)\n    }\n\n    return shuffledOptions\n}\n\nexport const getDisplayOrderQuestions = (survey: Survey): SurveyQuestion[] => {\n    if (!survey.appearance || !survey.appearance.shuffleQuestions || survey.enable_partial_responses) {\n        return survey.questions\n    }\n\n    return reverseIfUnshuffled(survey.questions, shuffle(survey.questions))\n}\n\nexport const hasEvents = (survey: Pick<Survey, 'conditions'>): boolean => {\n    return survey.conditions?.events?.values?.length != undefined && survey.conditions?.events?.values?.length > 0\n}\n\nexport const canActivateRepeatedly = (\n    survey: Pick<Survey, 'schedule' | 'conditions' | 'id' | 'current_iteration'>\n): boolean => {\n    return (\n        !!(survey.conditions?.events?.repeatedActivation && hasEvents(survey)) ||\n        survey.schedule === SurveySchedule.Always ||\n        isSurveyInProgress(survey)\n    )\n}\n\n/**\n * getSurveySeen checks local storage for the surveySeen Key a\n * and overrides this value if the survey can be repeatedly activated by its events.\n * @param survey\n */\nexport const getSurveySeen = (survey: Survey): boolean => {\n    const surveySeen = localStorage.getItem(getSurveySeenKey(survey))\n    if (surveySeen) {\n        // if a survey has already been seen,\n        // we will override it with the event repeated activation value.\n        return !canActivateRepeatedly(survey)\n    }\n\n    return false\n}\n\nconst LAST_SEEN_SURVEY_DATE_KEY = 'lastSeenSurveyDate'\n\nexport const hasWaitPeriodPassed = (waitPeriodInDays: number | undefined): boolean => {\n    const lastSeenSurveyDate = localStorage.getItem(LAST_SEEN_SURVEY_DATE_KEY)\n    if (!waitPeriodInDays || !lastSeenSurveyDate) {\n        return true\n    }\n\n    const today = new Date()\n    const diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime())\n    const diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24))\n    return diffDaysFromToday > waitPeriodInDays\n}\n\ninterface SurveyContextProps {\n    isPreviewMode: boolean\n    previewPageIndex: number | undefined\n    onPopupSurveyDismissed: () => void\n    isPopup: boolean\n    onPreviewSubmit: (res: string | string[] | number | null) => void\n    surveySubmissionId: string\n}\n\nexport const SurveyContext = createContext<SurveyContextProps>({\n    isPreviewMode: false,\n    previewPageIndex: 0,\n    onPopupSurveyDismissed: () => {},\n    isPopup: true,\n    onPreviewSubmit: () => {},\n    surveySubmissionId: '',\n})\n\nexport const useSurveyContext = () => {\n    return useContext(SurveyContext)\n}\n\ninterface RenderProps {\n    component: VNode<{ className: string }>\n    children: string\n    renderAsHtml?: boolean\n    style?: React.CSSProperties\n}\n\nexport const renderChildrenAsTextOrHtml = ({ component, children, renderAsHtml, style }: RenderProps) => {\n    return renderAsHtml\n        ? cloneElement(component, {\n              dangerouslySetInnerHTML: { __html: children },\n              style,\n          })\n        : cloneElement(component, {\n              children,\n              style,\n          })\n}\n\nfunction defaultMatchType(matchType?: PropertyMatchType): PropertyMatchType {\n    return matchType ?? 'icontains'\n}\n\n// use urlMatchType to validate url condition, fallback to contains for backwards compatibility\nexport function doesSurveyUrlMatch(survey: Pick<Survey, 'conditions'>): boolean {\n    if (!survey.conditions?.url) {\n        return true\n    }\n    // if we dont know the url, assume it is not a match\n    const href = window?.location?.href\n    if (!href) {\n        return false\n    }\n    const targets = [survey.conditions.url]\n    const matchType = defaultMatchType(survey.conditions?.urlMatchType)\n    return propertyComparisons[matchType](targets, [href])\n}\n\nexport function doesSurveyDeviceTypesMatch(survey: Survey): boolean {\n    if (!survey.conditions?.deviceTypes || survey.conditions?.deviceTypes.length === 0) {\n        return true\n    }\n    // if we dont know the device type, assume it is not a match\n    if (!userAgent) {\n        return false\n    }\n\n    const deviceType = detectDeviceType(userAgent)\n    return propertyComparisons[defaultMatchType(survey.conditions?.deviceTypesMatchType)](\n        survey.conditions.deviceTypes,\n        [deviceType]\n    )\n}\n\nexport function doesSurveyMatchSelector(survey: Survey): boolean {\n    if (!survey.conditions?.selector) {\n        return true\n    }\n    return !!document?.querySelector(survey.conditions.selector)\n}\n\ninterface InProgressSurveyState {\n    surveySubmissionId: string\n    lastQuestionIndex: number\n    responses: Record<string, string | number | string[] | null>\n}\n\nconst getInProgressSurveyStateKey = (survey: Pick<Survey, 'id' | 'current_iteration'>): string => {\n    let key = `${SURVEY_IN_PROGRESS_PREFIX}${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        key = `${SURVEY_IN_PROGRESS_PREFIX}${survey.id}_${survey.current_iteration}`\n    }\n    return key\n}\n\nexport const setInProgressSurveyState = (\n    survey: Pick<Survey, 'id' | 'current_iteration'>,\n    state: InProgressSurveyState\n): void => {\n    try {\n        localStorage.setItem(getInProgressSurveyStateKey(survey), JSON.stringify(state))\n    } catch (e) {\n        logger.error('Error setting in-progress survey state in localStorage', e)\n    }\n}\n\nexport const getInProgressSurveyState = (\n    survey: Pick<Survey, 'id' | 'current_iteration'>\n): InProgressSurveyState | null => {\n    try {\n        const stateString = localStorage.getItem(getInProgressSurveyStateKey(survey))\n        if (stateString) {\n            return JSON.parse(stateString) as InProgressSurveyState\n        }\n    } catch (e) {\n        logger.error('Error getting in-progress survey state from localStorage', e)\n    }\n    return null\n}\n\nexport const isSurveyInProgress = (survey: Pick<Survey, 'id' | 'current_iteration'>): boolean => {\n    const state = getInProgressSurveyState(survey)\n    return !isNullish(state?.surveySubmissionId)\n}\n\nexport const clearInProgressSurveyState = (survey: Pick<Survey, 'id' | 'current_iteration'>): void => {\n    try {\n        localStorage.removeItem(getInProgressSurveyStateKey(survey))\n    } catch (e) {\n        logger.error('Error clearing in-progress survey state from localStorage', e)\n    }\n}\n\nexport function getSurveyContainerClass(survey: Pick<Survey, 'id'>, asSelector = false): string {\n    const className = `PostHogSurvey-${survey.id}`\n    return asSelector ? `.${className}` : className\n}\n","export const satisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146 272q66 0 121.5-35.5T682-393h-52q-23 40-63 61.5T480.5-310q-46.5 0-87-21T331-393h-53q26 61 81 96.5T480-261Zm0 181q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const neutralEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm20 194h253v-49H354v49ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const dissatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146.174 116Q413-417 358.5-379.5T278-280h53q22-42 62.173-65t87.5-23Q528-368 567.5-344.5T630-280h52q-25-63-79.826-100-54.826-37-122-37ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const veryDissatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M480-417q-67 0-121.5 37.5T278-280h404q-25-63-80-100t-122-37Zm-183-72 50-45 45 45 31-36-45-45 45-45-31-36-45 45-50-45-31 36 45 45-45 45 31 36Zm272 0 44-45 51 45 31-36-45-45 45-45-31-36-51 45-44-45-31 36 44 45-44 45 31 36ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142 0 241-99t99-241q0-142-99-241t-241-99q-142 0-241 99t-99 241q0 142 99 241t241 99Z\" />\n    </svg>\n)\nexport const verySatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M479.504-261Q537-261 585.5-287q48.5-26 78.5-72.4 6-11.6-.75-22.6-6.75-11-20.25-11H316.918Q303-393 296.5-382t-.5 22.6q30 46.4 78.5 72.4 48.5 26 105.004 26ZM347-578l27 27q7.636 8 17.818 8Q402-543 410-551q8-8 8-18t-8-18l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.636-8 17.818Q276-559 284-551q8 8 18 8t18-8l27-27Zm267 0 27 27q7.714 8 18 8t18-8q8-7.636 8-17.818Q685-579 677-587l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.714-8 18t8 18q7.636 8 17.818 8Q579-543 587-551l27-27ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const cancelSVG = (\n    <svg\n        width=\"12\"\n        height=\"12\"\n        viewBox=\"0 0 12 12\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        aria-labelledby=\"close-survey-title\"\n    >\n        <title id=\"close-survey-title\">Close survey</title>\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M0.164752 0.164752C0.384422 -0.0549175 0.740578 -0.0549175 0.960248 0.164752L6 5.20451L11.0398 0.164752C11.2594 -0.0549175 11.6156 -0.0549175 11.8352 0.164752C12.0549 0.384422 12.0549 0.740578 11.8352 0.960248L6.79549 6L11.8352 11.0398C12.0549 11.2594 12.0549 11.6156 11.8352 11.8352C11.6156 12.0549 11.2594 12.0549 11.0398 11.8352L6 6.79549L0.960248 11.8352C0.740578 12.0549 0.384422 12.0549 0.164752 11.8352C-0.0549175 11.6156 -0.0549175 11.2594 0.164752 11.0398L5.20451 6L0.164752 0.960248C-0.0549175 0.740578 -0.0549175 0.384422 0.164752 0.164752Z\"\n            fill=\"black\"\n        />\n    </svg>\n)\nexport const IconPosthogLogo = (\n    <svg width=\"77\" height=\"14\" viewBox=\"0 0 77 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0_2415_6911)\">\n            <mask\n                id=\"mask0_2415_6911\"\n                style={{ maskType: 'luminance' }}\n                maskUnits=\"userSpaceOnUse\"\n                x=\"0\"\n                y=\"0\"\n                width=\"77\"\n                height=\"14\"\n            >\n                <path d=\"M0.5 0H76.5V14H0.5V0Z\" fill=\"white\" />\n            </mask>\n            <g mask=\"url(#mask0_2415_6911)\">\n                <path\n                    d=\"M5.77226 8.02931C5.59388 8.37329 5.08474 8.37329 4.90634 8.02931L4.4797 7.20672C4.41155 7.07535 4.41155 6.9207 4.4797 6.78933L4.90634 5.96669C5.08474 5.62276 5.59388 5.62276 5.77226 5.96669L6.19893 6.78933C6.26709 6.9207 6.26709 7.07535 6.19893 7.20672L5.77226 8.02931ZM5.77226 12.6946C5.59388 13.0386 5.08474 13.0386 4.90634 12.6946L4.4797 11.872C4.41155 11.7406 4.41155 11.586 4.4797 11.4546L4.90634 10.632C5.08474 10.288 5.59388 10.288 5.77226 10.632L6.19893 11.4546C6.26709 11.586 6.26709 11.7406 6.19893 11.872L5.77226 12.6946Z\"\n                    fill=\"#1D4AFF\"\n                />\n                <path\n                    d=\"M0.5 10.9238C0.5 10.508 1.02142 10.2998 1.32637 10.5938L3.54508 12.7327C3.85003 13.0267 3.63405 13.5294 3.20279 13.5294H0.984076C0.716728 13.5294 0.5 13.3205 0.5 13.0627V10.9238ZM0.5 8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.19753 13.3927C5.28831 13.4802 5.41144 13.5294 5.53982 13.5294H8.0421C8.47337 13.5294 8.68936 13.0267 8.3844 12.7327L1.32637 5.92856C1.02142 5.63456 0.5 5.84278 0.5 6.25854V8.67083ZM0.5 4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L10.0368 13.3927C10.1276 13.4802 10.2508 13.5294 10.3791 13.5294H12.8814C13.3127 13.5294 13.5287 13.0267 13.2237 12.7327L1.32637 1.26329C1.02142 0.969312 0.5 1.17752 0.5 1.59327V4.00556ZM5.33931 4.00556C5.33931 4.12932 5.39033 4.24802 5.4811 4.33554L14.1916 12.7327C14.4965 13.0267 15.0179 12.8185 15.0179 12.4028V9.99047C15.0179 9.86671 14.9669 9.74799 14.8762 9.66049L6.16568 1.26329C5.86071 0.969307 5.33931 1.17752 5.33931 1.59327V4.00556ZM11.005 1.26329C10.7 0.969307 10.1786 1.17752 10.1786 1.59327V4.00556C10.1786 4.12932 10.2296 4.24802 10.3204 4.33554L14.1916 8.06748C14.4965 8.36148 15.0179 8.15325 15.0179 7.7375V5.3252C15.0179 5.20144 14.9669 5.08272 14.8762 4.99522L11.005 1.26329Z\"\n                    fill=\"#F9BD2B\"\n                />\n                <path\n                    d=\"M21.0852 10.981L16.5288 6.58843C16.2238 6.29443 15.7024 6.50266 15.7024 6.91841V13.0627C15.7024 13.3205 15.9191 13.5294 16.1865 13.5294H23.2446C23.5119 13.5294 23.7287 13.3205 23.7287 13.0627V12.5032C23.7287 12.2455 23.511 12.0396 23.2459 12.0063C22.4323 11.9042 21.6713 11.546 21.0852 10.981ZM18.0252 12.0365C17.5978 12.0365 17.251 11.7021 17.251 11.2901C17.251 10.878 17.5978 10.5436 18.0252 10.5436C18.4527 10.5436 18.7996 10.878 18.7996 11.2901C18.7996 11.7021 18.4527 12.0365 18.0252 12.0365Z\"\n                    fill=\"currentColor\"\n                />\n                <path\n                    d=\"M0.5 13.0627C0.5 13.3205 0.716728 13.5294 0.984076 13.5294H3.20279C3.63405 13.5294 3.85003 13.0267 3.54508 12.7327L1.32637 10.5938C1.02142 10.2998 0.5 10.508 0.5 10.9238V13.0627ZM5.33931 5.13191L1.32637 1.26329C1.02142 0.969306 0.5 1.17752 0.5 1.59327V4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L5.33931 8.86412V5.13191ZM1.32637 5.92855C1.02142 5.63455 0.5 5.84278 0.5 6.25853V8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.33931 13.5294V9.79717L1.32637 5.92855Z\"\n                    fill=\"#1D4AFF\"\n                />\n                <path\n                    d=\"M10.1787 5.3252C10.1787 5.20144 10.1277 5.08272 10.0369 4.99522L6.16572 1.26329C5.8608 0.969306 5.33936 1.17752 5.33936 1.59327V4.00556C5.33936 4.12932 5.39037 4.24802 5.48114 4.33554L10.1787 8.86412V5.3252ZM5.33936 13.5294H8.04214C8.47341 13.5294 8.6894 13.0267 8.38443 12.7327L5.33936 9.79717V13.5294ZM5.33936 5.13191V8.67083C5.33936 8.79459 5.39037 8.91331 5.48114 9.00081L10.1787 13.5294V9.99047C10.1787 9.86671 10.1277 9.74803 10.0369 9.66049L5.33936 5.13191Z\"\n                    fill=\"#F54E00\"\n                />\n                <path\n                    d=\"M29.375 11.6667H31.3636V8.48772H33.0249C34.8499 8.48772 36.0204 7.4443 36.0204 5.83052C36.0204 4.21681 34.8499 3.17334 33.0249 3.17334H29.375V11.6667ZM31.3636 6.84972V4.81136H32.8236C33.5787 4.81136 34.0318 5.19958 34.0318 5.83052C34.0318 6.4615 33.5787 6.84972 32.8236 6.84972H31.3636ZM39.618 11.7637C41.5563 11.7637 42.9659 10.429 42.9659 8.60905C42.9659 6.78905 41.5563 5.45438 39.618 5.45438C37.6546 5.45438 36.2701 6.78905 36.2701 8.60905C36.2701 10.429 37.6546 11.7637 39.618 11.7637ZM38.1077 8.60905C38.1077 7.63838 38.7118 6.97105 39.618 6.97105C40.5116 6.97105 41.1157 7.63838 41.1157 8.60905C41.1157 9.57972 40.5116 10.2471 39.618 10.2471C38.7118 10.2471 38.1077 9.57972 38.1077 8.60905ZM46.1482 11.7637C47.6333 11.7637 48.6402 10.8658 48.6402 9.81025C48.6402 7.33505 45.2294 8.13585 45.2294 7.16518C45.2294 6.8983 45.5189 6.72843 45.9342 6.72843C46.3622 6.72843 46.8782 6.98318 47.0418 7.54132L48.527 6.94678C48.2375 6.06105 47.1677 5.45438 45.8713 5.45438C44.4743 5.45438 43.6058 6.25518 43.6058 7.21372C43.6058 9.53118 46.9663 8.88812 46.9663 9.84665C46.9663 10.1864 46.6391 10.417 46.1482 10.417C45.4434 10.417 44.9525 9.94376 44.8015 9.3735L43.3164 9.93158C43.6436 10.8537 44.6001 11.7637 46.1482 11.7637ZM53.4241 11.606L53.2982 10.0651C53.0843 10.1743 52.8074 10.2106 52.5808 10.2106C52.1278 10.2106 51.8257 9.89523 51.8257 9.34918V7.03172H53.3612V5.55145H51.8257V3.78001H49.9755V5.55145H48.9687V7.03172H49.9755V9.57972C49.9755 11.06 51.0202 11.7637 52.3921 11.7637C52.7696 11.7637 53.122 11.7031 53.4241 11.606ZM59.8749 3.17334V6.47358H56.376V3.17334H54.3874V11.6667H56.376V8.11158H59.8749V11.6667H61.8761V3.17334H59.8749ZM66.2899 11.7637C68.2281 11.7637 69.6378 10.429 69.6378 8.60905C69.6378 6.78905 68.2281 5.45438 66.2899 5.45438C64.3265 5.45438 62.942 6.78905 62.942 8.60905C62.942 10.429 64.3265 11.7637 66.2899 11.7637ZM64.7796 8.60905C64.7796 7.63838 65.3837 6.97105 66.2899 6.97105C67.1835 6.97105 67.7876 7.63838 67.7876 8.60905C67.7876 9.57972 67.1835 10.2471 66.2899 10.2471C65.3837 10.2471 64.7796 9.57972 64.7796 8.60905ZM73.2088 11.4725C73.901 11.4725 74.5177 11.242 74.845 10.8416V11.424C74.845 12.1034 74.2786 12.5767 73.4102 12.5767C72.7935 12.5767 72.2523 12.2854 72.1642 11.788L70.4776 12.0428C70.7042 13.1955 71.925 13.972 73.4102 13.972C75.361 13.972 76.6574 12.8679 76.6574 11.2298V5.55145H74.8324V6.07318C74.4926 5.69705 73.9136 5.45438 73.171 5.45438C71.409 5.45438 70.3014 6.61918 70.3014 8.46345C70.3014 10.3077 71.409 11.4725 73.2088 11.4725ZM72.1012 8.46345C72.1012 7.55345 72.655 6.97105 73.5109 6.97105C74.3793 6.97105 74.9331 7.55345 74.9331 8.46345C74.9331 9.37345 74.3793 9.95585 73.5109 9.95585C72.655 9.95585 72.1012 9.37345 72.1012 8.46345Z\"\n                    fill=\"currentColor\"\n                />\n            </g>\n        </g>\n        <defs>\n            <clipPath id=\"clip0_2415_6911\">\n                <rect width=\"76\" height=\"14\" fill=\"white\" transform=\"translate(0.5)\" />\n            </clipPath>\n        </defs>\n    </svg>\n)\nexport const checkSVG = (\n    <svg width=\"16\" height=\"12\" viewBox=\"0 0 16 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.30769 10.6923L4.77736 11.2226C4.91801 11.3633 5.10878 11.4423 5.30769 11.4423C5.5066 11.4423 5.69737 11.3633 5.83802 11.2226L5.30769 10.6923ZM15.5303 1.53033C15.8232 1.23744 15.8232 0.762563 15.5303 0.46967C15.2374 0.176777 14.7626 0.176777 14.4697 0.46967L15.5303 1.53033ZM1.53033 5.85429C1.23744 5.56139 0.762563 5.56139 0.46967 5.85429C0.176777 6.14718 0.176777 6.62205 0.46967 6.91495L1.53033 5.85429ZM5.83802 11.2226L15.5303 1.53033L14.4697 0.46967L4.77736 10.162L5.83802 11.2226ZM0.46967 6.91495L4.77736 11.2226L5.83802 10.162L1.53033 5.85429L0.46967 6.91495Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n)\n","import { IconPosthogLogo } from '../icons'\n\nexport function PostHogLogo() {\n    return (\n        <a href=\"https://posthog.com/surveys\" target=\"_blank\" rel=\"noopener\" className=\"footer-branding\">\n            Survey by {IconPosthogLogo}\n        </a>\n    )\n}\n","import { window } from '../../../utils/globals'\n\nimport { SurveyAppearance } from '../../../posthog-surveys-types'\n\nimport { useContext } from 'preact/hooks'\nimport { SurveyContext } from '../surveys-extension-utils'\nimport { PostHogLogo } from './PostHogLogo'\n\nexport function BottomSection({\n    text,\n    submitDisabled,\n    appearance,\n    onSubmit,\n    link,\n    onPreviewSubmit,\n    skipSubmitButton,\n}: {\n    text: string\n    submitDisabled: boolean\n    appearance: SurveyAppearance\n    onSubmit: () => void\n    link?: string | null\n    onPreviewSubmit?: () => void\n    skipSubmitButton?: boolean\n}) {\n    const { isPreviewMode } = useContext(SurveyContext)\n    return (\n        <div className=\"bottom-section\">\n            {!skipSubmitButton && (\n                <button\n                    className=\"form-submit\"\n                    disabled={submitDisabled}\n                    aria-label=\"Submit survey\"\n                    type=\"button\"\n                    onClick={() => {\n                        if (link) {\n                            window?.open(link)\n                        }\n                        if (isPreviewMode) {\n                            onPreviewSubmit?.()\n                        } else {\n                            onSubmit()\n                        }\n                    }}\n                >\n                    {text}\n                </button>\n            )}\n            {!appearance.whiteLabel && <PostHogLogo />}\n        </div>\n    )\n}\n","import { h } from 'preact'\nimport { useContext } from 'preact/hooks'\nimport { SurveyQuestion, SurveyQuestionType } from '../../../posthog-surveys-types'\nimport { cancelSVG } from '../icons'\nimport { SurveyContext, renderChildrenAsTextOrHtml } from '../surveys-extension-utils'\n\nexport function QuestionHeader({\n    question,\n    forceDisableHtml,\n    htmlFor,\n}: {\n    question: Pick<SurveyQuestion, 'question' | 'description' | 'descriptionContentType' | 'type'>\n    forceDisableHtml: boolean\n    htmlFor?: string\n}) {\n    const TitleComponent = question.type === SurveyQuestionType.Open ? 'label' : 'h3'\n    return (\n        <div class=\"question-header\">\n            <TitleComponent className=\"survey-question\" htmlFor={htmlFor}>\n                {question.question}\n            </TitleComponent>\n            {question.description &&\n                renderChildrenAsTextOrHtml({\n                    component: h('p', { className: 'survey-question-description' }),\n                    children: question.description,\n                    renderAsHtml: !forceDisableHtml && question.descriptionContentType !== 'text',\n                })}\n        </div>\n    )\n}\n\nexport function Cancel({ onClick }: { onClick: () => void }) {\n    const { isPreviewMode } = useContext(SurveyContext)\n\n    return (\n        <button\n            className=\"form-cancel\"\n            onClick={onClick}\n            disabled={isPreviewMode}\n            aria-label=\"Close survey\"\n            type=\"button\"\n        >\n            {cancelSVG}\n        </button>\n    )\n}\n","import { h } from 'preact'\nimport { SurveyAppearance, SurveyQuestionDescriptionContentType } from '../../../posthog-surveys-types'\nimport { renderChildrenAsTextOrHtml } from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { Cancel } from './QuestionHeader'\n\nimport { useContext, useEffect } from 'preact/hooks'\nimport { SurveyContext } from '../surveys-extension-utils'\nimport { addEventListener } from '../../../utils'\nimport { window as _window } from '../../../utils/globals'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window\n\nexport function ConfirmationMessage({\n    header,\n    description,\n    contentType,\n    forceDisableHtml,\n    appearance,\n    onClose,\n}: {\n    header: string\n    description: string\n    forceDisableHtml: boolean\n    contentType?: SurveyQuestionDescriptionContentType\n    appearance: SurveyAppearance\n    onClose: () => void\n}) {\n    const { isPopup } = useContext(SurveyContext)\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'Enter' || event.key === 'Escape') {\n                event.preventDefault()\n                onClose()\n            }\n        }\n        addEventListener(window, 'keydown', handleKeyDown as EventListener)\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown)\n        }\n    }, [onClose])\n\n    return (\n        <div className=\"thank-you-message\" role=\"status\" tabIndex={0} aria-atomic=\"true\">\n            {isPopup && <Cancel onClick={() => onClose()} />}\n            <h3 className=\"thank-you-message-header\">{header}</h3>\n            {description &&\n                renderChildrenAsTextOrHtml({\n                    component: h('p', { className: 'thank-you-message-body' }),\n                    children: description,\n                    renderAsHtml: !forceDisableHtml && contentType !== 'text',\n                })}\n            {isPopup && (\n                <BottomSection\n                    text={appearance.thankYouMessageCloseButtonText || 'Close'}\n                    submitDisabled={false}\n                    appearance={appearance}\n                    onSubmit={() => onClose()}\n                />\n            )}\n        </div>\n    )\n}\n","import { Fragment } from 'preact'\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks'\nimport {\n    BasicSurveyQuestion,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    SurveyAppearance,\n    SurveyQuestionType,\n} from '../../../posthog-surveys-types'\nimport { isArray, isNull, isNumber, isString } from '@posthog/core'\nimport { dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, veryDissatisfiedEmoji, verySatisfiedEmoji } from '../icons'\nimport { getDisplayOrderChoices, useSurveyContext } from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { QuestionHeader } from './QuestionHeader'\n\nexport interface CommonQuestionProps {\n    forceDisableHtml: boolean\n    appearance: SurveyAppearance\n    onSubmit: (res: string | string[] | number | null) => void\n    onPreviewSubmit: (res: string | string[] | number | null) => void\n    initialValue?: string | string[] | number | null\n    displayQuestionIndex: number\n}\n\ninterface OpenEndedInputState {\n    isSelected: boolean\n    inputValue: string\n}\n\nconst isValidStringArray = (value: unknown): value is string[] => {\n    return isArray(value) && value.every((item) => isString(item))\n}\n\nconst initializeSelectedChoices = (\n    initialValue: string | string[] | number | null | undefined,\n    questionType: SurveyQuestionType\n): string | string[] | null => {\n    if (isString(initialValue)) {\n        return initialValue\n    }\n    if (isValidStringArray(initialValue)) {\n        return initialValue\n    }\n    return questionType === SurveyQuestionType.SingleChoice ? null : []\n}\n\nconst initializeOpenEndedState = (\n    initialValue: string | string[] | number | null | undefined,\n    choices: string[]\n): OpenEndedInputState => {\n    if (isString(initialValue) && !choices.includes(initialValue)) {\n        return {\n            isSelected: true,\n            inputValue: initialValue,\n        }\n    }\n    if (isValidStringArray(initialValue)) {\n        const openEndedValue = initialValue.find((choice) => !choices.includes(choice))\n        if (openEndedValue) {\n            return {\n                isSelected: true,\n                inputValue: openEndedValue,\n            }\n        }\n    }\n    return {\n        isSelected: false,\n        inputValue: '',\n    }\n}\n\nexport function OpenTextQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    displayQuestionIndex,\n    initialValue,\n}: CommonQuestionProps & {\n    question: BasicSurveyQuestion\n}) {\n    const { isPreviewMode } = useSurveyContext()\n    const inputRef = useRef<HTMLTextAreaElement>(null)\n    const [text, setText] = useState<string>(() => {\n        if (isString(initialValue)) {\n            return initialValue\n        }\n        return ''\n    })\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (!isPreviewMode) {\n                inputRef.current?.focus()\n            }\n        }, 100)\n    }, [isPreviewMode])\n\n    const htmlFor = `surveyQuestion${displayQuestionIndex}`\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} htmlFor={htmlFor} />\n                <textarea\n                    ref={inputRef}\n                    id={htmlFor}\n                    rows={4}\n                    placeholder={appearance?.placeholder}\n                    onInput={(e) => {\n                        setText(e.currentTarget.value)\n                        e.stopPropagation()\n                    }}\n                    onKeyDown={(e) => {\n                        e.stopPropagation()\n                    }}\n                    value={text}\n                />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={!text && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(text)}\n                onPreviewSubmit={() => onPreviewSubmit(text)}\n            />\n        </Fragment>\n    )\n}\n\nexport function LinkQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n}: CommonQuestionProps & {\n    question: LinkSurveyQuestion\n}) {\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={false}\n                link={question.link}\n                appearance={appearance}\n                onSubmit={() => onSubmit('link clicked')}\n                onPreviewSubmit={() => onPreviewSubmit('link clicked')}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: RatingSurveyQuestion\n}) {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const [rating, setRating] = useState<number | null>(() => {\n        if (isNumber(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue) && initialValue.length > 0 && isNumber(parseInt(initialValue[0]))) {\n            return parseInt(initialValue[0])\n        }\n        if (isString(initialValue) && isNumber(parseInt(initialValue))) {\n            return parseInt(initialValue)\n        }\n        return null\n    })\n\n    const { isPreviewMode } = useSurveyContext()\n\n    const handleSubmit = (num: number) => {\n        if (isPreviewMode) {\n            return onPreviewSubmit(num)\n        }\n        return onSubmit(num)\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} />\n                <div className=\"rating-section\">\n                    <div className=\"rating-options\">\n                        {question.display === 'emoji' && (\n                            <div className=\"rating-options-emoji\">\n                                {(question.scale === 3 ? threeScaleEmojis : fiveScaleEmojis).map((emoji, idx) => {\n                                    const active = idx + 1 === rating\n                                    return (\n                                        <button\n                                            aria-label={`Rate ${idx + 1}`}\n                                            className={`ratings-emoji question-${displayQuestionIndex}-rating-${idx} ${\n                                                active ? 'rating-active' : ''\n                                            }`}\n                                            value={idx + 1}\n                                            key={idx}\n                                            type=\"button\"\n                                            onClick={() => {\n                                                const response = idx + 1\n                                                setRating(response)\n                                                if (question.skipSubmitButton) {\n                                                    handleSubmit(response)\n                                                }\n                                            }}\n                                        >\n                                            {emoji}\n                                        </button>\n                                    )\n                                })}\n                            </div>\n                        )}\n                        {question.display === 'number' && (\n                            <div\n                                className=\"rating-options-number\"\n                                style={{ gridTemplateColumns: `repeat(${scale - starting + 1}, minmax(0, 1fr))` }}\n                            >\n                                {getScaleNumbers(question.scale).map((number, idx) => {\n                                    const active = rating === number\n                                    return (\n                                        <RatingButton\n                                            key={idx}\n                                            displayQuestionIndex={displayQuestionIndex}\n                                            active={active}\n                                            appearance={appearance}\n                                            num={number}\n                                            setActiveNumber={(response) => {\n                                                setRating(response)\n                                                if (question.skipSubmitButton) {\n                                                    handleSubmit(response)\n                                                }\n                                            }}\n                                        />\n                                    )\n                                })}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"rating-text\">\n                        <div>{question.lowerBoundLabel}</div>\n                        <div>{question.upperBoundLabel}</div>\n                    </div>\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || appearance?.submitButtonText || 'Submit'}\n                submitDisabled={isNull(rating) && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(rating)}\n                onPreviewSubmit={() => onPreviewSubmit(rating)}\n                skipSubmitButton={question.skipSubmitButton}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingButton({\n    num,\n    active,\n    displayQuestionIndex,\n    setActiveNumber,\n}: {\n    num: number\n    active: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    setActiveNumber: (num: number) => void\n}) {\n    return (\n        <button\n            aria-label={`Rate ${num}`}\n            className={`ratings-number question-${displayQuestionIndex}-rating-${num} ${active ? 'rating-active' : ''}`}\n            type=\"button\"\n            onClick={() => {\n                setActiveNumber(num)\n            }}\n        >\n            {num}\n        </button>\n    )\n}\n\nexport function MultipleChoiceQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: MultipleSurveyQuestion\n}) {\n    const openChoiceInputRef = useRef<HTMLInputElement>(null)\n    const choices = useMemo(() => getDisplayOrderChoices(question), [question])\n    const [selectedChoices, setSelectedChoices] = useState<string | string[] | null>(() =>\n        initializeSelectedChoices(initialValue, question.type)\n    )\n    const [openEndedState, setOpenEndedState] = useState<OpenEndedInputState>(() =>\n        initializeOpenEndedState(initialValue, choices)\n    )\n\n    const { isPreviewMode } = useSurveyContext()\n\n    const isSingleChoiceQuestion = question.type === SurveyQuestionType.SingleChoice\n    const isMultipleChoiceQuestion = question.type === SurveyQuestionType.MultipleChoice\n\n    const shouldSkipSubmit = question.skipSubmitButton && isSingleChoiceQuestion && !question.hasOpenChoice\n\n    const handleChoiceChange = (val: string, isOpenChoice: boolean) => {\n        if (isOpenChoice) {\n            const newOpenSelected = !openEndedState.isSelected\n            setOpenEndedState((prev) => ({\n                ...prev,\n                isSelected: newOpenSelected,\n                inputValue: newOpenSelected ? prev.inputValue : '',\n            }))\n\n            if (isSingleChoiceQuestion) {\n                setSelectedChoices('')\n            }\n\n            // Focus the input when open choice is selected, slight delay because of the animation\n            if (newOpenSelected) {\n                setTimeout(() => openChoiceInputRef.current?.focus(), 75)\n            }\n            return\n        }\n\n        if (isSingleChoiceQuestion) {\n            setSelectedChoices(val)\n            // Deselect open choice when selecting another option\n            setOpenEndedState((prev) => ({\n                ...prev,\n                isSelected: false,\n                inputValue: '',\n            }))\n\n            if (shouldSkipSubmit) {\n                onSubmit(val)\n                if (isPreviewMode) {\n                    onPreviewSubmit(val)\n                }\n            }\n            return\n        }\n\n        if (isMultipleChoiceQuestion && isArray(selectedChoices)) {\n            if (selectedChoices.includes(val)) {\n                setSelectedChoices(selectedChoices.filter((choice) => choice !== val))\n            } else {\n                setSelectedChoices([...selectedChoices, val])\n            }\n        }\n    }\n\n    const handleOpenEndedInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        e.stopPropagation()\n        const newValue = e.currentTarget.value\n\n        setOpenEndedState((prev) => ({\n            ...prev,\n            inputValue: newValue,\n        }))\n\n        if (isSingleChoiceQuestion) {\n            setSelectedChoices(newValue)\n        }\n    }\n\n    const handleOpenEndedKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        e.stopPropagation()\n\n        // Handle Enter key to submit form if valid\n        if (e.key === 'Enter' && !isSubmitDisabled()) {\n            e.preventDefault()\n            handleSubmit()\n        }\n\n        // Handle Escape key to clear input and deselect\n        if (e.key === 'Escape') {\n            e.preventDefault()\n            setOpenEndedState((prev) => ({\n                ...prev,\n                isSelected: false,\n                inputValue: '',\n            }))\n            if (isSingleChoiceQuestion) {\n                setSelectedChoices(null)\n            }\n        }\n    }\n\n    const isSubmitDisabled = (): boolean => {\n        if (question.optional) {\n            return false\n        }\n        if (isNull(selectedChoices)) {\n            return true\n        }\n        if (isArray(selectedChoices)) {\n            if (!openEndedState.isSelected && selectedChoices.length === 0) {\n                return true\n            }\n        }\n        if (openEndedState.isSelected && openEndedState.inputValue.trim() === '') {\n            return true\n        }\n        return false\n    }\n\n    const handleSubmit = () => {\n        if (openEndedState.isSelected && isMultipleChoiceQuestion) {\n            if (isArray(selectedChoices)) {\n                isPreviewMode\n                    ? onPreviewSubmit([...selectedChoices, openEndedState.inputValue])\n                    : onSubmit([...selectedChoices, openEndedState.inputValue])\n            }\n        } else {\n            isPreviewMode ? onPreviewSubmit(selectedChoices) : onSubmit(selectedChoices)\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader question={question} forceDisableHtml={forceDisableHtml} />\n                <fieldset className=\"multiple-choice-options limit-height\">\n                    <legend className=\"sr-only\">\n                        {isMultipleChoiceQuestion ? ' Select all that apply' : ' Select one'}\n                    </legend>\n                    {choices.map((choice: string, idx: number) => {\n                        const isOpenChoice = !!question.hasOpenChoice && idx === question.choices.length - 1\n                        const inputId = `surveyQuestion${displayQuestionIndex}Choice${idx}`\n                        const openInputId = `${inputId}Open`\n\n                        const isChecked = isOpenChoice\n                            ? openEndedState.isSelected\n                            : isSingleChoiceQuestion\n                              ? selectedChoices === choice\n                              : isArray(selectedChoices) && selectedChoices.includes(choice)\n\n                        return (\n                            <label className={isOpenChoice ? 'choice-option-open' : ''} key={idx}>\n                                <div className=\"response-choice\">\n                                    <input\n                                        type={isSingleChoiceQuestion ? 'radio' : 'checkbox'}\n                                        name={inputId}\n                                        checked={isChecked}\n                                        onChange={() => handleChoiceChange(choice, isOpenChoice)}\n                                        id={inputId}\n                                        aria-controls={openInputId}\n                                    />\n                                    <span>{isOpenChoice ? `${choice}:` : choice}</span>\n                                </div>\n                                {isOpenChoice && (\n                                    <input\n                                        type=\"text\"\n                                        ref={openChoiceInputRef}\n                                        id={openInputId}\n                                        name={`question${displayQuestionIndex}Open`}\n                                        value={openEndedState.inputValue}\n                                        onKeyDown={handleOpenEndedKeyDown}\n                                        onInput={handleOpenEndedInputChange}\n                                        onClick={(e) => {\n                                            // Ensure the checkbox/radio gets checked when clicking the input\n                                            if (!openEndedState.isSelected) {\n                                                handleChoiceChange(choice, true)\n                                            }\n                                            e.stopPropagation()\n                                        }}\n                                        aria-label={`${choice} - please specify`}\n                                    />\n                                )}\n                            </label>\n                        )\n                    })}\n                </fieldset>\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={isSubmitDisabled()}\n                appearance={appearance}\n                onSubmit={handleSubmit}\n                onPreviewSubmit={handleSubmit}\n                skipSubmitButton={shouldSkipSubmit}\n            />\n        </Fragment>\n    )\n}\n\nconst threeScaleEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\nconst fiveScaleEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\nconst fiveScaleNumbers = [1, 2, 3, 4, 5]\nconst sevenScaleNumbers = [1, 2, 3, 4, 5, 6, 7]\nconst tenScaleNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfunction getScaleNumbers(scale: number): number[] {\n    switch (scale) {\n        case 5:\n            return fiveScaleNumbers\n        case 7:\n            return sevenScaleNumbers\n        case 10:\n            return tenScaleNumbers\n        default:\n            return fiveScaleNumbers\n    }\n}\n","import * as Preact from 'preact'\nimport { useContext, useEffect, useMemo, useRef, useState } from 'preact/hooks'\nimport { PostHog } from '../posthog-core'\nimport {\n    Survey,\n    SurveyCallback,\n    SurveyEventName,\n    SurveyEventProperties,\n    SurveyPosition,\n    SurveyQuestion,\n    SurveyQuestionBranchingType,\n    SurveyQuestionType,\n    SurveySchedule,\n    SurveyType,\n    SurveyWidgetType,\n    SurveyWithTypeAndAppearance,\n} from '../posthog-surveys-types'\nimport { addEventListener } from '../utils'\nimport { document as _document, window as _window } from '../utils/globals'\nimport {\n    doesSurveyActivateByAction,\n    doesSurveyActivateByEvent,\n    IN_APP_SURVEY_TYPES,\n    isSurveyRunning,\n    SURVEY_LOGGER as logger,\n} from '../utils/survey-utils'\nimport { isNull, isUndefined } from '@posthog/core'\nimport { uuidv7 } from '../uuidv7'\nimport { ConfirmationMessage } from './surveys/components/ConfirmationMessage'\nimport { Cancel } from './surveys/components/QuestionHeader'\nimport {\n    CommonQuestionProps,\n    LinkQuestion,\n    MultipleChoiceQuestion,\n    OpenTextQuestion,\n    RatingQuestion,\n} from './surveys/components/QuestionTypes'\nimport {\n    canActivateRepeatedly,\n    retrieveSurveyShadow,\n    defaultSurveyAppearance,\n    dismissedSurveyEvent,\n    doesSurveyDeviceTypesMatch,\n    doesSurveyMatchSelector,\n    doesSurveyUrlMatch,\n    getDisplayOrderQuestions,\n    getInProgressSurveyState,\n    getSurveyContainerClass,\n    getSurveyResponseKey,\n    getSurveySeen,\n    hasWaitPeriodPassed,\n    isSurveyInProgress,\n    sendSurveyEvent,\n    setInProgressSurveyState,\n    SurveyContext,\n    getSurveyStylesheet,\n    addSurveyCSSVariablesToElement,\n} from './surveys/surveys-extension-utils'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nconst DISPATCH_FEEDBACK_WIDGET_EVENT = 'ph:show_survey_widget'\nconst WIDGET_LISTENER_ATTRIBUTE = 'PHWidgetSurveyClickListener'\n\nfunction getRatingBucketForResponseValue(responseValue: number, scale: number) {\n    if (scale === 3) {\n        if (responseValue < 1 || responseValue > 3) {\n            throw new Error('The response must be in range 1-3')\n        }\n\n        return responseValue === 1 ? 'negative' : responseValue === 2 ? 'neutral' : 'positive'\n    } else if (scale === 5) {\n        if (responseValue < 1 || responseValue > 5) {\n            throw new Error('The response must be in range 1-5')\n        }\n\n        return responseValue <= 2 ? 'negative' : responseValue === 3 ? 'neutral' : 'positive'\n    } else if (scale === 7) {\n        if (responseValue < 1 || responseValue > 7) {\n            throw new Error('The response must be in range 1-7')\n        }\n\n        return responseValue <= 3 ? 'negative' : responseValue === 4 ? 'neutral' : 'positive'\n    } else if (scale === 10) {\n        if (responseValue < 0 || responseValue > 10) {\n            throw new Error('The response must be in range 0-10')\n        }\n\n        return responseValue <= 6 ? 'detractors' : responseValue <= 8 ? 'passives' : 'promoters'\n    }\n\n    throw new Error('The scale must be one of: 3, 5, 7, 10')\n}\n\nexport function getNextSurveyStep(\n    survey: Survey,\n    currentQuestionIndex: number,\n    response: string | string[] | number | null\n) {\n    const question = survey.questions[currentQuestionIndex]\n    const nextQuestionIndex = currentQuestionIndex + 1\n\n    if (!question.branching?.type) {\n        if (currentQuestionIndex === survey.questions.length - 1) {\n            return SurveyQuestionBranchingType.End\n        }\n\n        return nextQuestionIndex\n    }\n\n    if (question.branching.type === SurveyQuestionBranchingType.End) {\n        return SurveyQuestionBranchingType.End\n    } else if (question.branching.type === SurveyQuestionBranchingType.SpecificQuestion) {\n        if (Number.isInteger(question.branching.index)) {\n            return question.branching.index\n        }\n    } else if (question.branching.type === SurveyQuestionBranchingType.ResponseBased) {\n        // Single choice\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            // :KLUDGE: for now, look up the choiceIndex based on the response\n            // TODO: once QuestionTypes.MultipleChoiceQuestion is refactored, pass the selected choiceIndex into this method\n            let selectedChoiceIndex = question.choices.indexOf(`${response}`)\n\n            if (selectedChoiceIndex === -1 && question.hasOpenChoice) {\n                // if the response is not found in the choices, it must be the open choice,\n                // which is always the last choice\n                selectedChoiceIndex = question.choices.length - 1\n            }\n\n            if (question.branching?.responseValues?.hasOwnProperty(selectedChoiceIndex)) {\n                const nextStep = question.branching.responseValues[selectedChoiceIndex]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        } else if (question.type === SurveyQuestionType.Rating) {\n            if (typeof response !== 'number' || !Number.isInteger(response)) {\n                throw new Error('The response type must be an integer')\n            }\n\n            const ratingBucket = getRatingBucketForResponseValue(response, question.scale)\n\n            if (question.branching?.responseValues?.hasOwnProperty(ratingBucket)) {\n                const nextStep = question.branching.responseValues[ratingBucket]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        }\n\n        return nextQuestionIndex\n    }\n\n    logger.warn('Falling back to next question index due to unexpected branching type')\n    return nextQuestionIndex\n}\n\nconst SURVEY_NEXT_TO_TRIGGER_PARAMS = {\n    ESTIMATED_MIN_HEIGHT: 250,\n    HORIZONTAL_PADDING: 20,\n    TRIGGER_SPACING: 12,\n} as const\n\nfunction getNextToTriggerPosition(target: HTMLElement, surveyWidth: number): React.CSSProperties | null {\n    try {\n        const buttonRect = target.getBoundingClientRect()\n        const viewportHeight = window.innerHeight\n        const viewportWidth = window.innerWidth\n        const estimatedMinSurveyHeight = SURVEY_NEXT_TO_TRIGGER_PARAMS.ESTIMATED_MIN_HEIGHT\n        const buttonCenterX = buttonRect.left + buttonRect.width / 2\n        let left = buttonCenterX - surveyWidth / 2\n        const horizontalPadding = SURVEY_NEXT_TO_TRIGGER_PARAMS.HORIZONTAL_PADDING\n        if (left + surveyWidth > viewportWidth - horizontalPadding) {\n            left = viewportWidth - surveyWidth - horizontalPadding\n        }\n        if (left < horizontalPadding) {\n            left = horizontalPadding\n        }\n        const spacing = SURVEY_NEXT_TO_TRIGGER_PARAMS.TRIGGER_SPACING\n        const spaceBelow = viewportHeight - buttonRect.bottom\n        const spaceAbove = buttonRect.top\n        const showAbove = spaceBelow < estimatedMinSurveyHeight && spaceAbove > spaceBelow\n\n        return {\n            position: 'fixed',\n            top: showAbove ? 'auto' : `${buttonRect.bottom + spacing}px`,\n            left: `${left}px`,\n            right: 'auto',\n            bottom: showAbove ? `${viewportHeight - buttonRect.top + spacing}px` : 'auto',\n            zIndex: defaultSurveyAppearance.zIndex,\n        } satisfies React.CSSProperties\n    } catch (error) {\n        logger.warn('Failed to calculate trigger position:', error)\n        return null\n    }\n}\n\n// Keep in sync with posthog/constants.py on main repo\nconst SURVEY_TARGETING_FLAG_PREFIX = 'survey-targeting-'\n\nexport class SurveyManager {\n    private _posthog: PostHog\n    private _surveyInFocus: string | null\n    private _surveyTimeouts: Map<string, NodeJS.Timeout> = new Map()\n    private _widgetSelectorListeners: Map<string, { element: Element; listener: EventListener; survey: Survey }> =\n        new Map()\n\n    constructor(posthog: PostHog) {\n        this._posthog = posthog\n        // This is used to track the survey that is currently in focus. We only show one survey at a time.\n        this._surveyInFocus = null\n    }\n\n    private _clearSurveyTimeout(surveyId: string) {\n        const timeout = this._surveyTimeouts.get(surveyId)\n        if (timeout) {\n            clearTimeout(timeout)\n            this._surveyTimeouts.delete(surveyId)\n        }\n    }\n\n    public handlePopoverSurvey = (survey: Survey): void => {\n        this._clearSurveyTimeout(survey.id)\n        this._addSurveyToFocus(survey)\n        const delaySeconds = survey.appearance?.surveyPopupDelaySeconds || 0\n        const { shadow } = retrieveSurveyShadow(survey, this._posthog)\n        if (delaySeconds <= 0) {\n            return Preact.render(\n                <SurveyPopup\n                    posthog={this._posthog}\n                    survey={survey}\n                    removeSurveyFromFocus={this._removeSurveyFromFocus}\n                />,\n                shadow\n            )\n        }\n        const timeoutId = setTimeout(() => {\n            if (!doesSurveyUrlMatch(survey)) {\n                return this._removeSurveyFromFocus(survey)\n            }\n            // rendering with surveyPopupDelaySeconds = 0 because we're already handling the timeout here\n            Preact.render(\n                <SurveyPopup\n                    posthog={this._posthog}\n                    survey={{ ...survey, appearance: { ...survey.appearance, surveyPopupDelaySeconds: 0 } }}\n                    removeSurveyFromFocus={this._removeSurveyFromFocus}\n                />,\n                shadow\n            )\n        }, delaySeconds * 1000)\n        this._surveyTimeouts.set(survey.id, timeoutId)\n    }\n\n    private _handleWidget = (survey: Survey): void => {\n        // Ensure widget container exists if it doesn't\n        const { shadow, isNewlyCreated } = retrieveSurveyShadow(survey, this._posthog)\n\n        // If the widget is already rendered, do nothing. Otherwise the widget will be re-rendered every second\n        if (!isNewlyCreated) {\n            return\n        }\n\n        Preact.render(<FeedbackWidget posthog={this._posthog} survey={survey} key={survey.id} />, shadow)\n    }\n\n    private _removeWidgetSelectorListener = (survey: Pick<Survey, 'id' | 'type' | 'appearance'>): void => {\n        this._removeSurveyFromDom(survey)\n        const existing = this._widgetSelectorListeners.get(survey.id)\n        if (existing) {\n            existing.element.removeEventListener('click', existing.listener)\n            existing.element.removeAttribute(WIDGET_LISTENER_ATTRIBUTE)\n            this._widgetSelectorListeners.delete(survey.id)\n            logger.info(`Removed click listener for survey ${survey.id}`)\n        }\n    }\n\n    private _manageWidgetSelectorListener = (survey: Survey, selector: string): void => {\n        const currentElement = document.querySelector(selector)\n        const existingListenerData = this._widgetSelectorListeners.get(survey.id)\n\n        if (!currentElement) {\n            if (existingListenerData) {\n                this._removeWidgetSelectorListener(survey)\n            }\n            return\n        }\n\n        this._handleWidget(survey)\n\n        if (existingListenerData) {\n            // Listener exists, check if element changed\n            if (currentElement !== existingListenerData.element) {\n                logger.info(`Selector element changed for survey ${survey.id}. Re-attaching listener.`)\n                this._removeWidgetSelectorListener(survey)\n                // Continue to attach listener to the new element below\n            } else {\n                // Element is the same, listener already attached, do nothing\n                return\n            }\n        }\n\n        // Element found, and no listener attached (or it was just removed from old element)\n        if (!currentElement.hasAttribute(WIDGET_LISTENER_ATTRIBUTE)) {\n            const listener = (event: Event) => {\n                event.stopPropagation() // Prevent bubbling\n\n                const positionStyles =\n                    survey.appearance?.position === SurveyPosition.NextToTrigger\n                        ? getNextToTriggerPosition(\n                              event.currentTarget as HTMLElement,\n                              parseInt(survey.appearance?.maxWidth || defaultSurveyAppearance.maxWidth)\n                          )\n                        : {}\n\n                window.dispatchEvent(\n                    new CustomEvent(DISPATCH_FEEDBACK_WIDGET_EVENT, {\n                        detail: { surveyId: survey.id, position: positionStyles },\n                    })\n                )\n            }\n\n            addEventListener(currentElement, 'click', listener)\n            currentElement.setAttribute(WIDGET_LISTENER_ATTRIBUTE, 'true')\n            this._widgetSelectorListeners.set(survey.id, { element: currentElement, listener, survey })\n            logger.info(`Attached click listener for feedback button survey ${survey.id}`)\n        }\n    }\n\n    /**\n     * Sorts surveys by their appearance delay in ascending order. If a survey does not have an appearance delay,\n     * it is considered to have a delay of 0.\n     * @param surveys\n     * @returns The surveys sorted by their appearance delay\n     */\n    private _sortSurveysByAppearanceDelay(surveys: Survey[]): Survey[] {\n        return surveys.sort((a, b) => {\n            const isSurveyInProgressA = isSurveyInProgress(a)\n            const isSurveyInProgressB = isSurveyInProgress(b)\n            if (isSurveyInProgressA && !isSurveyInProgressB) {\n                return -1 // a comes before b (in progress surveys first)\n            }\n            if (!isSurveyInProgressA && isSurveyInProgressB) {\n                return 1 // a comes after b (in progress surveys first)\n            }\n            const aIsAlways = a.schedule === SurveySchedule.Always\n            const bIsAlways = b.schedule === SurveySchedule.Always\n\n            if (aIsAlways && !bIsAlways) {\n                return 1 // a comes after b\n            }\n            if (!aIsAlways && bIsAlways) {\n                return -1 // a comes before b\n            }\n            // If both are Always or neither is Always, sort by delay\n            return (a.appearance?.surveyPopupDelaySeconds || 0) - (b.appearance?.surveyPopupDelaySeconds || 0)\n        })\n    }\n\n    public renderPopover = (survey: Survey): void => {\n        const { shadow } = retrieveSurveyShadow(survey, this._posthog)\n        Preact.render(\n            <SurveyPopup posthog={this._posthog} survey={survey} removeSurveyFromFocus={this._removeSurveyFromFocus} />,\n            shadow\n        )\n    }\n\n    public renderSurvey = (survey: Survey, selector: Element): void => {\n        Preact.render(\n            <SurveyPopup\n                posthog={this._posthog}\n                survey={survey}\n                removeSurveyFromFocus={this._removeSurveyFromFocus}\n                isPopup={false}\n            />,\n            selector\n        )\n    }\n\n    private _isSurveyFeatureFlagEnabled(flagKey: string | null, flagVariant: string | undefined = undefined) {\n        if (!flagKey) {\n            return true\n        }\n        const isFeatureEnabled = !!this._posthog.featureFlags.isFeatureEnabled(flagKey, {\n            send_event: !flagKey.startsWith(SURVEY_TARGETING_FLAG_PREFIX),\n        })\n        let flagVariantCheck = true\n        if (flagVariant) {\n            const flagVariantValue = this._posthog.featureFlags.getFeatureFlag(flagKey, { send_event: false })\n            flagVariantCheck = flagVariantValue === flagVariant || flagVariant === 'any'\n        }\n        return isFeatureEnabled && flagVariantCheck\n    }\n\n    private _isSurveyConditionMatched(survey: Survey): boolean {\n        if (!survey.conditions) {\n            return true\n        }\n        return doesSurveyUrlMatch(survey) && doesSurveyDeviceTypesMatch(survey) && doesSurveyMatchSelector(survey)\n    }\n\n    private _internalFlagCheckSatisfied(survey: Survey): boolean {\n        return (\n            canActivateRepeatedly(survey) ||\n            this._isSurveyFeatureFlagEnabled(survey.internal_targeting_flag_key) ||\n            isSurveyInProgress(survey)\n        )\n    }\n\n    public checkSurveyEligibility(survey: Survey): { eligible: boolean; reason?: string } {\n        const eligibility = { eligible: true, reason: undefined as string | undefined }\n\n        if (!isSurveyRunning(survey)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey is not running. It was completed on ${survey.end_date}`\n            return eligibility\n        }\n\n        if (!IN_APP_SURVEY_TYPES.includes(survey.type)) {\n            eligibility.eligible = false\n            eligibility.reason = `Surveys of type ${survey.type} are never eligible to be shown in the app`\n            return eligibility\n        }\n\n        const linkedFlagVariant = survey.conditions?.linkedFlagVariant\n        if (!this._isSurveyFeatureFlagEnabled(survey.linked_flag_key, linkedFlagVariant)) {\n            eligibility.eligible = false\n            if (!linkedFlagVariant) {\n                eligibility.reason = `Survey linked feature flag is not enabled`\n            } else {\n                eligibility.reason = `Survey linked feature flag is not enabled for variant ${linkedFlagVariant}`\n            }\n            return eligibility\n        }\n\n        if (!this._isSurveyFeatureFlagEnabled(survey.targeting_flag_key)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey targeting feature flag is not enabled`\n            return eligibility\n        }\n\n        if (!this._internalFlagCheckSatisfied(survey)) {\n            eligibility.eligible = false\n            eligibility.reason =\n                'Survey internal targeting flag is not enabled and survey cannot activate repeatedly and survey is not in progress'\n            return eligibility\n        }\n\n        if (!hasWaitPeriodPassed(survey.conditions?.seenSurveyWaitPeriodInDays)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey wait period has not passed`\n            return eligibility\n        }\n\n        if (getSurveySeen(survey)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey has already been seen and it can't be activated again`\n            return eligibility\n        }\n\n        return eligibility\n    }\n\n    /**\n     * Surveys can be activated by events or actions. This method checks if the survey has events and actions,\n     * and if so, it checks if the survey has been activated.\n     * @param survey\n     */\n    private _hasActionOrEventTriggeredSurvey(survey: Survey): boolean {\n        if (!doesSurveyActivateByEvent(survey) && !doesSurveyActivateByAction(survey)) {\n            // If survey doesn't depend on events/actions, it's considered \"triggered\" by default\n            return true\n        }\n        const surveysActivatedByEventsOrActions: string[] | undefined =\n            this._posthog.surveys._surveyEventReceiver?.getSurveys()\n        return !!surveysActivatedByEventsOrActions?.includes(survey.id)\n    }\n\n    private _checkFlags(survey: Survey): boolean {\n        if (!survey.feature_flag_keys?.length) {\n            return true\n        }\n\n        return survey.feature_flag_keys.every(({ key, value }) => {\n            if (!key || !value) {\n                return true\n            }\n            return this._isSurveyFeatureFlagEnabled(value)\n        })\n    }\n\n    public getActiveMatchingSurveys = (callback: SurveyCallback, forceReload = false): void => {\n        this._posthog?.surveys.getSurveys((surveys) => {\n            const targetingMatchedSurveys = surveys.filter((survey) => {\n                const eligibility = this.checkSurveyEligibility(survey)\n                return (\n                    eligibility.eligible &&\n                    this._isSurveyConditionMatched(survey) &&\n                    this._hasActionOrEventTriggeredSurvey(survey) &&\n                    this._checkFlags(survey)\n                )\n            })\n\n            callback(targetingMatchedSurveys)\n        }, forceReload)\n    }\n\n    public callSurveysAndEvaluateDisplayLogic = (forceReload: boolean = false): void => {\n        this.getActiveMatchingSurveys((surveys) => {\n            const inAppSurveysWithDisplayLogic = surveys.filter(\n                (survey) => survey.type === SurveyType.Popover || survey.type === SurveyType.Widget\n            )\n\n            // Create a queue of surveys sorted by their appearance delay.  We will evaluate the display logic\n            // for each survey in the queue in order, and only display one survey at a time.\n            const inAppSurveysQueue = this._sortSurveysByAppearanceDelay(inAppSurveysWithDisplayLogic)\n\n            // Keep track of surveys processed this cycle to remove listeners for inactive ones\n            const activeSelectorSurveys = new Set<string>()\n\n            inAppSurveysQueue.forEach((survey) => {\n                // Widget Type Logic\n                if (survey.type === SurveyType.Widget) {\n                    if (survey.appearance?.widgetType === SurveyWidgetType.Tab) {\n                        this._handleWidget(survey)\n                        return\n                    }\n\n                    // For selector widget types, we need to manage the listener attachment/detachment dynamically\n                    if (\n                        survey.appearance?.widgetType === SurveyWidgetType.Selector &&\n                        survey.appearance?.widgetSelector\n                    ) {\n                        activeSelectorSurveys.add(survey.id)\n                        this._manageWidgetSelectorListener(survey, survey.appearance?.widgetSelector)\n                    }\n                }\n\n                // Popover Type Logic (only one shown at a time)\n                if (isNull(this._surveyInFocus) && survey.type === SurveyType.Popover) {\n                    this.handlePopoverSurvey(survey)\n                }\n            })\n\n            // Clean up listeners for surveys that are no longer active or matched\n            this._widgetSelectorListeners.forEach(({ survey }) => {\n                if (!activeSelectorSurveys.has(survey.id)) {\n                    this._removeWidgetSelectorListener(survey)\n                }\n            })\n        }, forceReload)\n    }\n\n    private _addSurveyToFocus = (survey: Pick<Survey, 'id'>): void => {\n        if (!isNull(this._surveyInFocus)) {\n            logger.error(`Survey ${this._surveyInFocus} already in focus. Cannot add survey ${survey.id}.`)\n        }\n        this._surveyInFocus = survey.id\n    }\n\n    private _removeSurveyFromDom(survey: Pick<Survey, 'id' | 'type' | 'appearance'>): void {\n        try {\n            const shadowContainer = document.querySelector(getSurveyContainerClass(survey, true))\n            if (shadowContainer?.shadowRoot) {\n                Preact.render(null, shadowContainer.shadowRoot)\n            }\n            shadowContainer?.remove()\n        } catch (error) {\n            logger.warn(`Failed to remove survey ${survey.id} from DOM:`, error)\n        }\n    }\n\n    private _removeSurveyFromFocus = (survey: SurveyWithTypeAndAppearance): void => {\n        if (this._surveyInFocus !== survey.id) {\n            logger.error(`Survey ${survey.id} is not in focus. Cannot remove survey ${survey.id}.`)\n        }\n        this._clearSurveyTimeout(survey.id)\n        this._surveyInFocus = null\n        this._removeSurveyFromDom(survey)\n    }\n\n    // Expose internal state and methods for testing\n    public getTestAPI() {\n        return {\n            addSurveyToFocus: this._addSurveyToFocus,\n            removeSurveyFromFocus: this._removeSurveyFromFocus,\n            surveyInFocus: this._surveyInFocus,\n            surveyTimeouts: this._surveyTimeouts,\n            handleWidget: this._handleWidget,\n            handlePopoverSurvey: this.handlePopoverSurvey,\n            manageWidgetSelectorListener: this._manageWidgetSelectorListener,\n            sortSurveysByAppearanceDelay: this._sortSurveysByAppearanceDelay,\n            checkFlags: this._checkFlags.bind(this),\n            isSurveyFeatureFlagEnabled: this._isSurveyFeatureFlagEnabled.bind(this),\n        }\n    }\n}\n\nconst DEFAULT_PREVIEW_POSITION_STYLES: React.CSSProperties = {\n    position: 'relative',\n    left: 'unset',\n    right: 'unset',\n    top: 'unset',\n    bottom: 'unset',\n    transform: 'unset',\n}\n\nexport const renderSurveysPreview = ({\n    survey,\n    parentElement,\n    previewPageIndex,\n    forceDisableHtml,\n    onPreviewSubmit,\n    positionStyles = DEFAULT_PREVIEW_POSITION_STYLES,\n}: {\n    survey: Survey\n    parentElement: HTMLElement\n    previewPageIndex: number\n    forceDisableHtml?: boolean\n    onPreviewSubmit?: (res: string | string[] | number | null) => void\n    posthog?: PostHog\n    positionStyles?: React.CSSProperties\n}) => {\n    const currentStyle = parentElement.querySelector('style[data-ph-survey-style]')\n    if (currentStyle) {\n        currentStyle.remove()\n    }\n    const stylesheet = getSurveyStylesheet()\n    if (stylesheet) {\n        parentElement.appendChild(stylesheet)\n        addSurveyCSSVariablesToElement(parentElement, survey.type, survey.appearance)\n    }\n    Preact.render(\n        <SurveyPopup\n            survey={survey}\n            forceDisableHtml={forceDisableHtml}\n            style={positionStyles}\n            onPreviewSubmit={onPreviewSubmit}\n            previewPageIndex={previewPageIndex}\n            removeSurveyFromFocus={() => {}}\n        />,\n        parentElement\n    )\n}\n\nexport const renderFeedbackWidgetPreview = ({\n    survey,\n    root,\n    forceDisableHtml,\n}: {\n    survey: Survey\n    root: HTMLElement\n    forceDisableHtml?: boolean\n}) => {\n    const stylesheet = getSurveyStylesheet()\n    if (stylesheet) {\n        root.appendChild(stylesheet)\n        addSurveyCSSVariablesToElement(root, survey.type, survey.appearance)\n    }\n\n    Preact.render(<FeedbackWidget forceDisableHtml={forceDisableHtml} survey={survey} readOnly={true} />, root)\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog, isSurveysEnabled: boolean | undefined) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n\n    const surveyManager = new SurveyManager(posthog)\n    if (posthog.config.disable_surveys_automatic_display) {\n        logger.info('Surveys automatic display is disabled. Skipping call surveys and evaluate display logic.')\n        return surveyManager\n    }\n\n    // NOTE: The `generateSurveys` function used to accept just a single parameter, without any `isSurveysEnabled` parameter.\n    // To keep compatibility with old clients, we'll consider `undefined` the same as `true`\n    if (isSurveysEnabled === false) {\n        logger.info('There are no surveys to load or Surveys is disabled in the project settings.')\n        return surveyManager\n    }\n\n    surveyManager.callSurveysAndEvaluateDisplayLogic(true)\n\n    // recalculate surveys every second to check if URL or selectors have changed\n    setInterval(() => {\n        surveyManager.callSurveysAndEvaluateDisplayLogic(false)\n    }, 1000)\n    return surveyManager\n}\n\ntype UseHideSurveyOnURLChangeProps = {\n    survey: Pick<Survey, 'id' | 'conditions' | 'type' | 'appearance'>\n    removeSurveyFromFocus?: (survey: SurveyWithTypeAndAppearance) => void\n    setSurveyVisible: (visible: boolean) => void\n    isPreviewMode?: boolean\n}\n\n/**\n * This hook handles URL-based survey visibility after the initial mount.\n * The initial URL check is handled by the `getActiveMatchingSurveys` method in  the `PostHogSurveys` class,\n * which ensures the URL matches before displaying a survey for the first time.\n * That is the method that is called every second to see if there's a matching survey.\n *\n * This separation of concerns means:\n * 1. Initial URL matching is done by `getActiveMatchingSurveys` before displaying the survey\n * 2. Subsequent URL changes are handled here to hide the survey as the user navigates\n */\nexport function useHideSurveyOnURLChange({\n    survey,\n    removeSurveyFromFocus = () => {},\n    setSurveyVisible,\n    isPreviewMode = false,\n}: UseHideSurveyOnURLChangeProps) {\n    useEffect(() => {\n        if (isPreviewMode || !survey.conditions?.url) {\n            return\n        }\n\n        const checkUrlMatch = () => {\n            const isSurveyTypeWidget = survey.type === SurveyType.Widget\n            const doesSurveyMatchUrlCondition = doesSurveyUrlMatch(survey)\n            const isSurveyWidgetTypeTab = survey.appearance?.widgetType === SurveyWidgetType.Tab && isSurveyTypeWidget\n\n            if (doesSurveyMatchUrlCondition) {\n                if (isSurveyWidgetTypeTab) {\n                    logger.info(`Showing survey ${survey.id} because it is a feedback button tab and URL matches`)\n                    setSurveyVisible(true)\n                }\n                return\n            }\n\n            logger.info(`Hiding survey ${survey.id} because URL does not match`)\n            setSurveyVisible(false)\n            return removeSurveyFromFocus(survey)\n        }\n\n        // Listen for browser back/forward browser history changes\n        addEventListener(window, 'popstate', checkUrlMatch)\n        // Listen for hash changes, for SPA frameworks that use hash-based routing\n        // The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).\n        addEventListener(window, 'hashchange', checkUrlMatch)\n\n        // Listen for SPA navigation\n        const originalPushState = window.history.pushState\n        const originalReplaceState = window.history.replaceState\n\n        window.history.pushState = function (...args) {\n            originalPushState.apply(this, args)\n            checkUrlMatch()\n        }\n\n        window.history.replaceState = function (...args) {\n            originalReplaceState.apply(this, args)\n            checkUrlMatch()\n        }\n\n        return () => {\n            window.removeEventListener('popstate', checkUrlMatch)\n            window.removeEventListener('hashchange', checkUrlMatch)\n            window.history.pushState = originalPushState\n            window.history.replaceState = originalReplaceState\n        }\n    }, [isPreviewMode, survey, removeSurveyFromFocus, setSurveyVisible])\n}\n\nexport function usePopupVisibility(\n    survey: Survey,\n    posthog: PostHog | undefined,\n    millisecondDelay: number,\n    isPreviewMode: boolean,\n    removeSurveyFromFocus: (survey: SurveyWithTypeAndAppearance) => void,\n    surveyContainerRef?: React.RefObject<HTMLDivElement>\n) {\n    const [isPopupVisible, setIsPopupVisible] = useState(\n        isPreviewMode || millisecondDelay === 0 || survey.type === SurveyType.ExternalSurvey\n    )\n    const [isSurveySent, setIsSurveySent] = useState(false)\n\n    const hidePopupWithViewTransition = () => {\n        const removeDOMAndHidePopup = () => {\n            if (survey.type === SurveyType.Popover) {\n                removeSurveyFromFocus(survey)\n            }\n            setIsPopupVisible(false)\n        }\n\n        if (!document.startViewTransition) {\n            removeDOMAndHidePopup()\n            return\n        }\n\n        const transition = document.startViewTransition(() => {\n            surveyContainerRef?.current?.remove()\n        })\n\n        transition.finished.then(() => {\n            setTimeout(() => {\n                removeDOMAndHidePopup()\n            }, 100)\n        })\n    }\n\n    const handleSurveyClosed = (event: CustomEvent) => {\n        if (event.detail.surveyId !== survey.id) {\n            return\n        }\n        hidePopupWithViewTransition()\n    }\n\n    useEffect(() => {\n        if (!posthog) {\n            logger.error('usePopupVisibility hook called without a PostHog instance.')\n            return\n        }\n        if (isPreviewMode) {\n            return\n        }\n\n        const handleSurveySent = (event: CustomEvent) => {\n            if (event.detail.surveyId !== survey.id) {\n                return\n            }\n            if (!survey.appearance?.displayThankYouMessage) {\n                return hidePopupWithViewTransition()\n            }\n            setIsSurveySent(true)\n            if (survey.appearance?.autoDisappear) {\n                setTimeout(() => {\n                    hidePopupWithViewTransition()\n                }, 5000)\n            }\n        }\n\n        const showSurvey = () => {\n            // check if the url is still matching, necessary for delayed surveys, as the URL may have changed\n            if (!doesSurveyUrlMatch(survey)) {\n                return\n            }\n            setIsPopupVisible(true)\n            window.dispatchEvent(new Event('PHSurveyShown'))\n            posthog.capture(SurveyEventName.SHOWN, {\n                [SurveyEventProperties.SURVEY_NAME]: survey.name,\n                [SurveyEventProperties.SURVEY_ID]: survey.id,\n                [SurveyEventProperties.SURVEY_ITERATION]: survey.current_iteration,\n                [SurveyEventProperties.SURVEY_ITERATION_START_DATE]: survey.current_iteration_start_date,\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n            })\n            localStorage.setItem('lastSeenSurveyDate', new Date().toISOString())\n        }\n\n        addEventListener(window, 'PHSurveyClosed', handleSurveyClosed as EventListener)\n        addEventListener(window, 'PHSurveySent', handleSurveySent as EventListener)\n\n        if (millisecondDelay > 0) {\n            // This path is only used for direct usage of SurveyPopup,\n            // not for surveys managed by SurveyManager\n            const timeoutId = setTimeout(showSurvey, millisecondDelay)\n            return () => {\n                clearTimeout(timeoutId)\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed as EventListener)\n                window.removeEventListener('PHSurveySent', handleSurveySent as EventListener)\n            }\n        } else {\n            // This is the path used for surveys managed by SurveyManager\n            showSurvey()\n            return () => {\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed as EventListener)\n                window.removeEventListener('PHSurveySent', handleSurveySent as EventListener)\n            }\n        }\n    }, [])\n\n    useHideSurveyOnURLChange({\n        survey,\n        removeSurveyFromFocus,\n        setSurveyVisible: setIsPopupVisible,\n        isPreviewMode,\n    })\n\n    return { isPopupVisible, isSurveySent, setIsPopupVisible, hidePopupWithViewTransition }\n}\n\ninterface SurveyPopupProps {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    style?: React.CSSProperties\n    previewPageIndex?: number | undefined\n    removeSurveyFromFocus?: (survey: SurveyWithTypeAndAppearance) => void\n    isPopup?: boolean\n    onPreviewSubmit?: (res: string | string[] | number | null) => void\n    onPopupSurveyDismissed?: () => void\n    onCloseConfirmationMessage?: () => void\n}\n\nfunction getPopoverPosition(\n    type: SurveyType,\n    position: SurveyPosition = SurveyPosition.Right,\n    surveyWidgetType?: SurveyWidgetType\n) {\n    if (type === SurveyType.ExternalSurvey) {\n        return {}\n    }\n\n    switch (position) {\n        case SurveyPosition.TopLeft:\n            return { top: '0', left: '0', transform: 'translate(30px, 30px)' }\n        case SurveyPosition.TopRight:\n            return { top: '0', right: '0', transform: 'translate(-30px, 30px)' }\n        case SurveyPosition.TopCenter:\n            return { top: '0', left: '50%', transform: 'translate(-50%, 30px)' }\n        case SurveyPosition.MiddleLeft:\n            return { top: '50%', left: '0', transform: 'translate(30px, -50%)' }\n        case SurveyPosition.MiddleRight:\n            return { top: '50%', right: '0', transform: 'translate(-30px, -50%)' }\n        case SurveyPosition.MiddleCenter:\n            return { top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }\n        case SurveyPosition.Left:\n            return { left: '30px' }\n        case SurveyPosition.Center:\n            return {\n                left: '50%',\n                transform: 'translateX(-50%)',\n            }\n        default:\n        case SurveyPosition.Right:\n            return { right: type === SurveyType.Widget && surveyWidgetType === SurveyWidgetType.Tab ? '60px' : '30px' }\n    }\n}\n\nexport function SurveyPopup({\n    survey,\n    forceDisableHtml,\n    posthog,\n    style = {},\n    previewPageIndex,\n    removeSurveyFromFocus = () => {},\n    isPopup = true,\n    onPreviewSubmit = () => {},\n    onPopupSurveyDismissed = () => {},\n    onCloseConfirmationMessage = () => {},\n}: SurveyPopupProps) {\n    const surveyContainerRef = useRef<HTMLDivElement>(null)\n    const isPreviewMode = Number.isInteger(previewPageIndex)\n    // NB: The client-side code passes the millisecondDelay in seconds, but setTimeout expects milliseconds, so we multiply by 1000\n    const surveyPopupDelayMilliseconds = survey.appearance?.surveyPopupDelaySeconds\n        ? survey.appearance.surveyPopupDelaySeconds * 1000\n        : 0\n    const { isPopupVisible, isSurveySent, hidePopupWithViewTransition } = usePopupVisibility(\n        survey,\n        posthog,\n        surveyPopupDelayMilliseconds,\n        isPreviewMode,\n        removeSurveyFromFocus,\n        surveyContainerRef\n    )\n\n    const shouldShowConfirmation = isSurveySent || previewPageIndex === survey.questions.length\n    const surveyContextValue = useMemo(() => {\n        const getInProgressSurvey = getInProgressSurveyState(survey)\n        return {\n            isPreviewMode,\n            previewPageIndex: previewPageIndex,\n            onPopupSurveyDismissed: () => {\n                dismissedSurveyEvent(survey, posthog, isPreviewMode)\n                onPopupSurveyDismissed()\n            },\n            isPopup: isPopup || false,\n            surveySubmissionId: getInProgressSurvey?.surveySubmissionId || uuidv7(),\n            onPreviewSubmit,\n            posthog,\n        }\n    }, [isPreviewMode, previewPageIndex, isPopup, posthog, survey, onPopupSurveyDismissed, onPreviewSubmit])\n\n    if (!isPopupVisible) {\n        return null\n    }\n\n    return (\n        <SurveyContext.Provider value={surveyContextValue}>\n            <div\n                className=\"ph-survey\"\n                style={{\n                    ...getPopoverPosition(survey.type, survey.appearance?.position, survey.appearance?.widgetType),\n                    ...style,\n                }}\n                ref={surveyContainerRef}\n            >\n                {!shouldShowConfirmation ? (\n                    <Questions survey={survey} forceDisableHtml={!!forceDisableHtml} posthog={posthog} />\n                ) : (\n                    <ConfirmationMessage\n                        header={survey.appearance?.thankYouMessageHeader || 'Thank you!'}\n                        description={survey.appearance?.thankYouMessageDescription || ''}\n                        forceDisableHtml={!!forceDisableHtml}\n                        contentType={survey.appearance?.thankYouMessageDescriptionContentType}\n                        appearance={survey.appearance || defaultSurveyAppearance}\n                        onClose={() => {\n                            hidePopupWithViewTransition()\n                            onCloseConfirmationMessage()\n                        }}\n                    />\n                )}\n            </div>\n        </SurveyContext.Provider>\n    )\n}\n\nexport function Questions({\n    survey,\n    forceDisableHtml,\n    posthog,\n}: {\n    survey: Survey\n    forceDisableHtml: boolean\n    posthog?: PostHog\n}) {\n    // Initialize responses from localStorage or empty object\n    const [questionsResponses, setQuestionsResponses] = useState(() => {\n        const inProgressSurveyData = getInProgressSurveyState(survey)\n        if (inProgressSurveyData?.responses) {\n            logger.info('Survey is already in progress, filling in initial responses')\n        }\n        return inProgressSurveyData?.responses || {}\n    })\n    const { previewPageIndex, onPopupSurveyDismissed, isPopup, onPreviewSubmit, surveySubmissionId, isPreviewMode } =\n        useContext(SurveyContext)\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(() => {\n        const inProgressSurveyData = getInProgressSurveyState(survey)\n        return previewPageIndex || inProgressSurveyData?.lastQuestionIndex || 0\n    })\n    const surveyQuestions = useMemo(() => getDisplayOrderQuestions(survey), [survey])\n\n    // Sync preview state\n    useEffect(() => {\n        if (isPreviewMode && !isUndefined(previewPageIndex)) {\n            setCurrentQuestionIndex(previewPageIndex)\n        }\n    }, [previewPageIndex, isPreviewMode])\n\n    const onNextButtonClick = ({\n        res,\n        displayQuestionIndex,\n        questionId,\n    }: {\n        res: string | string[] | number | null\n        displayQuestionIndex: number\n        questionId?: string\n    }) => {\n        if (!posthog) {\n            logger.error('onNextButtonClick called without a PostHog instance.')\n            return\n        }\n\n        if (!questionId) {\n            logger.error('onNextButtonClick called without a questionId.')\n            return\n        }\n\n        const responseKey = getSurveyResponseKey(questionId)\n\n        const newResponses = { ...questionsResponses, [responseKey]: res }\n        setQuestionsResponses(newResponses)\n\n        const nextStep = getNextSurveyStep(survey, displayQuestionIndex, res)\n        const isSurveyCompleted = nextStep === SurveyQuestionBranchingType.End\n\n        if (!isSurveyCompleted) {\n            setCurrentQuestionIndex(nextStep)\n            setInProgressSurveyState(survey, {\n                surveySubmissionId: surveySubmissionId,\n                responses: newResponses,\n                lastQuestionIndex: nextStep,\n            })\n        }\n\n        // If partial responses are enabled, send the survey sent event with with the responses,\n        // otherwise only send the event when the survey is completed\n        if (survey.enable_partial_responses || isSurveyCompleted) {\n            sendSurveyEvent({\n                responses: newResponses,\n                survey,\n                surveySubmissionId,\n                isSurveyCompleted,\n                posthog,\n            })\n        }\n    }\n\n    const currentQuestion = surveyQuestions.at(currentQuestionIndex)\n\n    if (!currentQuestion) {\n        return null\n    }\n\n    return (\n        <form className=\"survey-form\" name=\"surveyForm\">\n            {isPopup && (\n                <Cancel\n                    onClick={() => {\n                        onPopupSurveyDismissed()\n                    }}\n                />\n            )}\n            <div className=\"survey-box\">\n                {getQuestionComponent({\n                    question: currentQuestion,\n                    forceDisableHtml,\n                    displayQuestionIndex: currentQuestionIndex,\n                    appearance: survey.appearance || defaultSurveyAppearance,\n                    onSubmit: (res) =>\n                        onNextButtonClick({\n                            res,\n                            displayQuestionIndex: currentQuestionIndex,\n                            questionId: currentQuestion.id,\n                        }),\n                    onPreviewSubmit,\n                    initialValue: currentQuestion.id\n                        ? questionsResponses[getSurveyResponseKey(currentQuestion.id)]\n                        : undefined,\n                })}\n            </div>\n        </form>\n    )\n}\n\nexport function FeedbackWidget({\n    survey,\n    forceDisableHtml,\n    posthog,\n    readOnly,\n}: {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    readOnly?: boolean\n}): JSX.Element | null {\n    const [isFeedbackButtonVisible, setIsFeedbackButtonVisible] = useState(true)\n    const [showSurvey, setShowSurvey] = useState(false)\n    const [styleOverrides, setStyleOverrides] = useState<React.CSSProperties>({})\n\n    const toggleSurvey = () => {\n        setShowSurvey(!showSurvey)\n    }\n\n    useEffect(() => {\n        if (!posthog) {\n            logger.error('FeedbackWidget called without a PostHog instance.')\n            return\n        }\n        if (readOnly) {\n            return\n        }\n\n        if (survey.appearance?.widgetType === 'tab') {\n            setStyleOverrides({\n                top: '50%',\n                bottom: 'auto',\n            })\n        }\n        const handleShowSurvey = (event: Event) => {\n            const customEvent = event as CustomEvent\n            // Check if the event is for this specific survey instance\n            if (customEvent.detail?.surveyId === survey.id) {\n                logger.info(`Received show event for feedback button survey ${survey.id}`)\n                setStyleOverrides(customEvent.detail.position || {})\n                toggleSurvey()\n            }\n        }\n\n        addEventListener(window, DISPATCH_FEEDBACK_WIDGET_EVENT, handleShowSurvey)\n\n        // Cleanup listener on component unmount\n        return () => {\n            window.removeEventListener(DISPATCH_FEEDBACK_WIDGET_EVENT, handleShowSurvey)\n        }\n    }, [\n        posthog,\n        readOnly,\n        survey.id,\n        survey.appearance?.widgetType,\n        survey.appearance?.widgetSelector,\n        survey.appearance?.borderColor,\n    ])\n\n    useHideSurveyOnURLChange({\n        survey,\n        setSurveyVisible: setIsFeedbackButtonVisible,\n    })\n\n    if (!isFeedbackButtonVisible) {\n        return null\n    }\n\n    const resetShowSurvey = () => {\n        // hide the feedback button after answering or closing the survey if it's not always show\n        if (survey.schedule !== SurveySchedule.Always) {\n            setIsFeedbackButtonVisible(false)\n        }\n        // important so our view transition has time to run\n        setTimeout(() => {\n            setShowSurvey(false)\n        }, 200)\n    }\n\n    return (\n        <Preact.Fragment>\n            {survey.appearance?.widgetType === 'tab' && (\n                <button className=\"ph-survey-widget-tab\" onClick={toggleSurvey} disabled={readOnly}>\n                    {survey.appearance?.widgetLabel || ''}\n                </button>\n            )}\n            {showSurvey && (\n                <SurveyPopup\n                    posthog={posthog}\n                    survey={survey}\n                    forceDisableHtml={forceDisableHtml}\n                    style={styleOverrides}\n                    onPopupSurveyDismissed={resetShowSurvey}\n                    onCloseConfirmationMessage={resetShowSurvey}\n                />\n            )}\n        </Preact.Fragment>\n    )\n}\n\ninterface GetQuestionComponentProps extends CommonQuestionProps {\n    question: SurveyQuestion\n    displayQuestionIndex: number\n}\n\nconst getQuestionComponent = ({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: GetQuestionComponentProps): JSX.Element | null => {\n    const baseProps = {\n        forceDisableHtml,\n        appearance,\n        onPreviewSubmit: (res: string | string[] | number | null) => {\n            onPreviewSubmit(res)\n        },\n        onSubmit: (res: string | string[] | number | null) => {\n            onSubmit(res)\n        },\n        initialValue,\n        displayQuestionIndex,\n    }\n\n    switch (question.type) {\n        case SurveyQuestionType.Open:\n            return <OpenTextQuestion {...baseProps} question={question} key={question.id} />\n        case SurveyQuestionType.Link:\n            return <LinkQuestion {...baseProps} question={question} key={question.id} />\n        case SurveyQuestionType.Rating:\n            return <RatingQuestion {...baseProps} question={question} key={question.id} />\n        case SurveyQuestionType.SingleChoice:\n        case SurveyQuestionType.MultipleChoice:\n            return <MultipleChoiceQuestion {...baseProps} question={question} key={question.id} />\n        default:\n            logger.error(`Unsupported question type: ${(question as any).type}`)\n            return null\n    }\n}\n"],"names":["c","s","a","t","r","u","i","o","f","e","n","__b","__r","v","diffed","l","__c","m","unmount","d","__h","__H","__","length","push","__V","h","B","__N","setState","filter","every","call","this","forEach","props","shouldComponentUpdate","componentWillUpdate","__e","p","__s","z","_","F","current","q","context","sub","value","b","shift","__P","k","w","__v","requestAnimationFrame","j","some","g","clearTimeout","cancelAnimationFrame","setTimeout","SurveyWidgetType","SurveyPosition","SurveyType","SurveyQuestionType","SurveyQuestionBranchingType","SurveySchedule","SurveyEventName","SurveyEventProperties","win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","assignableWindow","nativeIsArray","Array","isArray","type_utils_toString","Object","prototype","toString","obj","isUndefined","x","isString","isNull","isNumber","_createLogger","prefix","logger","_log","level","console","consoleLog","_len","arguments","args","_key","info","_len2","_key2","warn","_len3","_key3","error","_len4","_key4","critical","_len5","_key5","uninitializedWarning","methodName","createLogger","additionalPrefix","addEventListener","element","event","callback","options","capture","passive","SURVEY_LOGGER","SURVEY_SEEN_PREFIX","SURVEY_IN_PROGRESS_PREFIX","getSurveyInteractionProperty","survey","action","surveyProperty","id","current_iteration","getSurveySeenKey","surveySeenKey","setSurveySeenOnLocalStorage","localStorage","getItem","setItem","Math","trunc","ceil","floor","Number","isInteger","isFinite","DIGITS","UUID","constructor","bytes","TypeError","fromFieldsV7","unixTsMs","randA","randBHi","randBLo","RangeError","Uint8Array","pow","text","charAt","Error","clone","slice","equals","other","compareTo","diff","sign","V7Generator","_timestamp","_counter","_random","DefaultRandom","generate","generateOrAbort","valueAfterReset","ts","Date","now","_resetCounter","nextUint32","defaultGenerator","getRandomValues","buffer","UUIDV7_DENY_WEAK_RNG","random","crypto","_buffer","Uint32Array","_cursor","Infinity","uuidv7","uuidv7obj","sendBeacon","isMatchingRegex","pattern","str","RegExp","_unused","isValidRegex","test","_unused2","propertyComparisons","exact","targets","values","target","is_not","regex","not_regex","icontains","map","toLowerCase","includes","not_icontains","_window","_document","getSurveyResponseKey","questionId","BLACK_TEXT_COLOR","defaultSurveyAppearance","fontFamily","backgroundColor","submitButtonColor","submitButtonTextColor","ratingButtonColor","ratingButtonActiveColor","borderColor","placeholder","whiteLabel","displayThankYouMessage","thankYouMessageHeader","position","Right","widgetType","Tab","widgetLabel","widgetColor","zIndex","disabledButtonOpacity","maxWidth","textSubtleColor","boxPadding","boxShadow","borderRadius","shuffleQuestions","surveyPopupDelaySeconds","outlineColor","inputBackground","inputTextColor","scrollbarThumbColor","scrollbarTrackColor","addSurveyCSSVariablesToElement","type","appearance","effectiveAppearance","_extends","hostStyle","style","surveyHasBottomBorder","Center","Left","Widget","setProperty","defaultFontStack","getFontFamily","getContrastingTextColor","hex2rgb","hexColor","replace","parseInt","color","rgb","startsWith","nameColorToHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorMatch","match","sqrt","getSurveyStylesheet","posthog","stylesheet","prepareStylesheet","innerText","createElement","setAttribute","getSurveyResponseValue","responses","response","sendSurveyEvent","_ref","surveySubmissionId","isSurveyCompleted","SENT","SURVEY_NAME","name","SURVEY_ID","SURVEY_ITERATION","SURVEY_ITERATION_START_DATE","current_iteration_start_date","SURVEY_QUESTIONS","questions","question","SURVEY_SUBMISSION_ID","SURVEY_COMPLETED","sessionRecordingUrl","get_session_replay_url","$set","dispatchEvent","CustomEvent","detail","surveyId","clearInProgressSurveyState","dismissedSurveyEvent","readOnly","inProgressSurvey","getInProgressSurveyState","DISMISSED","SURVEY_PARTIALLY_COMPLETED","resp","isNullish","shuffle","array","sort","reverseIfUnshuffled","unshuffled","shuffled","val","index","reverse","getDisplayOrderQuestions","enable_partial_responses","SurveyContext","createContext","isPreviewMode","previewPageIndex","onPopupSurveyDismissed","isPopup","onPreviewSubmit","useSurveyContext","useContext","renderChildrenAsTextOrHtml","_ref2","component","children","renderAsHtml","cloneElement","dangerouslySetInnerHTML","__html","doesSurveyUrlMatch","_survey$conditions4","_window$location","_survey$conditions5","conditions","url","href","matchType","defaultMatchType","urlMatchType","getInProgressSurveyStateKey","key","setInProgressSurveyState","state","JSON","stringify","stateString","parse","removeItem","satisfiedEmoji","_jsx","className","xmlns","height","viewBox","width","neutralEmoji","dissatisfiedEmoji","veryDissatisfiedEmoji","verySatisfiedEmoji","cancelSVG","_jsxs","fill","IconPosthogLogo","maskType","maskUnits","y","mask","transform","PostHogLogo","rel","BottomSection","submitDisabled","onSubmit","link","skipSubmitButton","disabled","onClick","open","QuestionHeader","forceDisableHtml","htmlFor","class","Open","description","descriptionContentType","Cancel","ConfirmationMessage","header","contentType","onClose","useEffect","handleKeyDown","preventDefault","removeEventListener","role","tabIndex","thankYouMessageCloseButtonText","isValidStringArray","item","OpenTextQuestion","displayQuestionIndex","initialValue","inputRef","useRef","setText","useState","_inputRef$current","focus","Fragment","ref","rows","onInput","currentTarget","stopPropagation","onKeyDown","buttonText","optional","LinkQuestion","RatingQuestion","_ref3","scale","starting","rating","setRating","handleSubmit","num","display","threeScaleEmojis","fiveScaleEmojis","emoji","idx","gridTemplateColumns","getScaleNumbers","number","RatingButton","active","setActiveNumber","lowerBoundLabel","upperBoundLabel","submitButtonText","_ref4","MultipleChoiceQuestion","_ref5","openChoiceInputRef","choices","useMemo","shuffleOptions","displayOrderChoices","openEndedChoice","hasOpenChoice","pop","shuffledOptions","getDisplayOrderChoices","selectedChoices","setSelectedChoices","initializeSelectedChoices","questionType","SingleChoice","openEndedState","setOpenEndedState","initializeOpenEndedState","isSelected","inputValue","openEndedValue","find","choice","isSingleChoiceQuestion","isMultipleChoiceQuestion","MultipleChoice","shouldSkipSubmit","handleChoiceChange","isOpenChoice","newOpenSelected","prev","_openChoiceInputRef$c","handleOpenEndedInputChange","newValue","handleOpenEndedKeyDown","isSubmitDisabled","trim","inputId","openInputId","isChecked","checked","onChange","fiveScaleNumbers","sevenScaleNumbers","tenScaleNumbers","DISPATCH_FEEDBACK_WIDGET_EVENT","getNextSurveyStep","currentQuestionIndex","_question$branching","nextQuestionIndex","branching","End","SpecificQuestion","ResponseBased","_question$branching2","selectedChoiceIndex","indexOf","responseValues","hasOwnProperty","nextStep","Rating","_question$branching3","ratingBucket","responseValue","getRatingBucketForResponseValue","DEFAULT_PREVIEW_POSITION_STYLES","left","right","top","bottom","renderSurveysPreview","parentElement","positionStyles","currentStyle","querySelector","remove","appendChild","Preact","SurveyPopup","removeSurveyFromFocus","renderFeedbackWidgetPreview","root","FeedbackWidget","useHideSurveyOnURLChange","setSurveyVisible","_survey$conditions3","checkUrlMatch","_survey$appearance8","isSurveyTypeWidget","doesSurveyMatchUrlCondition","isSurveyWidgetTypeTab","originalPushState","history","pushState","originalReplaceState","replaceState","apply","getPopoverPosition","surveyWidgetType","ExternalSurvey","TopLeft","TopRight","TopCenter","MiddleLeft","MiddleRight","MiddleCenter","_ref6","_survey$appearance1","_survey$appearance10","_survey$appearance11","_survey$appearance12","_survey$appearance13","_survey$appearance14","onCloseConfirmationMessage","surveyContainerRef","surveyPopupDelayMilliseconds","isPopupVisible","isSurveySent","hidePopupWithViewTransition","millisecondDelay","setIsPopupVisible","setIsSurveySent","removeDOMAndHidePopup","Popover","startViewTransition","_surveyContainerRef$c","finished","then","handleSurveyClosed","handleSurveySent","_survey$appearance9","_survey$appearance0","autoDisappear","showSurvey","Event","SHOWN","toISOString","timeoutId","usePopupVisibility","shouldShowConfirmation","surveyContextValue","getInProgressSurvey","Provider","thankYouMessageDescription","thankYouMessageDescriptionContentType","Questions","_ref7","questionsResponses","setQuestionsResponses","inProgressSurveyData","setCurrentQuestionIndex","lastQuestionIndex","surveyQuestions","currentQuestion","at","getQuestionComponent","res","_ref8","responseKey","newResponses","onNextButtonClick","_ref9","_survey$appearance16","_survey$appearance17","_survey$appearance18","_survey$appearance19","_survey$appearance20","isFeedbackButtonVisible","setIsFeedbackButtonVisible","setShowSurvey","styleOverrides","setStyleOverrides","toggleSurvey","_survey$appearance15","handleShowSurvey","_customEvent$detail","customEvent","widgetSelector","resetShowSurvey","schedule","Always","_ref0","baseProps","_createElement","Link"],"mappings":"wNACa,oBAWAA,EAAgC,CAAA,EAChCC,EAAY,GACZC,EACZ,06CAd2B,sCAAA,uoBAML,8EAFK,sFAAA,qIAEL,gTAFK,oeAEL,qEAAA,iFAAA,mxCAJO,iBAFF,kyDASF,sGATE,yzGCE5B,IAAIC,EAGAC,EAGAC,EAiBAC,EAdAC,EAAc,EAGdC,EAAoB,GAEpBR,EAAQ,GAERS,EAAgBC,EAApBC,IACIT,EAAkBQ,EAAtBE,IACIC,EAAeH,EAAQI,OACvBC,EAAYL,EAAhBM,IACIC,EAAmBP,EAAQQ,QAqG/B,SAASC,EAAahB,EAAOE,GACxBK,EAAeU,KAClBV,EAAAU,IAAchB,EAAkBD,EAAOI,GAAeF,GAEvDE,EAAc,EAOd,IAAMD,EACLF,EAAgBiB,MACfjB,EAAgBiB,IAAW,CAC3BC,GAAO,GACPF,IAAiB,KAMnB,OAHIjB,GAASG,EAAKgB,GAAOC,QACxBjB,EAAAgB,GAAYE,KAAK,CAAEC,IAAezB,IAE5BM,EAAAgB,GAAYnB,EACnB,CAKM,SAASuB,EAAShB,GAExB,OADAH,EAAc,EAUC,SAAWG,EAASL,EAAcC,GAEjD,IAAMC,EAAYY,EAAahB,IAAgB,GAE/C,GADAI,EAAUJ,EAAWO,GAChBH,EAALS,MACCT,EAAAe,GAAmB,CACVK,QAAA,EAA0BtB,GAElC,SAAAK,GACC,IAAMP,EAAeI,EAAAqB,IAClBrB,EAASqB,IAAY,GACrBrB,EAASe,GAAQ,GACdlB,EAAYG,EAAUJ,EAASA,EAAcO,GAE/CP,IAAiBC,IACpBG,EAASqB,IAAc,CAACxB,EAAWG,EAASe,GAAQ,IACpDf,EAASS,IAAYa,SAAS,CAAA,GAE/B,GAGFtB,EAAAS,IAAuBZ,GAElBA,EAAiBC,GAAkB,CAgC9B,IAAAG,EAAT,SAAyBE,EAAGP,EAAGC,GAC9B,IAAKG,EAADS,IAAAK,IAA+B,OAAA,EAEnC,IAAMhB,EAAaE,EAASS,IAA0BK,IAAAC,GAAAQ,QACrD,SAAApB,GAAK,OAAAA,EAAJM,GAAA,IAKF,GAHsBX,EAAW0B,OAAM,SAAArB,GAAK,OAACA,EAADkB,GAAJ,IAIvC,OAAO5B,GAAUA,EAAQgC,KAAKC,KAAMvB,EAAGP,EAAGC,GAM3C,IAAIE,GAAA,EAUJ,OATAD,EAAW6B,SAAQ,SAAAxB,GAClB,GAAIA,EAAAkB,IAAqB,CACxB,IAAMzB,EAAeO,EAAAY,GAAgB,GACrCZ,EAAQY,GAAUZ,EAClBkB,IAAAlB,EAAAkB,WACIzB,IAAiBO,EAAQY,GAAQ,KAAIhB,GAAA,EACzC,CACD,OAEMA,GAAgBC,EAASS,IAAYmB,QAAUzB,MACnDV,GACCA,EAAQgC,KAAKC,KAAMvB,EAAGP,EAAGC,GAG7B,EA9DDA,EAAiBC,GAAA,EACjB,IAAIL,EAAUI,EAAiBgC,sBACzB3B,EAAUL,EAAiBiC,oBAKjCjC,EAAiBiC,oBAAsB,SAAU3B,EAAGP,EAAGC,GACtD,GAAI6B,KAAaK,IAAA,CAChB,IAAIjC,EAAML,EAEVA,OAAA,EACAQ,EAAgBE,EAAGP,EAAGC,GACtBJ,EAAUK,CACV,CAEGI,GAASA,EAAQuB,KAAKC,KAAMvB,EAAGP,EAAGC,EACtC,EA+CDA,EAAiBgC,sBAAwB5B,CACzC,CAGF,OAAOD,EAAAqB,KAAwBrB,EAAxBe,EACP,CAtGOrB,CAAW0B,GAAgBjB,EAClC,CA2Ge,SAAA6B,EAAUlC,EAAUC,GAEnC,IAAMC,EAAQY,EAAahB,IAAgB,IACtCO,EAAD8B,KAAyBC,GAAYlC,EAADc,IAAcf,KACrDC,EAAKe,GAAUjB,EACfE,EAAMD,EAAeA,EAErBF,EAAAiB,IAAAD,IAAyCI,KAAKjB,GAE/C,CAiBe,SAAAmC,GAAOhC,GAEtB,OADAH,EAAc,EACPoC,IAAQ,WAAO,MAAA,CAAEC,QAASlC,EAAlB,GAAmC,GAClD,CAqBA,SAMeiC,GAAQjC,EAASN,GAEhC,IAAMC,EAAQc,EAAahB,IAAgB,GAC3C,OAAIsC,GAAYpC,EAAagB,IAAAjB,IAC5BC,EAAKoB,IAAiBf,IACtBL,EAAMC,EAAeF,EACrBC,EAAAe,IAAiBV,EACVL,EAAPoB,KAGMpB,EAAPiB,EACA,CAcM,SAASuB,GAAWnC,GAC1B,IAAML,EAAWD,EAAiB0C,QAAQpC,EAAzBM,KAKXV,EAAQa,EAAahB,IAAgB,GAK3C,OADAG,EAAKN,EAAYU,EACZL,GAEe,MAAhBC,EAAKgB,KACRhB,EAAKgB,IAAA,EACLjB,EAAS0C,IAAI3C,IAEPC,EAAS8B,MAAMa,OANAtC,EAEtBY,EAKA,CAqDD,SAAS2B,KAER,IADA,IAAI9C,EACIA,EAAYK,EAAkB0C,SACrC,GAAK/C,EAAwBgD,KAAChD,EAA9BkB,IACA,IACClB,EAAAkB,IAAAD,IAAkCc,QAAQkB,IAC1CjD,EAASkB,IAAAD,IAAyBc,QAAQmB,IAC1ClD,EAASkB,IAAAD,IAA2B,EAIpC,OAHQhB,GACRD,EAAAkB,IAAAD,IAAoC,GACpCV,EAAO4B,IAAalC,EAAGD,EACvBmD,IAAA,CAEF,CA9YD5C,EAAOC,IAAS,SAAAD,GACfN,EAAmB,KACfK,GAAeA,EAAcC,EACjC,EAEDA,EAAAE,IAAkB,SAAAF,GACbR,GAAiBA,EAAgBQ,GAGrCP,EAAe,EAEf,IAAMG,GAHNF,EAAmBM,EAAnBM,KAGWK,IACPf,IACCD,IAAsBD,GACzBE,EAAAc,IAAwB,GACxBhB,EAAAgB,IAAoC,GACpCd,EAAAgB,GAAYY,SAAQ,SAAAxB,GACfA,EAAJkB,MACClB,EAAAY,GAAkBZ,EAAlBkB,KAEDlB,EAAAe,IAAyBzB,EACzBU,EAAAkB,IAAsBlB,EAASJ,OAAA,CAC/B,MAEDA,EAAKc,IAAiBc,QAAQkB,IAC9B9C,EAAAc,IAAsBc,QAAQmB,IAC9B/C,EAAAc,IAAwB,GACxBjB,EAAe,IAGjBE,EAAoBD,CACpB,EAEDM,EAAQI,OAAS,SAAAX,GACZU,GAAcA,EAAaV,GAE/B,IAAMI,EAAIJ,EAAHa,IACHT,GAAKA,EAATc,MACKd,EAACc,IAAyBD,IAAAG,SA4YR,IA5Y2Bf,EAAkBgB,KAAKjB,IA4Y7CD,IAAYI,EAAQ6C,yBAC/CjD,EAAUI,EAAQ6C,wBACNC,IAAgBP,KA7Y5B1C,EAACc,IAAAC,GAAeY,SAAQ,SAAAxB,GACnBA,EAASJ,IACZI,EAAAW,IAAiBX,EAASJ,GAEvBI,EAAAe,MAA2BzB,IAC9BU,EAAQY,GAAUZ,EAAlBe,KAEDf,EAASJ,SACTI,EAAQe,IAAiBzB,CACzB,KAEFK,EAAoBD,EAAmB,IACvC,EAEDM,EAAAM,IAAkB,SAACb,EAAOC,GACzBA,EAAYqD,MAAK,SAAAtD,GAChB,IACCA,EAASiB,IAAkBc,QAAQkB,IACnCjD,EAAAiB,IAA6BjB,EAAAiB,IAA2BU,QAAO,SAAApB,GAAE,OAChEA,EAAAY,IAAY+B,GAAa3C,EADuC,GASjE,OANQL,GACRD,EAAYqD,MAAK,SAAA/C,GACZA,EAAoBU,MAAAV,EAAAU,IAAqB,GAC7C,IACDhB,EAAc,GACdM,EAAO4B,IAAajC,EAAGF,EACvBmD,IAAA,CACD,IAEGvC,GAAWA,EAAUZ,EAAOC,EAChC,EAEDM,EAAQQ,QAAU,SAAAf,GACbc,GAAkBA,EAAiBd,GAEvC,IAEKC,EAFCC,EAAIF,EAAVa,IACIX,GAAKA,EAATgB,MAEChB,EAACgB,IAAeC,GAAAY,SAAQ,SAAAxB,GACvB,IACC0C,GAAc1C,EAGd,OAFQA,GACRN,EAAaM,CACb,CACD,IACDL,EAACgB,SAAA,EACGjB,GAAYM,EAAA4B,IAAoBlC,EAAYC,EAAhCiD,KAEjB,EAwTD,IAAII,GAA0C,mBAAzBH,sBAYrB,SAASC,GAAe9C,GACvB,IAOIP,EAPEC,EAAO,WACZuD,aAAatD,GACTqD,IAASE,qBAAqBzD,GAClC0D,WAAWnD,EACX,EACKL,EAAUwD,WAAWzD,EAraR,KAwafsD,KACHvD,EAAMoD,sBAAsBnD,GAE7B,CAmBD,SAASgD,GAAc1C,GAGtB,IAAMP,EAAOC,EACTC,EAAUK,EAAdM,IACsB,mBAAXX,IACVK,EAAAM,SAAA,EACAX,KAGDD,EAAmBD,CACnB,CAMD,SAASkD,GAAa3C,GAGrB,IAAMP,EAAOC,EACbM,EAAAM,IAAgBN,EAAIY,KACpBlB,EAAmBD,CACnB,CAMD,SAASsC,GAAY/B,EAASP,GAC7B,OACEO,GACDA,EAAQa,SAAWpB,EAAQoB,QAC3BpB,EAAQsD,MAAK,SAACtD,EAAKC,GAAU,OAAAD,IAAQO,EAAQN,EAAhC,GAEd,CAED,SAASuB,GAAejB,EAAKP,GAC5B,MAAmB,mBAALA,EAAkBA,EAAEO,GAAOP,CACzC,CCtfD,IAAY2D,YAAAA,GAAgB,OAAhBA,EAAgB,OAAA,SAAhBA,EAAgB,IAAA,MAAhBA,EAAgB,SAAA,WAAhBA,CAAgB,EAAA,IAMhBC,YAAAA,GAAc,OAAdA,EAAc,QAAA,WAAdA,EAAc,SAAA,YAAdA,EAAc,UAAA,aAAdA,EAAc,WAAA,cAAdA,EAAc,YAAA,eAAdA,EAAc,aAAA,gBAAdA,EAAc,KAAA,OAAdA,EAAc,OAAA,SAAdA,EAAc,MAAA,QAAdA,EAAc,cAAA,kBAAdA,CAAc,EAAA,IAmDdC,YAAAA,GAAU,OAAVA,EAAU,QAAA,UAAVA,EAAU,IAAA,MAAVA,EAAU,OAAA,SAAVA,EAAU,eAAA,kBAAVA,CAAU,EAAA,IA+CVC,YAAAA,GAAkB,OAAlBA,EAAkB,KAAA,OAAlBA,EAAkB,eAAA,kBAAlBA,EAAkB,aAAA,gBAAlBA,EAAkB,OAAA,SAAlBA,EAAkB,KAAA,OAAlBA,CAAkB,EAAA,IAQlBC,YAAAA,GAA2B,OAA3BA,EAA2B,aAAA,gBAA3BA,EAA2B,IAAA,MAA3BA,EAA2B,cAAA,iBAA3BA,EAA2B,iBAAA,oBAA3BA,CAA2B,EAAA,IA8C3BC,YAAAA,GAAc,OAAdA,EAAc,KAAA,OAAdA,EAAc,UAAA,YAAdA,EAAc,OAAA,SAAdA,CAAc,EAAA,IAsFdC,YAAAA,GAAe,OAAfA,EAAe,MAAA,eAAfA,EAAe,UAAA,mBAAfA,EAAe,KAAA,cAAfA,CAAe,EAAA,IAMfC,YAAAA,GAAqB,OAArBA,EAAqB,UAAA,aAArBA,EAAqB,YAAA,eAArBA,EAAqB,gBAAA,mBAArBA,EAAqB,iBAAA,oBAArBA,EAAqB,4BAAA,+BAArBA,EAAqB,2BAAA,8BAArBA,EAAqB,qBAAA,wBAArBA,EAAqB,iBAAA,oBAArBA,EAAqB,iBAAA,oBAArBA,CAAqB,EAAA,ICvO3BC,GAAkE,oBAAXC,OAAyBA,YAASC,EAmMzFC,GAA8D,oBAAfC,WAA6BA,WAAaJ,GAMlFK,GAAkB,MAANF,QAAM,EAANA,GAAQE,UACpBC,GAAiB,MAANH,QAAM,EAANA,GAAQG,SACF,MAANH,IAAAA,GAAQI,SACL,MAANJ,IAAAA,GAAQK,YAEzBL,IAAAA,GAAQM,gBAAkB,oBAAqB,IAAIN,GAAOM,gBAAmBN,GAAOM,eACnD,MAANN,IAAAA,GAAQO,gBACL,MAATL,IAAAA,GAAWM,UAC7B,IAAMC,GAAqCZ,SAAAA,GAAQ,CAAA,EC1OpDa,GAAgBC,MAAMC,QAGtBC,GAFWC,OAAOC,UAEaC,SAC/BJ,GAAUF,IAAiB,SAASO,GACtC,MAAO,mBAAqBJ,GAAoBtD,KAAK0D,EACzD,EAWMC,GAAeC,QAAI,IAAWA,EAC9BC,GAAYD,GAAI,mBAAqBN,GAAoBtD,KAAK4D,GAE9DE,GAAUF,GAAI,OAASA,EAEvBG,GAAYH,GAAI,mBAAqBN,GAAoBtD,KAAK4D,GCb9DI,GAAiBC,IACnB,IAAMC,EAA0B,CAC5BC,EAAM,SAACC,GACH,GACI7B,IACiBW,GAA8B,gBAC9CS,GAAYpB,GAAO8B,UACpB9B,GAAO8B,QACT,CAME,IALA,IAAMC,GACF,uBAAwB/B,GAAO8B,QAAQD,GAChC7B,GAAO8B,QAAQD,GAAmC,mBACnD7B,GAAO8B,QAAQD,IAEzBG,EAAAC,UAAAjF,OAZmCkF,MAAIrB,MAAAmB,EAAA,EAAAA,OAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJD,EAAIC,EAAA,GAAAF,UAAAE,GAavCJ,EAAWL,KAAWQ,EAC1B,CACJ,EAEAE,KAAM,WAAoB,IAAA,IAAAC,EAAAJ,UAAAjF,OAAhBkF,EAAI,IAAArB,MAAAwB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJJ,EAAII,GAAAL,UAAAK,GACVX,EAAOC,EAAK,SAAUM,EAC1B,EAEAK,KAAM,WAAoB,IAAA,IAAAC,EAAAP,UAAAjF,OAAhBkF,EAAI,IAAArB,MAAA2B,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJP,EAAIO,GAAAR,UAAAQ,GACVd,EAAOC,EAAK,UAAWM,EAC3B,EAEAQ,MAAO,WAAoB,IAAA,IAAAC,EAAAV,UAAAjF,OAAhBkF,EAAI,IAAArB,MAAA8B,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJV,EAAIU,GAAAX,UAAAW,GACXjB,EAAOC,EAAK,WAAYM,EAC5B,EAEAW,SAAU,WAAoB,IAAA,IAAAC,EAAAb,UAAAjF,OAAhBkF,EAAI,IAAArB,MAAAiC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJb,EAAIa,GAAAd,UAAAc,GAGdjB,QAAQY,MAAMhB,KAAWQ,EAC7B,EAEAc,qBAAuBC,IACnBtB,EAAOe,MAAK,8CAA+CO,EAAa,EAG5EC,aAAeC,GAA6B1B,GAAiBC,MAAUyB,IAE3E,OAAOxB,CAAM,EAKJuB,GAFSzB,GAAc,gBAEDyB,aCkL5B,SAASE,GACZC,EACAC,EACAC,EACAC,GAEA,IAAMC,QAAEA,GAAU,EAAKC,QAAEA,GAAU,GAAoB,CAAA,EAKhD,MAAPL,GAAAA,EAASD,iBAAiBE,EAAOC,EAAU,CAAEE,UAASC,WAC1D,CCtPO,IAAMC,GAAgBT,GAAa,aAc7BU,GAAqB,cACrBC,GAA4B,oBAE5BC,GAA+BA,CACxCC,EACAC,KAEA,IAAIC,EAAc,WAAcD,EAAM,IAAID,EAAOG,GAKjD,OAJIH,EAAOI,mBAAqBJ,EAAOI,kBAAoB,IACvDF,EAAc,WAAcD,EAAM,IAAID,EAAOG,GAAE,IAAIH,EAAOI,mBAGvDF,CAAc,EAGZG,GAAoBL,IAC7B,IAAIM,EAAa,GAAMT,GAAqBG,EAAOG,GAKnD,OAJIH,EAAOI,mBAAqBJ,EAAOI,kBAAoB,IACvDE,EAAa,GAAMT,GAAqBG,EAAOG,GAAE,IAAIH,EAAOI,mBAGzDE,CAAa,EAGXC,GAA+BP,IACnBQ,aAAaC,QAAQJ,GAAiBL,KAM3DQ,aAAaE,QAAQL,GAAiBL,GAAS,OAAO,ECjCrDW,KAAKC,QACND,KAAKC,MAAQ,SAAUrI,GACnB,OAAOA,EAAI,EAAIoI,KAAKE,KAAKtI,GAAKoI,KAAKG,MAAMvI,EAC7C,GAICwI,OAAOC,YACRD,OAAOC,UAAY,SAAUtG,GACzB,OAAO+C,GAAS/C,IAAUuG,SAASvG,IAAUiG,KAAKG,MAAMpG,KAAWA,CACvE,GAGJ,IAAMwG,GAAS,mBAGR,MAAMC,GAETC,WAAAA,CAAqBC,GACjB,GAD8C1H,KAA7B0H,MAAAA,EACI,KAAjBA,EAAMpI,OACN,MAAM,IAAIqI,UAAU,qBAE5B,CAUA,mBAAOC,CAAaC,EAAkBC,EAAeC,EAAiBC,GAClE,IACKZ,OAAOC,UAAUQ,KACjBT,OAAOC,UAAUS,KACjBV,OAAOC,UAAUU,KACjBX,OAAOC,UAAUW,IAClBH,EAAW,GACXC,EAAQ,GACRC,EAAU,GACVC,EAAU,GACVH,EAAW,gBACXC,EAAQ,MACRC,EAAU,YACVC,EAAU,WAEV,MAAM,IAAIC,WAAW,uBAGzB,IAAMP,EAAQ,IAAIQ,WAAW,IAiB7B,OAhBAR,EAAM,GAAKG,EAAQb,KAAAmB,IAAG,EAAK,IAC3BT,EAAM,GAAKG,EAAQb,KAAAmB,IAAG,EAAK,IAC3BT,EAAM,GAAKG,EAAQb,KAAAmB,IAAG,EAAK,IAC3BT,EAAM,GAAKG,EAAQb,KAAAmB,IAAG,EAAK,IAC3BT,EAAM,GAAKG,EAAQb,KAAAmB,IAAG,EAAK,GAC3BT,EAAM,GAAKG,EACXH,EAAM,GAAK,IAAQI,IAAU,EAC7BJ,EAAM,GAAKI,EACXJ,EAAM,GAAK,IAAQK,IAAY,GAC/BL,EAAM,GAAKK,IAAY,GACvBL,EAAM,IAAMK,IAAY,EACxBL,EAAM,IAAMK,EACZL,EAAM,IAAMM,IAAY,GACxBN,EAAM,IAAMM,IAAY,GACxBN,EAAM,IAAMM,IAAY,EACxBN,EAAM,IAAMM,EACL,IAAIR,GAAKE,EACpB,CAGAlE,QAAAA,GAEI,IADA,IAAI4E,EAAO,GACF/J,EAAI,EAAGA,EAAI2B,KAAK0H,MAAMpI,OAAQjB,IACnC+J,EAAOA,EAAOb,GAAOc,OAAOrI,KAAK0H,MAAMrJ,KAAO,GAAKkJ,GAAOc,OAAuB,GAAhBrI,KAAK0H,MAAMrJ,IAClE,IAANA,GAAiB,IAANA,GAAiB,IAANA,GAAiB,IAANA,IACjC+J,GAAQ,KAIhB,GAAoB,KAAhBA,EAAK9I,OAGL,MAAM,IAAIgJ,MAAM,gCAEpB,OAAOF,CACX,CAGAG,KAAAA,GACI,OAAO,IAAIf,GAAKxH,KAAK0H,MAAMc,MAAM,GACrC,CAGAC,MAAAA,CAAOC,GACH,OAAiC,IAA1B1I,KAAK2I,UAAUD,EAC1B,CAMAC,SAAAA,CAAUD,GACN,IAAK,IAAIrK,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMuK,EAAO5I,KAAK0H,MAAMrJ,GAAKqK,EAAMhB,MAAMrJ,GACzC,GAAa,IAATuK,EACA,OAAO5B,KAAK6B,KAAKD,EAEzB,CACA,OAAO,CACX,EAIJ,MAAME,GAAYrB,WAAAA,GAAAzH,KACN+I,EAAa,EAAC/I,KACdgJ,EAAW,EAAChJ,KACHiJ,EAAU,IAAIC,EAAe,CAY9CC,QAAAA,GACI,IAAMpI,EAAQf,KAAKoJ,kBACnB,GAAK1F,GAAY3C,GAEV,CAEHf,KAAK+I,EAAa,EAClB,IAAMM,EAAkBrJ,KAAKoJ,kBAC7B,GAAI1F,GAAY2F,GACZ,MAAM,IAAIf,MAAM,iDAEpB,OAAOe,CACX,CATI,OAAOtI,CAUf,CAWAqI,eAAAA,GACI,IAGME,EAAKC,KAAKC,MAChB,GAAIF,EAAKtJ,KAAK+I,EACV/I,KAAK+I,EAAaO,EAClBtJ,KAAKyJ,QACF,MAAIH,EANgB,IAMUtJ,KAAK+I,GAUtC,OARA/I,KAAKgJ,IACDhJ,KAAKgJ,EAVO,gBAYZhJ,KAAK+I,IACL/I,KAAKyJ,IAKb,CAEA,OAAOjC,GAAKI,aACR5H,KAAK+I,EACL/B,KAAKC,MAAMjH,KAAKgJ,EAAQhC,KAAAmB,IAAG,EAAK,KAChCnI,KAAKgJ,EAAYhC,KAAAmB,IAAA,EAAK,IAAK,EAC3BnI,KAAKiJ,EAAQS,aAErB,CAGQD,CAAAA,GACJzJ,KAAKgJ,EAAuC,KAA5BhJ,KAAKiJ,EAAQS,cAAoD,KAA5B1J,KAAKiJ,EAAQS,aACtE,EAOJ,IAmCIC,GAnCAC,GAAyEC,IAGzE,GAAoC,oBAAzBC,sBAAwCA,qBAC/C,MAAM,IAAIxB,MAAM,6CAGpB,IAAK,IAAIjK,EAAI,EAAGA,EAAIwL,EAAOvK,OAAQjB,IAC/BwL,EAAOxL,GAA4C,MAAvC2I,KAAKC,MAAsB,MAAhBD,KAAK+C,UAAkC/C,KAAKC,MAAsB,MAAhBD,KAAK+C,UAElF,OAAOF,CAAM,EAIbvH,KAAWoB,GAAYpB,GAAO0H,SAAWA,OAAOJ,kBAChDA,GAAmBC,GAAWG,OAAOJ,gBAAgBC,IAQzD,MAAMX,GAAczB,WAAAA,GAAAzH,KACCiK,EAAU,IAAIC,YAAY,GAAElK,KACrCmK,EAAUC,GAAQ,CAC1BV,UAAAA,GAKI,OAJI1J,KAAKmK,GAAWnK,KAAKiK,EAAQ3K,SAC7BsK,GAAgB5J,KAAKiK,GACrBjK,KAAKmK,EAAU,GAEZnK,KAAKiK,EAAQjK,KAAKmK,IAC7B,EAWG,IAAME,GAASA,IAAcC,KAAY9G,WAG1C8G,GAAYA,KAAaX,KAAqBA,GAAmB,IAAIb,KAAgBK,WCd9E,MAATzG,IAAAA,GAAW6H,WC/OR,IASMC,GAAkB,SAAUzJ,EAAe0J,GACpD,IAVwB,SAAUC,GAClC,IACI,IAAIC,OAAOD,EACf,CAAE,MAAAE,GACE,OAAO,CACX,CACA,OAAO,CACX,CAGSC,CAAaJ,GAAU,OAAO,EAEnC,IACI,OAAO,IAAIE,OAAOF,GAASK,KAAK/J,EACpC,CAAE,MAAAgK,GACE,OAAO,CACX,CACJ,ECLaC,GAAmG,CAC5GC,MAAOA,CAACC,EAASC,IAAWA,EAAO3J,MAAMT,GAAUmK,EAAQ1J,MAAM4J,GAAWrK,IAAUqK,MACtFC,OAAQA,CAACH,EAASC,IAAWA,EAAOrL,OAAOiB,GAAUmK,EAAQpL,OAAOsL,GAAWrK,IAAUqK,MACzFE,MAAOA,CAACJ,EAASC,IAAWA,EAAO3J,MAAMT,GAAUmK,EAAQ1J,MAAM4J,GAAWZ,GAAgBzJ,EAAOqK,OACnGG,UAAWA,CAACL,EAASC,IAAWA,EAAOrL,OAAOiB,GAAUmK,EAAQpL,OAAOsL,IAAYZ,GAAgBzJ,EAAOqK,OAC1GI,UAAWA,CAACN,EAASC,IACjBA,EAAOM,IAAIC,IAAalK,MAAMT,GAAUmK,EAAQO,IAAIC,IAAalK,MAAM4J,GAAWrK,EAAM4K,SAASP,OACrGQ,cAAeA,CAACV,EAASC,IACrBA,EAAOM,IAAIC,IAAa5L,OAAOiB,GAAUmK,EAAQO,IAAIC,IAAa5L,OAAOsL,IAAYrK,EAAM4K,SAASP,QAGtGM,GAAe9M,GAAsBA,EAAE8M,cCpBvCzH,GAASuB,GAAa,uBC0BtBlD,GAASuJ,GACTlJ,GAAWmJ,GAcV,SAASC,GAAqBC,GACjC,MAAA,oBAA2BA,CAC/B,CAEA,IAAMC,GAAmB,UAGZC,GAA0B,CACnCC,WAAY,UACZC,gBAAiB,UACjBC,kBAAmB,QACnBC,sBAAuB,QACvBC,kBAAmB,QACnBC,wBAAyB,QACzBC,YAAa,UACbC,YAAa,kBACbC,YAAY,EACZC,wBAAwB,EACxBC,sBAAuB,+BACvBC,SAAUhL,GAAeiL,MACzBC,WAAYnL,GAAiBoL,IAC7BC,YAAa,WACbC,YAAa,QACbC,OAAQ,aACRC,sBAAuB,MACvBC,SAAU,QACVC,gBAAiB,UACjBC,WAAY,YACZC,UAAW,iCACXC,aAAc,OACdC,kBAAkB,EAClBC,6BAAyBrL,EAEzBsL,aAAc,0BACdC,gBAAiB,QACjBC,eAAgB9B,GAChB+B,oBAAqB,gCACrBC,oBAAqB,qCAGZC,GAAiCA,CAC1CvI,EACAwI,EACAC,KAEA,IAAMC,EAAmBC,KAAQpC,GAA4BkC,GACvDG,EAAY5I,EAAQ6I,MAEpBC,GACD,CAAC3M,GAAe4M,OAAQ5M,GAAe6M,KAAM7M,GAAeiL,OAAOpB,SAAS0C,EAAoBvB,WAChGqB,IAASpM,GAAW6M,eAAUR,SAAAA,EAAYpB,cAAenL,GAAiBoL,IAE/EsB,EAAUM,YAAY,0BA9DnB,SAAuB1C,GAC1B,GAAmB,YAAfA,EACA,MAAO,UAGX,IAAM2C,EACF,4IACJ,OAAO3C,EAAgBA,EAAU,KAAK2C,oBAAuCA,CACjF,CAsDqDC,CAAcV,EAAoBlC,aACnFoC,EAAUM,YAAY,0BAA2BR,EAAoBb,YACrEe,EAAUM,YAAY,wBAAyBR,EAAoBf,UACnEiB,EAAUM,YAAY,sBAAuBR,EAAoBjB,QACjEmB,EAAUM,YAAY,2BAA4BR,EAAoB5B,aAElEgC,GACAF,EAAUM,YAAY,4BAA6BR,EAAoBX,cACvEa,EAAUM,YAAY,4BAA6B,+CAEnDN,EAAUM,YAAY,4BAA6B,QACnDN,EAAUM,YACN,4BACGR,EAAoBX,aAAY,IAAIW,EAAoBX,sBAGnEa,EAAUM,YAAY,+BAAgCR,EAAoBjC,iBAC1EmC,EAAUM,YAAY,yBAA0BR,EAAoBZ,WACpEc,EAAUM,YAAY,sCAAuCR,EAAoBhB,uBACjFkB,EAAUM,YAAY,kCAAmCR,EAAoBhC,mBAC7EkC,EAAUM,YACN,wCACU,MAAVT,OAAU,EAAVA,EAAY9B,wBAAyB0C,GAAwBX,EAAoBhC,oBAErFkC,EAAUM,YAAY,8BAA+BR,EAAoB9B,mBACzEgC,EAAUM,YACN,gCACAG,GAAwBX,EAAoB9B,oBAEhDgC,EAAUM,YAAY,qCAAsCR,EAAoB7B,yBAChF+B,EAAUM,YACN,uCACAG,GAAwBX,EAAoB7B,0BAEhD+B,EAAUM,YACN,iCACAG,GAAwBX,EAAoBjC,kBAEhDmC,EAAUM,YAAY,gCAAiCR,EAAoBd,iBAC3EgB,EAAUM,YAAY,oBAAqBR,EAAoBlB,aAC/DoB,EAAUM,YAAY,yBAA0BG,GAAwBX,EAAoBlB,cAC5FoB,EAAUM,YAAY,sBAAuBR,EAAoBjB,QAGrB,UAAxCiB,EAAoBjC,iBACpBmC,EAAUM,YAAY,+BAAgC,WAG1DN,EAAUM,YAAY,+BAAgCR,EAAoBP,iBAC1ES,EAAUM,YAAY,+BAAgCG,GAAwBX,EAAoBP,kBAClGS,EAAUM,YAAY,oCAAqCR,EAAoBL,qBAC/EO,EAAUM,YAAY,oCAAqCR,EAAoBJ,qBAC/EM,EAAUM,YAAY,4BAA6BR,EAAoBR,aAAa,EAoJxF,SAASoB,GAAQlR,GACb,GAAa,MAATA,EAAE,GAAY,CACd,IAAMmR,EAAWnR,EAAEoR,QAAQ,KAAM,IAIjC,MAAO,OAHGC,SAASF,EAAS1G,MAAM,EAAG,GAAI,IAGrB,IAFV4G,SAASF,EAAS1G,MAAM,EAAG,GAAI,IAEX,IADpB4G,SAASF,EAAS1G,MAAM,EAAG,GAAI,IACD,GAC5C,CACA,MAAO,oBACX,CAEA,SAASwG,GAAwBK,GAC7B,IAAIC,OADsC,IAAbD,IAAAA,EAAgBnD,GAAwBE,iBAEpD,MAAbiD,EAAM,KACNC,EAAML,GAAQI,IAEdA,EAAME,WAAW,SACjBD,EAAMD,GAGV,IAAMG,EApKC,CACHC,UAAW,UACXC,aAAc,UACdC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,MAAO,UACPC,OAAQ,UACRC,MAAO,UACPC,eAAgB,UAChBC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,UAAW,UACXC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,MAAO,UACPC,eAAgB,UAChBC,SAAU,UACVC,QAAS,UACTC,KAAM,UACNC,SAAU,UACVC,SAAU,UACVC,cAAe,UACfC,SAAU,UACVC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,eAAgB,UAChBC,WAAY,UACZC,WAAY,UACZC,QAAS,UACTC,WAAY,UACZC,aAAc,UACdC,cAAe,UACfC,cAAe,UACfC,cAAe,UACfC,WAAY,UACZC,SAAU,UACVC,YAAa,UACbC,QAAS,UACTC,WAAY,UACZC,UAAW,UACXC,YAAa,UACbC,YAAa,UACbC,QAAS,UACTC,UAAW,UACXC,WAAY,UACZC,KAAM,UACNC,UAAW,UACXC,KAAM,UACNC,MAAO,UACPC,YAAa,UACbC,SAAU,UACVC,QAAS,UACT,aAAc,UACdC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,SAAU,UACVC,cAAe,UACfC,UAAW,UACXC,aAAc,UACdC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,qBAAsB,UACtBC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,YAAa,UACbC,cAAe,UACfC,aAAc,UACdC,eAAgB,UAChBC,eAAgB,UAChBC,YAAa,UACbC,KAAM,UACNC,UAAW,UACXC,MAAO,UACPC,QAAS,UACTC,OAAQ,UACRC,iBAAkB,UAClBC,WAAY,UACZC,aAAc,UACdC,aAAc,UACdC,eAAgB,UAChBC,gBAAiB,UACjBC,kBAAmB,UACnBC,gBAAiB,UACjBC,gBAAiB,UACjBC,aAAc,UACdC,UAAW,UACXC,UAAW,UACXC,SAAU,UACVC,YAAa,UACbC,KAAM,UACNC,QAAS,UACTC,MAAO,UACPC,UAAW,UACXC,OAAQ,UACRC,UAAW,UACXC,OAAQ,UACRC,cAAe,UACfC,UAAW,UACXC,cAAe,UACfC,cAAe,UACfC,WAAY,UACZC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,WAAY,UACZC,OAAQ,UACRC,IAAK,UACLC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,OAAQ,UACRC,WAAY,UACZC,SAAU,UACVC,SAAU,UACVC,OAAQ,UACRC,OAAQ,UACRC,QAAS,UACTC,UAAW,UACXC,UAAW,UACXC,KAAM,UACNC,YAAa,UACbC,UAAW,UACXC,IAAK,UACLC,KAAM,UACNC,QAAS,UACTC,OAAQ,UACRC,UAAW,UACXC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,WAAY,UACZC,OAAQ,UACRC,YAAa,WAwBgB9I,EAvB1B3D,eA2BP,GAHI8D,IACAF,EAAML,GAAQO,KAEbF,EACD,OAAOrD,GAEX,IAAMmM,EAAa9I,EAAI+I,MAAM,8DAC7B,GAAID,EAAY,CACZ,IAAMja,EAAIiR,SAASgJ,EAAW,IACxB3W,EAAI2N,SAASgJ,EAAW,IACxBpX,EAAIoO,SAASgJ,EAAW,IAE9B,OADYpR,KAAKsR,KAAcna,EAAIA,EAAb,KAA2BsD,EAAIA,EAAb,KAA2BT,EAAIA,EAAb,MAC7C,MAAQiL,GAAmB,OAC5C,CACA,OAAOA,EACX,CAEO,SAASsM,GAAoBC,GAChC,IAAMC,ED1UuBC,EAAC/V,EAAoBgW,EAAmBH,KAErE,IAAIC,EAAsC9V,EAASiW,cAAc,SAOjE,OANAH,EAAWE,UAAYA,EAMlBF,IACDxU,GAAOe,MAAM,wDACN,KAGM,EC4TE0T,CAAkB/V,ylXAErC,OADU,MAAV8V,GAAAA,EAAYI,aAAa,uBAAwB,QAC1CJ,CACX,CA6CA,IAAMK,GAAyBA,CAACC,EAA8D/M,KAC1F,IAAKA,EACD,OAAO,KAEX,IAAMgN,EAAWD,EAAUhN,GAAqBC,IAChD,OAAI5I,GAAQ4V,GACD,IAAIA,GAERA,CAAQ,EAGNC,GAAkBC,IAMJ,IANKH,UAC5BA,EAAS1S,OACTA,EAAM8S,mBACNA,EAAkBX,QAClBA,EAAOY,kBACPA,GACkBF,EACbV,GAIL5R,GAA4BP,GAC5BmS,EAAQzS,QAAQ5D,GAAgBkX,KAAI/K,EAAA,CAChC,CAAClM,GAAsBkX,aAAcjT,EAAOkT,KAC5C,CAACnX,GAAsBoX,WAAYnT,EAAOG,GAC1C,CAACpE,GAAsBqX,kBAAmBpT,EAAOI,kBACjD,CAACrE,GAAsBsX,6BAA8BrT,EAAOsT,6BAC5D,CAACvX,GAAsBwX,kBAAmBvT,EAAOwT,UAAUpO,KAAKqO,IAAQ,CACpEtT,GAAIsT,EAAStT,GACbsT,SAAUA,EAASA,SACnBd,SAAUF,GAAuBC,EAAWe,EAAStT,QAEzD,CAACpE,GAAsB2X,sBAAuBZ,EAC9C,CAAC/W,GAAsB4X,kBAAmBZ,EAC1Ca,0BAAqBzB,EAAQ0B,8BAAR1B,EAAQ0B,0BAC1BnB,EAAS,CACZoB,KAAM,CACF,CAAC/T,GAA6BC,EAAQ,eAAe,MAGzD+S,IAEA9W,GAAO8X,cAAc,IAAIC,YAAY,eAAgB,CAAEC,OAAQ,CAAEC,SAAUlU,EAAOG,OAClFgU,GAA2BnU,KAzB3BpC,GAAOe,MAAM,gEA0BjB,EAGSyV,GAAuBA,CAACpU,EAAgBmS,EAAmBkC,KACpE,GAAKlC,GAIL,IAAIkC,EAAJ,CAIA,IAAMC,EAAmBC,GAAyBvU,GAClDmS,EAAQzS,QAAQ5D,GAAgB0Y,UAASvM,EAAA,CACrC,CAAClM,GAAsBkX,aAAcjT,EAAOkT,KAC5C,CAACnX,GAAsBoX,WAAYnT,EAAOG,GAC1C,CAACpE,GAAsBqX,kBAAmBpT,EAAOI,kBACjD,CAACrE,GAAsBsX,6BAA8BrT,EAAOsT,6BAE5D,CAACvX,GAAsB0Y,4BACnBxX,OAAO6H,QAAuB,MAAhBwP,OAAgB,EAAhBA,EAAkB5B,YAAa,IAAIlZ,QAAQkb,ITzalDpX,IAAID,GAAYC,IAAME,GAAOF,GSya+BqX,CAAUD,KAAOzb,OAAS,EACjG2a,0BAAqBzB,EAAQ0B,8BAAR1B,EAAQ0B,0BACV,MAAhBS,OAAgB,EAAhBA,EAAkB5B,UAAS,CAC9B,CAAC3W,GAAsB2X,sBAAuC,MAAhBY,OAAgB,EAAhBA,EAAkBxB,mBAChE,CAAC/W,GAAsBwX,kBAAmBvT,EAAOwT,UAAUpO,KAAKqO,IAAQ,CACpEtT,GAAIsT,EAAStT,GACbsT,SAAUA,EAASA,SACnBd,SAAUF,IAAuC,MAAhB6B,OAAgB,EAAhBA,EAAkB5B,YAAa,GAAIe,EAAStT,QAEjF2T,KAAM,CACF,CAAC/T,GAA6BC,EAAQ,eAAe,MAI7DmU,GAA2BnU,GAC3BO,GAA4BP,GAC5B/D,GAAO8X,cAAc,IAAIC,YAAY,iBAAkB,CAAEC,OAAQ,CAAEC,SAAUlU,EAAOG,MA1BpF,OALIvC,GAAOe,MAAM,qEA+B2E,EAKnFiW,GAAWC,GACbA,EACFzP,KAAKxN,IAAC,CAAQkd,KAAMnU,KAAKG,MAAsB,GAAhBH,KAAK+C,UAAgBhJ,MAAO9C,MAC3Dkd,MAAK,CAACld,EAAG+C,IAAM/C,EAAEkd,KAAOna,EAAEma,OAC1B1P,KAAKxN,GAAMA,EAAE8C,QAGhBqa,GAAsBA,CAACC,EAAmBC,IACxCD,EAAW/b,SAAWgc,EAAShc,QAAU+b,EAAWvb,OAAM,CAACyb,EAAKC,IAAUD,IAAQD,EAASE,KACpFF,EAASG,UAGbH,EAyBEI,GAA4BrV,GAChCA,EAAO+H,YAAe/H,EAAO+H,WAAWT,mBAAoBtH,EAAOsV,yBAIjEP,GAAoB/U,EAAOwT,UAAWoB,GAAQ5U,EAAOwT,YAHjDxT,EAAOwT,UA2DT+B,+fAAgBC,CAAkC,CAC3DC,eAAe,EACfC,iBAAkB,EAClBC,uBAAwBA,OACxBC,SAAS,EACTC,gBAAiBA,OACjB/C,mBAAoB,KAGXgD,GAAmBA,IACrBC,GAAWR,IAUTS,GAA6BC,IAA+D,IAA9DC,UAAEA,EAASC,SAAEA,EAAQC,aAAEA,EAAYjO,MAAEA,GAAoB8N,EAChG,OACMI,EAAaH,EADZE,EACuB,CACpBE,wBAAyB,CAAEC,OAAQJ,GACnChO,SAEoB,CACpBgO,WACAhO,SACF,EAQL,SAASqO,GAAmBxW,GAA6C,IAAAyW,EAAAC,EAAAC,EAC5E,GAAsB,OAAlBF,EAACzW,EAAO4W,cAAPH,EAAmBI,IACpB,OAAO,EAGX,IAAMC,EAAa,MAAN7a,IAAgB,OAAVya,EAANza,GAAQM,eAAQ,EAAhBma,EAAkBI,KAC/B,IAAKA,EACD,OAAO,EAEX,IAAMjS,EAAU,CAAC7E,EAAO4W,WAAWC,KAC7BE,EAfV,SAA0BA,GACtB,OAAOA,QAAAA,EAAa,WACxB,CAasBC,CAAkC,OAAlBL,EAAC3W,EAAO4W,iBAAU,EAAjBD,EAAmBM,cACtD,OAAOtS,GAAoBoS,GAAWlS,EAAS,CAACiS,GACpD,CA+BA,IAAMI,GAA+BlX,IACjC,IAAImX,EAAG,GAAMrX,GAA4BE,EAAOG,GAIhD,OAHIH,EAAOI,mBAAqBJ,EAAOI,kBAAoB,IACvD+W,EAAG,GAAMrX,GAA4BE,EAAOG,GAAE,IAAIH,EAAOI,mBAEtD+W,CAAG,EAGDC,GAA2BA,CACpCpX,EACAqX,KAEA,IACI7W,aAAaE,QAAQwW,GAA4BlX,GAASsX,KAAKC,UAAUF,GAC7E,CAAE,MAAOlf,GACLyF,GAAOe,MAAM,yDAA0DxG,EAC3E,GAGSoc,GACTvU,IAEA,IACI,IAAMwX,EAAchX,aAAaC,QAAQyW,GAA4BlX,IACrE,GAAIwX,EACA,OAAOF,KAAKG,MAAMD,EAE1B,CAAE,MAAOrf,GACLyF,GAAOe,MAAM,2DAA4DxG,EAC7E,CACA,OAAO,IAAI,EAQFgc,GAA8BnU,IACvC,IACIQ,aAAakX,WAAWR,GAA4BlX,GACxD,CAAE,MAAO7H,GACLyF,GAAOe,MAAM,4DAA6DxG,EAC9E,sVClrBG,IAAMwf,GACTC,GAAA,MAAA,CAAKC,UAAU,YAAYC,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,iBAAiBC,MAAM,KAAI9B,SACzGyB,GAAA,OAAA,CAAM/e,EAAE,ksBAGHqf,GACTN,GAAA,MAAA,CAAKC,UAAU,YAAYC,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,iBAAiBC,MAAM,KAAI9B,SACzGyB,GAAA,OAAA,CAAM/e,EAAE,4mBAGHsf,GACTP,GAAA,MAAA,CAAKC,UAAU,YAAYC,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,iBAAiBC,MAAM,KAAI9B,SACzGyB,GAAA,OAAA,CAAM/e,EAAE,2tBAGHuf,GACTR,GAAA,MAAA,CAAKC,UAAU,YAAYC,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,iBAAiBC,MAAM,KAAI9B,SACzGyB,GAAA,OAAA,CAAM/e,EAAE,igBAGHwf,GACTT,GAAA,MAAA,CAAKC,UAAU,YAAYC,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,iBAAiBC,MAAM,KAAI9B,SACzGyB,GAAA,OAAA,CAAM/e,EAAE,u0BAGHyf,GACTC,GAAA,MAAA,CACIN,MAAM,KACNF,OAAO,KACPC,QAAQ,YACRQ,KAAK,OACLV,MAAM,6BACN,kBAAgB,qBAAoB3B,UAEpCyB,GAAA,QAAA,CAAOzX,GAAG,qBAAoBgW,SAAC,iBAC/ByB,GAAA,OAAA,CACI,YAAU,UACV,YAAU,UACV/e,EAAE,0iBACF2f,KAAK,aAIJC,GACTF,GAAA,MAAA,CAAKN,MAAM,KAAKF,OAAO,KAAKC,QAAQ,YAAYQ,KAAK,OAAOV,MAAM,6BAA4B3B,UAC1FoC,GAAA,IAAA,CAAG,YAAU,wBAAuBpC,UAChCyB,GAAA,OAAA,CACIzX,GAAG,kBACHgI,MAAO,CAAEuQ,SAAU,aACnBC,UAAU,iBACVrb,EAAE,IACFsb,EAAE,IACFX,MAAM,KACNF,OAAO,KAAI5B,SAEXyB,GAAA,OAAA,CAAM/e,EAAE,wBAAwB2f,KAAK,YAEzCD,GAAA,IAAA,CAAGM,KAAK,wBAAuB1C,UAC3ByB,GAAA,OAAA,CACI/e,EAAE,uhBACF2f,KAAK,YAETZ,GAAA,OAAA,CACI/e,EAAE,spCACF2f,KAAK,YAETZ,GAAA,OAAA,CACI/e,EAAE,ofACF2f,KAAK,iBAETZ,GAAA,OAAA,CACI/e,EAAE,oeACF2f,KAAK,YAETZ,GAAA,OAAA,CACI/e,EAAE,mdACF2f,KAAK,YAETZ,GAAA,OAAA,CACI/e,EAAE,yoFACF2f,KAAK,uBAIjBZ,GAAA,OAAA,CAAAzB,SACIyB,GAAA,WAAA,CAAUzX,GAAG,kBAAiBgW,SAC1ByB,GAAA,OAAA,CAAMK,MAAM,KAAKF,OAAO,KAAKS,KAAK,QAAQM,UAAU,0BCpF7D,SAASC,KACZ,OACIR,GAAA,IAAA,CAAGzB,KAAK,8BAA8B/R,OAAO,SAASiU,IAAI,WAAWnB,UAAU,kBAAiB1B,SAAA,CAAC,aAClFsC,KAGvB,CCAO,SAASQ,GAAapG,GAgB1B,IAhB2B9Q,KAC1BA,EAAImX,eACJA,EAAcnR,WACdA,EAAUoR,SACVA,EAAQC,KACRA,EAAIvD,gBACJA,EAAewD,iBACfA,GASHxG,GACS4C,cAAEA,GAAkBM,GAAWR,IACrC,OACIgD,GAAA,MAAA,CAAKV,UAAU,iBAAgB1B,SAAA,EACzBkD,GACEzB,GAAA,SAAA,CACIC,UAAU,cACVyB,SAAUJ,EACV,aAAW,gBACXpR,KAAK,SACLyR,QAASA,KACDH,UACAnd,IAAAA,GAAQud,KAAKJ,IAEb3D,EACe,MAAfI,GAAAA,IAEAsD,GACJ,EACFhD,SAEDpU,KAGPgG,EAAWzB,YAAcsR,GAACmB,GAAW,CAAA,KAGnD,CC7CO,SAASU,GAAc5G,GAQ3B,IAR4BY,SAC3BA,EAAQiG,iBACRA,EAAgBC,QAChBA,GAKH9G,EAEG,OACI0F,GAAA,MAAA,CAAKqB,MAAM,kBAAiBzD,SAAA,CACxByB,GAHenE,EAAS3L,OAASnM,GAAmBke,KAAO,QAAU,KAGtD,CAAChC,UAAU,kBAAkB8B,QAASA,EAAQxD,SACxD1C,EAASA,WAEbA,EAASqG,aACN9D,GAA2B,CACvBE,UAAW9c,EAAE,IAAK,CAAEye,UAAW,gCAC/B1B,SAAU1C,EAASqG,YACnB1D,cAAesD,GAAwD,SAApCjG,EAASsG,2BAIhE,CAEO,SAASC,GAAM/D,GAAuC,IAAtCsD,QAAEA,GAAkCtD,GACjDR,cAAEA,GAAkBM,GAAWR,IAErC,OACIqC,GAAA,SAAA,CACIC,UAAU,cACV0B,QAASA,EACTD,SAAU7D,EACV,aAAW,eACX3N,KAAK,SAAQqO,SAEZmC,IAGb,CH+CIV,GAAA,MAAA,CAAKK,MAAM,KAAKF,OAAO,KAAKC,QAAQ,YAAYQ,KAAK,OAAOV,MAAM,6BAA4B3B,SAC1FyB,GAAA,OAAA,CACI/e,EAAE,2jBACF2f,KAAK,mBInFjB,IAAMvc,GAASuJ,GAER,SAASyU,GAAmBpH,GAchC,IAdiCqH,OAChCA,EAAMJ,YACNA,EAAWK,YACXA,EAAWT,iBACXA,EAAgB3R,WAChBA,EAAUqS,QACVA,GAQHvH,GACS+C,QAAEA,GAAYG,GAAWR,IAe/B,OAbA8E,GAAU,KACN,IAAMC,EAAiB/a,IACD,UAAdA,EAAM4X,KAAiC,WAAd5X,EAAM4X,MAC/B5X,EAAMgb,iBACNH,IACJ,EAGJ,OADA/a,GAAiBpD,GAAQ,UAAWqe,GAC7B,KACHre,GAAOue,oBAAoB,UAAWF,EAAc,CACvD,GACF,CAACF,IAGA7B,GAAA,MAAA,CAAKV,UAAU,oBAAoB4C,KAAK,SAASC,SAAU,EAAG,cAAY,OAAMvE,SAAA,CAC3EP,GAAWgC,GAACoC,GAAM,CAACT,QAASA,IAAMa,MACnCxC,GAAA,KAAA,CAAIC,UAAU,2BAA0B1B,SAAE+D,IACzCJ,GACG9D,GAA2B,CACvBE,UAAW9c,EAAE,IAAK,CAAEye,UAAW,2BAC/B1B,SAAU2D,EACV1D,cAAesD,GAAoC,SAAhBS,IAE1CvE,GACGgC,GAACqB,GAAa,CACVlX,KAAMgG,EAAW4S,gCAAkC,QACnDzB,gBAAgB,EAChBnR,WAAYA,EACZoR,SAAUA,IAAMiB,QAKpC,CClCA,IAAMQ,GAAsBlgB,GACjBqC,GAAQrC,IAAUA,EAAMjB,OAAOohB,GAAStd,GAASsd,KAyCrD,SAASC,GAAgBjI,GAU7B,IAV8BY,SAC7BA,EAAQiG,iBACRA,EAAgB3R,WAChBA,EAAUoR,SACVA,EAAQtD,gBACRA,EAAekF,qBACfA,EAAoBC,aACpBA,GAGHnI,GACS4C,cAAEA,GAAkBK,KACpBmF,EAAWC,GAA4B,OACtCnZ,EAAMoZ,GAAWC,GAAiB,IACjC7d,GAASyd,GACFA,EAEJ,KAGXX,GAAU,KACN9e,YAAW,KACa,IAAA8f,EAAf5F,WACD4F,EAAAJ,EAAS3gB,UAAT+gB,EAAkBC,QACtB,GACD,IAAI,GACR,CAAC7F,IAEJ,IAAMkE,mBAA2BoB,EAEjC,OACIxC,GAACgD,EAAQ,CAAApF,UACLoC,GAAA,MAAA,CAAKV,UAAU,qBAAoB1B,SAAA,CAC/ByB,GAAC6B,GAAc,CAAChG,SAAUA,EAAUiG,iBAAkBA,EAAkBC,QAASA,IACjF/B,GAAA,WAAA,CACI4D,IAAKP,EACL9a,GAAIwZ,EACJ8B,KAAM,EACNpV,YAAuB,MAAV0B,OAAU,EAAVA,EAAY1B,YACzBqV,QAAUvjB,IACNgjB,EAAQhjB,EAAEwjB,cAAcjhB,OACxBvC,EAAEyjB,iBAAiB,EAEvBC,UAAY1jB,IACRA,EAAEyjB,iBAAiB,EAEvBlhB,MAAOqH,OAGf6V,GAACqB,GAAa,CACVlX,KAAM0R,EAASqI,YAAc,SAC7B5C,gBAAiBnX,IAAS0R,EAASsI,SACnChU,WAAYA,EACZoR,SAAUA,IAAMA,EAASpX,GACzB8T,gBAAiBA,IAAMA,EAAgB9T,OAIvD,CAEO,SAASia,GAAY/F,GAQzB,IAR0BxC,SACzBA,EAAQiG,iBACRA,EAAgB3R,WAChBA,EAAUoR,SACVA,EAAQtD,gBACRA,GAGHI,EACG,OACIsC,GAACgD,EAAQ,CAAApF,UACLyB,GAAA,MAAA,CAAKC,UAAU,qBAAoB1B,SAC/ByB,GAAC6B,GAAc,CAAChG,SAAUA,EAAUiG,iBAAkBA,MAE1D9B,GAACqB,GAAa,CACVlX,KAAM0R,EAASqI,YAAc,SAC7B5C,gBAAgB,EAChBE,KAAM3F,EAAS2F,KACfrR,WAAYA,EACZoR,SAAUA,IAAMA,EAAS,gBACzBtD,gBAAiBA,IAAMA,EAAgB,oBAIvD,CAEO,SAASoG,GAAcC,GAU3B,IAV4BzI,SAC3BA,EAAQiG,iBACRA,EAAgBqB,qBAChBA,EAAoBhT,WACpBA,EAAUoR,SACVA,EAAQtD,gBACRA,EAAemF,aACfA,GAGHkB,EACSC,EAAQ1I,EAAS0I,MACjBC,EAA8B,KAAnB3I,EAAS0I,MAAe,EAAI,GACtCE,EAAQC,GAAalB,GAAwB,IAC5C3d,GAASud,GACFA,EAEPje,GAAQie,IAAiBA,EAAa/hB,OAAS,GAAKwE,GAASsL,SAASiS,EAAa,KAC5EjS,SAASiS,EAAa,IAE7Bzd,GAASyd,IAAiBvd,GAASsL,SAASiS,IACrCjS,SAASiS,GAEb,QAGLvF,cAAEA,GAAkBK,KAEpByG,EAAgBC,GACd/G,EACOI,EAAgB2G,GAEpBrD,EAASqD,GAGpB,OACIjE,GAACgD,EAAQ,CAAApF,UACLoC,GAAA,MAAA,CAAKV,UAAU,qBAAoB1B,SAAA,CAC/ByB,GAAC6B,GAAc,CAAChG,SAAUA,EAAUiG,iBAAkBA,IACtDnB,GAAA,MAAA,CAAKV,UAAU,iBAAgB1B,UAC3BoC,GAAA,MAAA,CAAKV,UAAU,iBAAgB1B,UACL,UAArB1C,EAASgJ,SACN7E,GAAA,MAAA,CAAKC,UAAU,uBAAsB1B,UACZ,IAAnB1C,EAAS0I,MAAcO,GAAmBC,IAAiBvX,KAAI,CAACwX,EAAOC,IAGjEjF,GAAA,SAAA,CACI,aAAA,SAAoBiF,EAAM,GAC1BhF,UAAS,0BAA4BkD,EAAoB,WAAW8B,EAAG,KAJhEA,EAAM,IAAMR,EAKN,gBAAkB,IAE/B3hB,MAAOmiB,EAAM,EAEb/U,KAAK,SACLyR,QAASA,KACL,IAAM5G,EAAWkK,EAAM,EACvBP,EAAU3J,GACNc,EAAS4F,kBACTkD,EAAa5J,EACjB,EACFwD,SAEDyG,GAVIC,OAgBH,WAArBpJ,EAASgJ,SACN7E,GAAA,MAAA,CACIC,UAAU,wBACV1P,MAAO,CAAE2U,oBAAmB,WAAYX,EAAQC,EAAW,GAAC,qBAAsBjG,SAEjF4G,GAAgBtJ,EAAS0I,OAAO/W,KAAI,CAAC4X,EAAQH,IAGtCjF,GAACqF,GAAY,CAETlC,qBAAsBA,EACtBmC,OALOb,IAAWW,EAMlBjV,WAAYA,EACZyU,IAAKQ,EACLG,gBAAkBxK,IACd2J,EAAU3J,GACNc,EAAS4F,kBACTkD,EAAa5J,EACjB,GATCkK,UAiB7BtE,GAAA,MAAA,CAAKV,UAAU,cAAa1B,UACxByB,GAAA,MAAA,CAAAzB,SAAM1C,EAAS2J,kBACfxF,GAAA,MAAA,CAAAzB,SAAM1C,EAAS4J,2BAI3BzF,GAACqB,GAAa,CACVlX,KAAM0R,EAASqI,aAAwB,MAAV/T,OAAU,EAAVA,EAAYuV,mBAAoB,SAC7DpE,eAAgB1b,GAAO6e,KAAY5I,EAASsI,SAC5ChU,WAAYA,EACZoR,SAAUA,IAAMA,EAASkD,GACzBxG,gBAAiBA,IAAMA,EAAgBwG,GACvChD,iBAAkB5F,EAAS4F,qBAI3C,CAEO,SAAS4D,GAAYM,GAWzB,IAX0Bf,IACzBA,EAAGU,OACHA,EAAMnC,qBACNA,EAAoBoC,gBACpBA,GAOHI,EACG,OACI3F,GAAA,SAAA,CACI,aAAA,QAAoB4E,EACpB3E,UAAS,2BAA6BkD,EAAoB,WAAWyB,EAAG,KAAIU,EAAS,gBAAkB,IACvGpV,KAAK,SACLyR,QAASA,KACL4D,EAAgBX,EAAI,EACtBrG,SAEDqG,GAGb,CAEO,SAASgB,GAAsBC,GAUnC,IAVoChK,SACnCA,EAAQiG,iBACRA,EAAgBqB,qBAChBA,EAAoBhT,WACpBA,EAAUoR,SACVA,EAAQtD,gBACRA,EAAemF,aACfA,GAGHyC,EACSC,EAAqBxC,GAAyB,MAC9CyC,EAAUC,IAAQ,INgLWnK,KACnC,IAAKA,EAASoK,eACV,OAAOpK,EAASkK,QAGpB,IAAMG,EAAsBrK,EAASkK,QACjCI,EAAkB,GAClBtK,EAASuK,gBAETD,EAAkBD,EAAoBG,OAG1C,IAAMC,EAAkBnJ,GAAoB+I,EAAqBlJ,GAAQkJ,IAOzE,OALIrK,EAASuK,gBACTvK,EAASkK,QAAQzkB,KAAK6kB,GACtBG,EAAgBhlB,KAAK6kB,IAGlBG,CAAe,EMnMQC,CAAuB1K,IAAW,CAACA,KAC1D2K,EAAiBC,GAAsBjD,GAAmC,IAnRnDkD,EAC9BtD,EACAuD,IAEIhhB,GAASyd,IAGTJ,GAAmBI,GAFZA,EAKJuD,IAAiB5iB,GAAmB6iB,aAAe,KAAO,GA0Q7DF,CAA0BtD,EAAcvH,EAAS3L,SAE9C2W,EAAgBC,GAAqBtD,GAA8B,IAzQ7CuD,EAC7B3D,EACA2C,KAEA,GAAIpgB,GAASyd,KAAkB2C,EAAQrY,SAAS0V,GAC5C,MAAO,CACH4D,YAAY,EACZC,WAAY7D,GAGpB,GAAIJ,GAAmBI,GAAe,CAClC,IAAM8D,EAAiB9D,EAAa+D,MAAMC,IAAYrB,EAAQrY,SAAS0Z,KACvE,GAAIF,EACA,MAAO,CACHF,YAAY,EACZC,WAAYC,EAGxB,CACA,MAAO,CACHF,YAAY,EACZC,WAAY,GACf,EAoPGF,CAAyB3D,EAAc2C,MAGrClI,cAAEA,GAAkBK,KAEpBmJ,EAAyBxL,EAAS3L,OAASnM,GAAmB6iB,aAC9DU,EAA2BzL,EAAS3L,OAASnM,GAAmBwjB,eAEhEC,EAAmB3L,EAAS4F,kBAAoB4F,IAA2BxL,EAASuK,cAEpFqB,EAAqBA,CAACnK,EAAaoK,KACrC,GAAIA,EAAc,CACd,IAAMC,GAAmBd,EAAeG,WAexC,OAdAF,GAAmBc,GAAIvX,KAChBuX,EAAI,CACPZ,WAAYW,EACZV,WAAYU,EAAkBC,EAAKX,WAAa,OAGhDI,GACAZ,EAAmB,SAInBkB,GACAhkB,YAAW,KAAA,IAAAkkB,EAAA,cAAAA,EAAM/B,EAAmBpjB,gBAAnBmlB,EAA4BnE,OAAO,GAAE,IAG9D,CAEA,GAAI2D,EAeA,OAdAZ,EAAmBnJ,GAEnBwJ,GAAmBc,GAAIvX,KAChBuX,EAAI,CACPZ,YAAY,EACZC,WAAY,YAGZO,IACAjG,EAASjE,GACLO,GACAI,EAAgBX,KAMxBgK,GAA4BniB,GAAQqhB,KAChCA,EAAgB9Y,SAAS4P,GACzBmJ,EAAmBD,EAAgB5kB,QAAQwlB,GAAWA,IAAW9J,KAEjEmJ,EAAmB,IAAID,EAAiBlJ,IAEhD,EAGEwK,EAA8BvnB,IAChCA,EAAEyjB,kBACF,IAAM+D,EAAWxnB,EAAEwjB,cAAcjhB,MAEjCgkB,GAAmBc,GAAIvX,KAChBuX,EAAI,CACPX,WAAYc,MAGZV,GACAZ,EAAmBsB,EACvB,EAGEC,EAA0BznB,IAC5BA,EAAEyjB,kBAGY,UAAVzjB,EAAEgf,KAAoB0I,MACtB1nB,EAAEoiB,iBACFgC,KAIU,WAAVpkB,EAAEgf,MACFhf,EAAEoiB,iBACFmE,GAAmBc,GAAIvX,KAChBuX,EAAI,CACPZ,YAAY,EACZC,WAAY,OAEZI,GACAZ,EAAmB,MAE3B,EAGEwB,EAAmBA,KACjBpM,EAASsI,aAGTve,GAAO4gB,QAGPrhB,GAAQqhB,IACHK,EAAeG,YAAyC,IAA3BR,EAAgBnlB,YAIlDwlB,EAAeG,YAAmD,KAArCH,EAAeI,WAAWiB,UAMzDvD,EAAeA,KACbkC,EAAeG,YAAcM,EACzBniB,GAAQqhB,KACR3I,EACMI,EAAgB,IAAIuI,EAAiBK,EAAeI,aACpD1F,EAAS,IAAIiF,EAAiBK,EAAeI,cAGvDpJ,EAAgBI,EAAgBuI,GAAmBjF,EAASiF,EAChE,EAGJ,OACI7F,GAACgD,EAAQ,CAAApF,UACLoC,GAAA,MAAA,CAAKV,UAAU,qBAAoB1B,SAAA,CAC/ByB,GAAC6B,GAAc,CAAChG,SAAUA,EAAUiG,iBAAkBA,IACtDnB,GAAA,WAAA,CAAUV,UAAU,uCAAsC1B,UACtDyB,GAAA,SAAA,CAAQC,UAAU,UAAS1B,SACtB+I,EAA2B,yBAA2B,gBAE1DvB,EAAQvY,KAAI,CAAC4Z,EAAgBnC,KAC1B,IAAMyC,IAAiB7L,EAASuK,eAAiBnB,IAAQpJ,EAASkK,QAAQ1kB,OAAS,EAC7E8mB,EAAO,iBAAoBhF,EAAoB,SAAS8B,EACxDmD,EAAiBD,EAAO,OAExBE,EAAYX,EACZb,EAAeG,WACfK,EACEb,IAAoBY,EACpBjiB,GAAQqhB,IAAoBA,EAAgB9Y,SAAS0Z,GAE7D,OACIzG,GAAA,QAAA,CAAOV,UAAWyH,EAAe,qBAAuB,GAAGnJ,UACvDoC,GAAA,MAAA,CAAKV,UAAU,kBAAiB1B,UAC5ByB,GAAA,QAAA,CACI9P,KAAMmX,EAAyB,QAAU,WACzC/L,KAAM6M,EACNG,QAASD,EACTE,SAAUA,IAAMd,EAAmBL,EAAQM,GAC3Cnf,GAAI4f,EACJ,gBAAeC,IAEnBpI,GAAA,OAAA,CAAAzB,SAAOmJ,EAAkBN,EAAM,IAAMA,OAExCM,GACG1H,GAAA,QAAA,CACI9P,KAAK,OACL0T,IAAKkC,EACLvd,GAAI6f,EACJ9M,KAAI,WAAa6H,EAAoB,OACrCrgB,MAAO+jB,EAAeI,WACtBhD,UAAW+D,EACXlE,QAASgE,EACTnG,QAAUphB,IAEDsmB,EAAeG,YAChBS,EAAmBL,GAAQ,GAE/B7mB,EAAEyjB,iBAAiB,EAEvB,aAAeoD,EAAM,wBA5BgCnC,EA+BzD,UAKxBjF,GAACqB,GAAa,CACVlX,KAAM0R,EAASqI,YAAc,SAC7B5C,eAAgB2G,IAChB9X,WAAYA,EACZoR,SAAUoD,EACV1G,gBAAiB0G,EACjBlD,iBAAkB+F,MAIlC,CAEA,IAAM1C,GAAmB,CAACvE,GAAmBD,GAAcP,IACrDgF,GAAkB,CAACvE,GAAuBD,GAAmBD,GAAcP,GAAgBU,IAC3F+H,GAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,GAChCC,GAAoB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvCC,GAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEvD,SAASvD,GAAgBZ,GACrB,OAAQA,GACJ,KAAK,EAML,QACI,OAAOiE,GALX,KAAK,EACD,OAAOC,GACX,KAAK,GACD,OAAOC,GAInB,CC9cA,IAAMrkB,GAASuJ,GACTlJ,GAAWmJ,GAEX8a,GAAiC,wBAiChC,SAASC,GACZxgB,EACAygB,EACA9N,GACF,IAAA+N,EACQjN,EAAWzT,EAAOwT,UAAUiN,GAC5BE,EAAoBF,EAAuB,EAEjD,GAAuB,OAAnBC,EAACjN,EAASmN,aAATF,EAAoB5Y,KACrB,OAAI2Y,IAAyBzgB,EAAOwT,UAAUva,OAAS,EAC5C2C,GAA4BilB,IAGhCF,EAGX,GAAIlN,EAASmN,UAAU9Y,OAASlM,GAA4BilB,IACxD,OAAOjlB,GAA4BilB,IAChC,GAAIpN,EAASmN,UAAU9Y,OAASlM,GAA4BklB,kBAC/D,GAAI/f,OAAOC,UAAUyS,EAASmN,UAAUzL,OACpC,OAAO1B,EAASmN,UAAUzL,WAE3B,GAAI1B,EAASmN,UAAU9Y,OAASlM,GAA4BmlB,cAAe,CAE9E,GAAItN,EAAS3L,OAASnM,GAAmB6iB,aAAc,CAAA,IAAAwC,EAG/CC,EAAsBxN,EAASkK,QAAQuD,QAAO,GAAIvO,GAQtD,IAN4B,IAAxBsO,GAA8BxN,EAASuK,gBAGvCiD,EAAsBxN,EAASkK,QAAQ1kB,OAAS,GAG9B,OAAtB+nB,EAAIvN,EAASmN,mBAASI,EAAlBA,EAAoBG,iBAApBH,EAAoCI,eAAeH,GAAsB,CACzE,IAAMI,EAAW5N,EAASmN,UAAUO,eAAeF,GAGnD,OAAIlgB,OAAOC,UAAUqgB,GACVA,EAGPA,IAAazlB,GAA4BilB,IAClCjlB,GAA4BilB,IAGhCF,CACX,CACJ,MAAO,GAAIlN,EAAS3L,OAASnM,GAAmB2lB,OAAQ,CAAA,IAAAC,EACpD,GAAwB,iBAAb5O,IAA0B5R,OAAOC,UAAU2R,GAClD,MAAM,IAAI1Q,MAAM,wCAGpB,IAAMuf,EApFlB,SAAyCC,EAAuBtF,GAC5D,GAAc,IAAVA,EAAa,CACb,GAAIsF,EAAgB,GAAKA,EAAgB,EACrC,MAAM,IAAIxf,MAAM,qCAGpB,OAAyB,IAAlBwf,EAAsB,WAA+B,IAAlBA,EAAsB,UAAY,UAChF,CAAO,GAAc,IAAVtF,EAAa,CACpB,GAAIsF,EAAgB,GAAKA,EAAgB,EACrC,MAAM,IAAIxf,MAAM,qCAGpB,OAAOwf,GAAiB,EAAI,WAA+B,IAAlBA,EAAsB,UAAY,UAC/E,CAAO,GAAc,IAAVtF,EAAa,CACpB,GAAIsF,EAAgB,GAAKA,EAAgB,EACrC,MAAM,IAAIxf,MAAM,qCAGpB,OAAOwf,GAAiB,EAAI,WAA+B,IAAlBA,EAAsB,UAAY,UAC/E,CAAO,GAAc,KAAVtF,EAAc,CACrB,GAAIsF,EAAgB,GAAKA,EAAgB,GACrC,MAAM,IAAIxf,MAAM,sCAGpB,OAAOwf,GAAiB,EAAI,aAAeA,GAAiB,EAAI,WAAa,WACjF,CAEA,MAAM,IAAIxf,MAAM,wCACpB,CAwDiCyf,CAAgC/O,EAAUc,EAAS0I,OAExE,GAAsB,OAAtBoF,EAAI9N,EAASmN,mBAASW,EAAlBA,EAAoBJ,iBAApBI,EAAoCH,eAAeI,GAAe,CAClE,IAAMH,EAAW5N,EAASmN,UAAUO,eAAeK,GAGnD,OAAIzgB,OAAOC,UAAUqgB,GACVA,EAGPA,IAAazlB,GAA4BilB,IAClCjlB,GAA4BilB,IAGhCF,CACX,CACJ,CAEA,OAAOA,CACX,CAGA,OADA/iB,GAAOY,KAAK,wEACLmiB,CACX,CA0bA,IAAMgB,GAAuD,CACzDlb,SAAU,WACVmb,KAAM,QACNC,MAAO,QACPC,IAAK,QACLC,OAAQ,QACRjJ,UAAW,SAGFkJ,GAAuB9F,IAe9B,IAf+Blc,OACjCA,EAAMiiB,cACNA,EAAavM,iBACbA,EAAgBgE,iBAChBA,EAAgB7D,gBAChBA,EAAeqM,eACfA,EAAiBP,IASpBzF,EACSiG,EAAeF,EAAcG,cAAc,+BAC7CD,GACAA,EAAaE,SAEjB,IAAMjQ,EAAaF,KACfE,IACA6P,EAAcK,YAAYlQ,GAC1BvK,GAA+Boa,EAAejiB,EAAO8H,KAAM9H,EAAO+H,aAEtEwa,EACI3K,GAAC4K,GAAW,CACRxiB,OAAQA,EACR0Z,iBAAkBA,EAClBvR,MAAO+Z,EACPrM,gBAAiBA,EACjBH,iBAAkBA,EAClB+M,sBAAuBA,SAE3BR,EACH,EAGQS,GAA8BnF,IAQrC,IARsCvd,OACxCA,EAAM2iB,KACNA,EAAIjJ,iBACJA,GAKH6D,EACSnL,EAAaF,KACfE,IACAuQ,EAAKL,YAAYlQ,GACjBvK,GAA+B8a,EAAM3iB,EAAO8H,KAAM9H,EAAO+H,aAG7Dwa,EAAc3K,GAACgL,GAAc,CAAClJ,iBAAkBA,EAAkB1Z,OAAQA,EAAQqU,UAAU,IAAUsO,EAAK,EAiDxG,SAASE,GAAwBpF,GAKN,IALOzd,OACrCA,EAAMyiB,sBACNA,EAAwBA,SAAQK,iBAChCA,EAAgBrN,cAChBA,GAAgB,GACYgI,EAC5BpD,GAAU,KAAM,IAAA0I,EACZ,IAAItN,GAAmC,OAAlBsN,EAAC/iB,EAAO4W,aAAPmM,EAAmBlM,IAAzC,CAIA,IAAMmM,EAAgBA,KAAM,IAAAC,EAClBC,EAAqBljB,EAAO8H,OAASpM,GAAW6M,OAChD4a,EAA8B3M,GAAmBxW,GACjDojB,GAAyC,OAAjBH,EAAAjjB,EAAO+H,iBAAU,EAAjBkb,EAAmBtc,cAAenL,GAAiBoL,KAAOsc,EAExF,IAAIC,EAUJ,OAFAvlB,GAAOS,KAAI,iBAAkB2B,EAAOG,kCACpC2iB,GAAiB,GACVL,EAAsBziB,GATrBojB,IACAxlB,GAAOS,KAAI,kBAAmB2B,EAAOG,2DACrC2iB,GAAiB,GAOW,EAIxCzjB,GAAiBpD,GAAQ,WAAY+mB,GAGrC3jB,GAAiBpD,GAAQ,aAAc+mB,GAGvC,IAAMK,EAAoBpnB,GAAOqnB,QAAQC,UACnCC,EAAuBvnB,GAAOqnB,QAAQG,aAY5C,OAVAxnB,GAAOqnB,QAAQC,UAAY,WAAmB,IAAA,IAAAtlB,EAAAC,UAAAjF,OAANkF,EAAI,IAAArB,MAAAmB,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJD,EAAIC,GAAAF,UAAAE,GACxCilB,EAAkBK,MAAM/pB,KAAMwE,GAC9B6kB,GACJ,EAEA/mB,GAAOqnB,QAAQG,aAAe,WAAmB,IAAA,IAAAnlB,EAAAJ,UAAAjF,OAANkF,EAAI,IAAArB,MAAAwB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJJ,EAAII,GAAAL,UAAAK,GAC3CilB,EAAqBE,MAAM/pB,KAAMwE,GACjC6kB,GACJ,EAEO,KACH/mB,GAAOue,oBAAoB,WAAYwI,GACvC/mB,GAAOue,oBAAoB,aAAcwI,GACzC/mB,GAAOqnB,QAAQC,UAAYF,EAC3BpnB,GAAOqnB,QAAQG,aAAeD,CAAoB,CA5CtD,CA6CC,GACF,CAAC/N,EAAezV,EAAQyiB,EAAuBK,GACtD,CAoIA,SAASa,GACL7b,EACArB,EACAmd,GAEA,QAHwB,IAAxBnd,IAAAA,EAA2BhL,GAAeiL,OAGtCoB,IAASpM,GAAWmoB,eACpB,MAAO,CAAA,EAGX,OAAQpd,GACJ,KAAKhL,GAAeqoB,QAChB,MAAO,CAAEhC,IAAK,IAAKF,KAAM,IAAK9I,UAAW,yBAC7C,KAAKrd,GAAesoB,SAChB,MAAO,CAAEjC,IAAK,IAAKD,MAAO,IAAK/I,UAAW,0BAC9C,KAAKrd,GAAeuoB,UAChB,MAAO,CAAElC,IAAK,IAAKF,KAAM,MAAO9I,UAAW,yBAC/C,KAAKrd,GAAewoB,WAChB,MAAO,CAAEnC,IAAK,MAAOF,KAAM,IAAK9I,UAAW,yBAC/C,KAAKrd,GAAeyoB,YAChB,MAAO,CAAEpC,IAAK,MAAOD,MAAO,IAAK/I,UAAW,0BAChD,KAAKrd,GAAe0oB,aAChB,MAAO,CAAErC,IAAK,MAAOF,KAAM,MAAO9I,UAAW,yBACjD,KAAKrd,GAAe6M,KAChB,MAAO,CAAEsZ,KAAM,QACnB,KAAKnmB,GAAe4M,OAChB,MAAO,CACHuZ,KAAM,MACN9I,UAAW,oBAEnB,QACA,KAAKrd,GAAeiL,MAChB,MAAO,CAAEmb,MAAO/Z,IAASpM,GAAW6M,QAAUqb,IAAqBpoB,GAAiBoL,IAAM,OAAS,QAE/G,CAEO,SAAS4b,GAAW4B,GAWN,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAXO1kB,OACxBA,EAAM0Z,iBACNA,EAAgBvH,QAChBA,EAAOhK,MACPA,EAAQ,CAAA,EAAEuN,iBACVA,EAAgB+M,sBAChBA,EAAwBA,SAAQ7M,QAChCA,GAAU,EAAIC,gBACdA,EAAkBA,SAAQF,uBAC1BA,EAAyBA,SAAQgP,2BACjCA,EAA6BA,UACdP,EACTQ,EAAqB1J,GAAuB,MAC5CzF,EAAgB1U,OAAOC,UAAU0U,GAEjCmP,EAAgD,OAAjBR,EAAArkB,EAAO+H,aAAPsc,EAAmB9c,wBACN,IAA5CvH,EAAO+H,WAAWR,wBAClB,GACAud,eAAEA,EAAcC,aAAEA,EAAYC,4BAAEA,GAvLnC,SACHhlB,EACAmS,EACA8S,EACAxP,EACAgN,EACAmC,GAEA,IAAOE,EAAgBI,GAAqB9J,EACxC3F,GAAsC,IAArBwP,GAA0BjlB,EAAO8H,OAASpM,GAAWmoB,iBAEnEkB,EAAcI,GAAmB/J,GAAS,GAE3C4J,EAA8BA,KAChC,IAAMI,EAAwBA,KACtBplB,EAAO8H,OAASpM,GAAW2pB,SAC3B5C,EAAsBziB,GAE1BklB,GAAkB,EAAM,EAGvB5oB,GAASgpB,oBAKKhpB,GAASgpB,qBAAoB,KAAM,IAAAC,EAChC,MAAlBX,GAA2B,OAATW,EAAlBX,EAAoBtqB,UAApBirB,EAA6BlD,QAAQ,IAG9BmD,SAASC,MAAK,KACrBlqB,YAAW,KACP6pB,GAAuB,GACxB,IAAI,IAXPA,GAYF,EAGAM,EAAsBnmB,IACpBA,EAAM0U,OAAOC,WAAalU,EAAOG,IAGrC6kB,GAA6B,EAyEjC,OAtEA3K,GAAU,KACN,GAAKlI,GAIL,IAAIsD,EAAJ,CAIA,IAAMkQ,EAAoBpmB,IAAuB,IAAAqmB,EAAAC,EAC7C,GAAItmB,EAAM0U,OAAOC,WAAalU,EAAOG,GAArC,CAGA,GAAsB,OAAlBylB,EAAC5lB,EAAO+H,cAAP6d,EAAmBrf,uBACpB,OAAOye,IAEXG,GAAgB,GACK,OAArBU,EAAI7lB,EAAO+H,aAAP8d,EAAmBC,eACnBvqB,YAAW,KACPypB,GAA6B,GAC9B,IARP,CASA,EAGEe,EAAaA,KAEVvP,GAAmBxW,KAGxBklB,GAAkB,GAClBjpB,GAAO8X,cAAc,IAAIiS,MAAM,kBAC/B7T,EAAQzS,QAAQ5D,GAAgBmqB,MAAO,CACnC,CAAClqB,GAAsBkX,aAAcjT,EAAOkT,KAC5C,CAACnX,GAAsBoX,WAAYnT,EAAOG,GAC1C,CAACpE,GAAsBqX,kBAAmBpT,EAAOI,kBACjD,CAACrE,GAAsBsX,6BAA8BrT,EAAOsT,6BAC5DM,0BAAqBzB,EAAQ0B,8BAAR1B,EAAQ0B,2BAEjCrT,aAAaE,QAAQ,sBAAsB,IAAIwC,MAAOgjB,eAAc,EAMxE,GAHA7mB,GAAiBpD,GAAQ,iBAAkBypB,GAC3CrmB,GAAiBpD,GAAQ,eAAgB0pB,GAErCV,EAAmB,EAAG,CAGtB,IAAMkB,EAAY5qB,WAAWwqB,EAAYd,GACzC,MAAO,KACH5pB,aAAa8qB,GACblqB,GAAOue,oBAAoB,iBAAkBkL,GAC7CzpB,GAAOue,oBAAoB,eAAgBmL,EAAkC,CAErF,CAGI,OADAI,IACO,KACH9pB,GAAOue,oBAAoB,iBAAkBkL,GAC7CzpB,GAAOue,oBAAoB,eAAgBmL,EAAkC,CAnDrF,OALI/nB,GAAOe,MAAM,6DA0DjB,GACD,IAEHkkB,GAAyB,CACrB7iB,SACAyiB,wBACAK,iBAAkBoC,EAClBzP,kBAGG,CAAEqP,iBAAgBC,eAAcG,oBAAmBF,8BAC9D,CAoE0EoB,CAClEpmB,EACAmS,EACA0S,EACApP,EACAgN,EACAmC,GAGEyB,EAAyBtB,GAAgBrP,IAAqB1V,EAAOwT,UAAUva,OAC/EqtB,EAAqB1I,IAAQ,KAC/B,IAAM2I,EAAsBhS,GAAyBvU,GACrD,MAAO,CACHyV,gBACAC,iBAAkBA,EAClBC,uBAAwBA,KACpBvB,GAAqBpU,EAAQmS,EAASsD,GACtCE,GAAwB,EAE5BC,QAASA,IAAW,EACpB9C,oBAAuC,MAAnByT,OAAmB,EAAnBA,EAAqBzT,qBAAsB9O,KAC/D6R,kBACA1D,UACH,GACF,CAACsD,EAAeC,EAAkBE,EAASzD,EAASnS,EAAQ2V,EAAwBE,IAEvF,OAAKiP,EAKDlN,GAACrC,GAAciR,SAAQ,CAAC9rB,MAAO4rB,EAAmBnQ,SAC9CyB,GAAA,MAAA,CACIC,UAAU,YACV1P,MAAKF,EAAA,GACE0b,GAAmB3jB,EAAO8H,KAAuB,OAAnBwc,EAAEtkB,EAAO+H,iBAAU,EAAjBuc,EAAmB7d,SAA2B,OAAnB8d,EAAEvkB,EAAO+H,iBAAU,EAAjBwc,EAAmB5d,YAChFwB,GAEPqT,IAAKoJ,EAAmBzO,SAEtBkQ,EAGEzO,GAACqC,GAAmB,CAChBC,QAAyB,OAAjBsK,EAAAxkB,EAAO+H,iBAAU,EAAjByc,EAAmBhe,wBAAyB,aACpDsT,aAA8B,OAAjB2K,EAAAzkB,EAAO+H,iBAAU,EAAjB0c,EAAmBgC,6BAA8B,GAC9D/M,mBAAoBA,EACpBS,YAA8B,OAAnBuK,EAAE1kB,EAAO+H,iBAAU,EAAjB2c,EAAmBgC,sCAChC3e,WAAY/H,EAAO+H,YAAclC,GACjCuU,QAASA,KACL4K,IACAL,GAA4B,IAVpC/M,GAAC+O,GAAS,CAAC3mB,OAAQA,EAAQ0Z,mBAAoBA,EAAkBvH,QAASA,QAd/E,IA+Bf,CAEO,SAASwU,GAASC,GAQtB,IARuB5mB,OACtBA,EAAM0Z,iBACNA,EAAgBvH,QAChBA,GAKHyU,GAEUC,EAAoBC,GAAyB1L,GAAS,KACzD,IAAM2L,EAAuBxS,GAAyBvU,GAItD,OAHwB,MAApB+mB,GAAAA,EAAsBrU,WACtB9U,GAAOS,KAAK,gEAEW,MAApB0oB,OAAoB,EAApBA,EAAsBrU,YAAa,CAAA,CAAE,KAE1CgD,iBAAEA,EAAgBC,uBAAEA,EAAsBC,QAAEA,EAAOC,gBAAEA,EAAe/C,mBAAEA,EAAkB2C,cAAEA,GAC5FM,GAAWR,KACRkL,EAAsBuG,GAA2B5L,GAAS,KAC7D,IAAM2L,EAAuBxS,GAAyBvU,GACtD,OAAO0V,IAAwC,MAApBqR,OAAoB,EAApBA,EAAsBE,oBAAqB,CAAC,IAErEC,EAAkBtJ,IAAQ,IAAMvI,GAAyBrV,IAAS,CAACA,IAGzEqa,GAAU,KACF5E,IAAkBpY,GAAYqY,IAC9BsR,EAAwBtR,EAC5B,GACD,CAACA,EAAkBD,IAEtB,IAiDM0R,EAAkBD,EAAgBE,GAAG3G,GAE3C,OAAK0G,EAKD5O,GAAA,OAAA,CAAMV,UAAU,cAAc3E,KAAK,aAAYiD,SAAA,CAC1CP,GACGgC,GAACoC,GAAM,CACHT,QAASA,KACL5D,GAAwB,IAIpCiC,GAAA,MAAA,CAAKC,UAAU,aAAY1B,SACtBkR,GAAqB,CAClB5T,SAAU0T,EACVzN,mBACAqB,qBAAsB0F,EACtB1Y,WAAY/H,EAAO+H,YAAclC,GACjCsT,SAAWmO,GAtEDC,KAQpB,IARqBD,IACvBA,EAAGvM,qBACHA,EAAoBpV,WACpBA,GAKH4hB,EACG,GAAKpV,EAKL,GAAKxM,EAAL,CAKA,IAAM6hB,EAAc9hB,GAAqBC,GAEnC8hB,EAAYxf,EAAA,CAAA,EAAQ4e,EAAkB,CAAEW,CAACA,GAAcF,IAC7DR,EAAsBW,GAEtB,IAAMpG,EAAWb,GAAkBxgB,EAAQ+a,EAAsBuM,GAC3DvU,EAAoBsO,IAAazlB,GAA4BilB,IAE9D9N,IACDiU,EAAwB3F,GACxBjK,GAAyBpX,EAAQ,CAC7B8S,mBAAoBA,EACpBJ,UAAW+U,EACXR,kBAAmB5F,MAMvBrhB,EAAOsV,0BAA4BvC,IACnCH,GAAgB,CACZF,UAAW+U,EACXznB,SACA8S,qBACAC,oBACAZ,WA3BR,MAFIvU,GAAOe,MAAM,uDALbf,GAAOe,MAAM,uDAoCjB,EAyBgB+oB,CAAkB,CACdJ,MACAvM,qBAAsB0F,EACtB9a,WAAYwhB,EAAgBhnB,KAEpC0V,kBACAmF,aAAcmM,EAAgBhnB,GACxB0mB,EAAmBnhB,GAAqByhB,EAAgBhnB,UACxDjE,SA3BX,IAgCf,CAEO,SAAS0mB,GAAc+E,GAUP,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAVQhoB,OAC3BA,EAAM0Z,iBACNA,EAAgBvH,QAChBA,EAAOkC,SACPA,GAMHsT,GACUM,EAAyBC,GAA8B9M,GAAS,IAChE2K,EAAYoC,GAAiB/M,GAAS,IACtCgN,EAAgBC,GAAqBjN,EAA8B,CAAA,GAEpEkN,EAAeA,KACjBH,GAAepC,EAAW,EAgD9B,GA7CA1L,GAAU,KAAM,IAAAkO,EACZ,GAAKpW,GAIL,IAAIkC,EAAJ,CAIsC,SAAjB,OAAjBkU,EAAAvoB,EAAO+H,iBAAU,EAAjBwgB,EAAmB5hB,aACnB0hB,EAAkB,CACdvG,IAAK,MACLC,OAAQ,SAGhB,IAAMyG,EAAoBjpB,IAAiB,IAAAkpB,EACjCC,EAAcnpB,GAEE,OAAlBkpB,EAAAC,EAAYzU,aAAM,EAAlBwU,EAAoBvU,YAAalU,EAAOG,KACxCvC,GAAOS,KAAI,kDAAmD2B,EAAOG,IACrEkoB,EAAkBK,EAAYzU,OAAOxN,UAAY,CAAA,GACjD6hB,IACJ,EAMJ,OAHAjpB,GAAiBpD,GAAQskB,GAAgCiI,GAGlD,KACHvsB,GAAOue,oBAAoB+F,GAAgCiI,EAAiB,CAtBhF,OALI5qB,GAAOe,MAAM,oDA4BhB,GACF,CACCwT,EACAkC,EACArU,EAAOG,GACU,OADRynB,EACT5nB,EAAO+H,iBAAU,EAAjB6f,EAAmBjhB,kBAAUkhB,EAC7B7nB,EAAO+H,mBAAP8f,EAAmBc,eACF,OADgBb,EACjC9nB,EAAO+H,iBAAU,EAAjB+f,EAAmB1hB,cAGvByc,GAAyB,CACrB7iB,SACA8iB,iBAAkBoF,KAGjBD,EACD,OAAO,KAGX,IAAMW,EAAkBA,KAEhB5oB,EAAO6oB,WAAahtB,GAAeitB,QACnCZ,GAA2B,GAG/B3sB,YAAW,KACP4sB,GAAc,EAAM,GACrB,IAAI,EAGX,OACI5P,GAACgK,EAAe,CAAApM,SAAA,CACuB,SAAjB,OAAjB4R,EAAA/nB,EAAO+H,iBAAU,EAAjBggB,EAAmBphB,aAChBiR,GAAA,SAAA,CAAQC,UAAU,uBAAuB0B,QAAS+O,EAAchP,SAAUjF,EAAS8B,UAC7D,OAAjB6R,EAAAhoB,EAAO+H,iBAAU,EAAjBigB,EAAmBnhB,cAAe,KAG1Ckf,GACGnO,GAAC4K,GAAW,CACRrQ,QAASA,EACTnS,OAAQA,EACR0Z,iBAAkBA,EAClBvR,MAAOigB,EACPzS,uBAAwBiT,EACxBjE,2BAA4BiE,MAKhD,CAOA,IAAMvB,GAAuB0B,IAQwB,IARvBtV,SAC1BA,EAAQiG,iBACRA,EAAgBqB,qBAChBA,EAAoBhT,WACpBA,EAAUoR,SACVA,EAAQtD,gBACRA,EAAemF,aACfA,GACwB+N,EAClBC,EAAY,CACdtP,mBACA3R,aACA8N,gBAAkByR,IACdzR,EAAgByR,EAAI,EAExBnO,SAAWmO,IACPnO,EAASmO,EAAI,EAEjBtM,eACAD,wBAGJ,OAAQtH,EAAS3L,MACb,KAAKnM,GAAmBke,KACpB,OAAOoP,EAACnO,GAAgB7S,KAAK+gB,EAAS,CAAEvV,SAAUA,EAAU0D,IAAK1D,EAAStT,MAC9E,KAAKxE,GAAmButB,KACpB,OAAOD,EAACjN,GAAY/T,KAAK+gB,EAAS,CAAEvV,SAAUA,EAAU0D,IAAK1D,EAAStT,MAC1E,KAAKxE,GAAmB2lB,OACpB,OAAO2H,EAAChN,GAAchU,KAAK+gB,EAAS,CAAEvV,SAAUA,EAAU0D,IAAK1D,EAAStT,MAC5E,KAAKxE,GAAmB6iB,aACxB,KAAK7iB,GAAmBwjB,eACpB,OAAO8J,EAACzL,GAAsBvV,KAAK+gB,EAAS,CAAEvV,SAAUA,EAAU0D,IAAK1D,EAAStT,MACpF,QAEI,OADAvC,GAAOe,MAAK,8BAAgC8U,EAAiB3L,MACtD,KACf","x_google_ignoreList":[0,1]}